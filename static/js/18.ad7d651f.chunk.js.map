{"version":3,"sources":["apps/Debug/screens/Cards/index.tsx"],"names":["Container","state","y","Animated","Value","cardHeight","cardTitle","cardPadding","height","Dimensions","get","styles","StyleSheet","create","card","borderRadius","container","flex","content","root","margin","cards","color","name","price","nav","to","props","navigate","this","disableScroll","onLeftPress","style","absoluteFill","map","i","inputRange","outputRange","push","translateY","interpolate","extrapolateRight","View","key","transform","backgroundColor","ScrollView","scrollEventThrottle","contentContainerStyle","showsVerticalScrollIndicator","onScroll","event","nativeEvent","contentOffset","React","PureComponent","mapDispatchToProps","connect"],"mappings":"mOAYMA,E,2MACGC,MAAQ,CACbC,EAAG,IAAIC,IAASC,MAAM,I,EAEPC,WAAa,I,EACbC,UAAY,G,EACZC,YAAc,G,EACdC,OAASC,IAAWC,IAAI,UAAUF,O,EAClCG,OAASC,IAAWC,OAAO,CAC1CC,KAAM,CACJC,aAAc,GACdP,OAAQ,EAAKH,YAEfW,UAAW,CACTC,KAAM,GAERC,QAAS,CACPV,OAAsB,EAAd,EAAKA,QAEfW,KAAM,CACJF,KAAM,EACNG,OAAQ,M,EAGKC,MAAQ,CACvB,CACEC,MAAO,UACPC,KAAM,OACNC,MAAO,UAET,CACEF,MAAO,UACPC,KAAM,QACNC,MAAO,UAET,CACEF,MAAO,UACPC,KAAM,eACNC,MAAO,UAET,CACEF,MAAO,UACPC,KAAM,WACNC,MAAO,UAET,CACEF,MAAO,UACPC,KAAM,QACNC,MAAO,WAET,CACEF,MAAO,UACPC,KAAM,YACNC,MAAO,UAET,CACEF,MAAO,UACPC,KAAM,SACNC,MAAO,W,EAsDHC,IAAM,SAACC,GAAD,OAA0B,kBAAM,EAAKC,MAAMC,SAASF,K,wEAnDjD,IAAD,OACNxB,EAAM2B,KAAK5B,MAAXC,EAER,OACE,kBAAC,IAAD,CAAQ4B,eAAa,EAACC,YAAaF,KAAKJ,IAAI,UAC1C,kBAAC,IAAD,CAAMO,MAAOH,KAAKlB,OAAOK,WACvB,kBAAC,IAAD,CAAMgB,MAAOpB,IAAWqB,cACrBJ,KAAKR,MAAMa,IAAI,SAACpB,EAAMqB,GACrB,IAAMC,EAAa,EAAE,EAAK/B,WAAY,GAChCgC,EAAc,CAClB,EAAKhC,WAAa8B,GACjB,EAAK9B,WAAa,EAAKC,YAAc6B,GAEpCA,EAAI,IACNC,EAAWE,KAAK,EAAK/B,YAAc4B,GACnCE,EAAYC,MAAM,EAAKjC,WAAa,EAAKE,cAAgB4B,IAE3D,IAAMI,EAAarC,EAAEsC,YAAY,CAC/BC,iBAAkB,QAClBL,aACAC,gBAEF,OACE,kBAAC,IAASK,KAAV,CACEC,IAAK7B,EAAKS,KACVS,MAAO,CAAEY,UAAW,CAAC,CAAEL,iBAEvB,kBAAC,IAAD,CACEP,MAAO,CAAC,EAAKrB,OAAOG,KAAM,CAAE+B,gBAAiB/B,EAAKQ,cAM5D,kBAAC,IAASwB,WAAV,CACEC,oBAAqB,GACrBC,sBAAuBnB,KAAKlB,OAAOO,QACnC+B,8BAA8B,EAC9BC,SAAU/C,IAASgD,MAAM,CACvB,CACEC,YAAa,CACXC,cAAe,CAAEnD,iB,GAtGXoD,IAAMC,eAmHxBC,EAAoC,CAAE5B,cAE7B6B,sBACb,KACAD,EAFaC,CAGbzD","file":"static/js/18.ad7d651f.chunk.js","sourcesContent":["import React from \"react\";\nimport { Animated, Dimensions, StyleSheet, View } from \"react-native\";\nimport { connect } from \"react-redux\";\nimport { Screen } from \"../../../../components\";\nimport { navigate, NavigationScreen } from \"../../../../models\";\n\ninterface DispatchProps {\n  navigate: typeof navigate;\n}\n\ntype Props = DispatchProps;\n\nclass Container extends React.PureComponent<Props> {\n  public state = {\n    y: new Animated.Value(0)\n  };\n  private readonly cardHeight = 250;\n  private readonly cardTitle = 45;\n  private readonly cardPadding = 10;\n  private readonly height = Dimensions.get(\"window\").height;\n  private readonly styles = StyleSheet.create({\n    card: {\n      borderRadius: 10,\n      height: this.cardHeight\n    },\n    container: {\n      flex: 1\n    },\n    content: {\n      height: this.height * 2\n    },\n    root: {\n      flex: 1,\n      margin: 16\n    }\n  });\n  private readonly cards = [\n    {\n      color: \"#a9d0b6\",\n      name: \"Shot\",\n      price: \"30 CHF\"\n    },\n    {\n      color: \"#e9bbd1\",\n      name: \"Juice\",\n      price: \"64 CHF\"\n    },\n    {\n      color: \"#eba65c\",\n      name: \"Mighty Juice\",\n      price: \"80 CHF\"\n    },\n    {\n      color: \"#95c3e4\",\n      name: \"Sandwich\",\n      price: \"85 CHF\"\n    },\n    {\n      color: \"#1c1c1c\",\n      name: \"Combi\",\n      price: \"145 CHF\"\n    },\n    {\n      color: \"#a390bc\",\n      name: \"Signature\",\n      price: \"92 CHF\"\n    },\n    {\n      color: \"#fef2a0\",\n      name: \"Coffee\",\n      price: \"47 CHF\"\n    }\n  ];\n  public render() {\n    const { y } = this.state;\n\n    return (\n      <Screen disableScroll onLeftPress={this.nav(\"debug\")}>\n        <View style={this.styles.container}>\n          <View style={StyleSheet.absoluteFill}>\n            {this.cards.map((card, i) => {\n              const inputRange = [-this.cardHeight, 0];\n              const outputRange = [\n                this.cardHeight * i,\n                (this.cardHeight - this.cardTitle) * -i\n              ];\n              if (i > 0) {\n                inputRange.push(this.cardPadding * i);\n                outputRange.push((this.cardHeight - this.cardPadding) * -i);\n              }\n              const translateY = y.interpolate({\n                extrapolateRight: \"clamp\",\n                inputRange,\n                outputRange\n              });\n              return (\n                <Animated.View\n                  key={card.name}\n                  style={{ transform: [{ translateY }] }}\n                >\n                  <View\n                    style={[this.styles.card, { backgroundColor: card.color }]}\n                  />\n                </Animated.View>\n              );\n            })}\n          </View>\n          <Animated.ScrollView\n            scrollEventThrottle={16}\n            contentContainerStyle={this.styles.content}\n            showsVerticalScrollIndicator={false}\n            onScroll={Animated.event([\n              {\n                nativeEvent: {\n                  contentOffset: { y }\n                }\n              }\n            ])}\n          />\n        </View>\n      </Screen>\n    );\n  }\n\n  private nav = (to: NavigationScreen) => () => this.props.navigate(to);\n}\n\nconst mapDispatchToProps: DispatchProps = { navigate };\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(Container);\n"],"sourceRoot":""}