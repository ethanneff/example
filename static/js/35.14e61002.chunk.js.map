{"version":3,"sources":["apps/Playground/BouncingBalls/Canvas.tsx","apps/Playground/BouncingBalls/utils.tsx","apps/Playground/BouncingBalls/Balls.tsx","apps/Playground/BouncingBalls/index.tsx"],"names":["Canvas","memo","children","onLayout","color","useColor","styles","StyleSheet","create","container","backgroundColor","surface","flex","View","style","rotate","dx","dy","angle","x","Math","cos","sin","y","resolveItemCollision","particle","otherParticle","maxSpeed","xVelocityDiff","yVelocityDiff","atan2","m1","mass","m2","u1","u2","v1","v2","vFinal1","vFinal2","min","getOverlap","aX","aY","aRadius","bX","bY","bRadius","center","radius","sqrt","getRandomNumber","max","random","resolveBoundCollision","item","canvas","width","height","Balls","count","minSize","maxSize","minSpeed","minMass","maxMass","mitosis","useState","initialItems","i","j","length","push","index","position","Animated","ValueXY","getItems","items","setItems","draw","useCallback","prev","a","b","useEffect","interval","setInterval","clearInterval","onPress","copy","map","key","getLayout","alignItems","borderColor","primary","borderWidth","borderRadius","padding","Theme","p01","justifyContent","adjustsFontSizeToFit","title","String","type","nav","useNav","setCanvas","event","nativeEvent","layout","navBack","onLeftPress"],"mappings":"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","file":"static/js/35.14e61002.chunk.js","sourcesContent":["import React, {ReactNode, memo} from 'react';\nimport {LayoutChangeEvent, StyleSheet, View} from 'react-native';\nimport {useColor} from '../../../hooks';\n\ninterface Props {\n  onLayout: (event: LayoutChangeEvent) => void;\n  children: ReactNode;\n}\n\nexport type CanvasDimensions = {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n};\n\nexport const Canvas = memo(function Canvas({children, onLayout}: Props) {\n  const color = useColor();\n  const styles = StyleSheet.create({\n    container: {\n      backgroundColor: color.surface,\n      flex: 1,\n    },\n  });\n\n  return (\n    <View onLayout={onLayout} style={styles.container}>\n      {children}\n    </View>\n  );\n});\n","import {Animated} from 'react-native';\nimport {CanvasDimensions} from '../Drift/Game';\nimport {Item} from './Balls';\n\nconst rotate = (dx: number, dy: number, angle: number) => {\n  const rotatedVelocities = {\n    x: dx * Math.cos(angle) - dy * Math.sin(angle),\n    y: dx * Math.sin(angle) + dy * Math.cos(angle),\n  };\n\n  return rotatedVelocities;\n};\n\nexport const resolveItemCollision = (\n  particle: Item,\n  otherParticle: Item,\n  maxSpeed: number,\n): void => {\n  const xVelocityDiff = particle.dx - otherParticle.dx;\n  const yVelocityDiff = particle.dy - otherParticle.dy;\n\n  const xDist = otherParticle.x - particle.x;\n  const yDist = otherParticle.y - particle.y;\n\n  // Prevent accidental overlap of particles\n  if (xVelocityDiff * xDist + yVelocityDiff * yDist >= 0) {\n    // Grab angle between the two colliding particles\n    const angle = -Math.atan2(\n      otherParticle.y - particle.y,\n      otherParticle.x - particle.x,\n    );\n\n    // Store mass in var for better readability in collision equation\n    const m1 = particle.mass;\n    const m2 = otherParticle.mass;\n\n    // Velocity before equation\n    const u1 = rotate(particle.dx, particle.dy, angle);\n    const u2 = rotate(otherParticle.dx, otherParticle.dy, angle);\n\n    // Velocity after 1d collision equation\n    const v1 = {\n      dx: (u1.x * (m1 - m2)) / (m1 + m2) + (u2.x * 2 * m2) / (m1 + m2),\n      dy: u1.y,\n    };\n    const v2 = {\n      dx: (u2.x * (m1 - m2)) / (m1 + m2) + (u1.x * 2 * m1) / (m1 + m2),\n      dy: u2.y,\n    };\n\n    // Final velocity after rotating axis back to original location\n    const vFinal1 = rotate(v1.dx, v1.dy, -angle);\n    const vFinal2 = rotate(v2.dx, v2.dy, -angle);\n\n    // Swap particle velocities for realistic bounce effect\n    particle.dx = Math.min(vFinal1.x, maxSpeed);\n    particle.dy = Math.min(vFinal1.y, maxSpeed);\n\n    otherParticle.dx = Math.min(vFinal2.x, maxSpeed);\n    otherParticle.dy = Math.min(vFinal2.y, maxSpeed);\n  }\n};\n\nexport const getOverlap = (\n  aX: number,\n  aY: number,\n  aRadius: number,\n  bX: number,\n  bY: number,\n  bRadius: number,\n  center: boolean,\n): boolean => {\n  const aCenter = {x: aX + aRadius, y: aY + aRadius};\n  const bCenter = {x: bX + bRadius, y: bY + bRadius};\n  const dx = center ? aCenter.x - bCenter.x : aX - bX;\n  const dy = center ? aCenter.y - bCenter.y : aY - bY;\n  const radius = aRadius + bRadius;\n  const distance = Math.sqrt(dx * dx + dy * dy);\n  return distance <= radius;\n};\n\nexport const getRandomNumber = (min: number, max: number): number =>\n  Math.random() * (max - min) + min;\n\ntype GetItems = {\n  count: number;\n  canvas: CanvasDimensions;\n  minSize: number;\n  maxSize: number;\n  minSpeed: number;\n  maxSpeed: number;\n  minMass: number;\n  maxMass: number;\n};\n\nexport const getItems = ({\n  count,\n  canvas,\n  minSize,\n  maxSize,\n  minSpeed,\n  maxSpeed,\n  minMass,\n  maxMass,\n}: GetItems): Item[] => {\n  const initialItems: Item[] = [];\n\n  for (let i = 0; i < count; i++) {\n    const radius = getRandomNumber(minSize, maxSize);\n    const mass = getRandomNumber(minMass, maxMass);\n    const dx = getRandomNumber(-minSpeed, maxSpeed);\n    const dy = getRandomNumber(-minSpeed, maxSpeed);\n    let x = getRandomNumber(canvas.x, canvas.x + canvas.width - radius);\n    let y = getRandomNumber(canvas.x, canvas.x + canvas.height - radius);\n\n    if (i !== 0) {\n      for (let j = 0; j < initialItems.length; j++) {\n        const item = initialItems[j];\n        if (getOverlap(x, y, radius, item.x, item.y, item.radius, false)) {\n          x = getRandomNumber(canvas.x, canvas.x + canvas.width - radius);\n          y = getRandomNumber(canvas.x, canvas.x + canvas.height - radius);\n          j = -1;\n        }\n      }\n    }\n    initialItems.push({\n      index: i,\n      x,\n      y,\n      dx,\n      dy,\n      radius,\n      mass,\n      position: new Animated.ValueXY({x, y}),\n    });\n  }\n\n  return initialItems;\n};\n\nexport const resolveBoundCollision = (\n  item: Item,\n  canvas: CanvasDimensions,\n): void => {\n  if (item.x <= canvas.x) {\n    item.dx = -item.dx;\n    item.x = canvas.x;\n  }\n  if (item.x + 2 * item.radius >= canvas.x + canvas.width) {\n    item.dx = -item.dx;\n    item.x = canvas.x + canvas.width - 2 * item.radius;\n  }\n  if (item.y <= canvas.y) {\n    item.dy = -item.dy;\n    item.y = canvas.y;\n  }\n  if (item.y + 2 * item.radius >= canvas.y + canvas.height) {\n    item.dy = -item.dy;\n    item.y = canvas.y + canvas.height - 2 * item.radius;\n  }\n};\n","import React, {useCallback, useEffect, useState} from 'react';\nimport {Animated} from 'react-native';\nimport {Text, TouchableOpacity} from '../../../components';\nimport {useColor} from '../../../hooks';\nimport {Theme} from '../../../utils';\nimport {CanvasDimensions} from './Canvas';\nimport {\n  getItems,\n  getOverlap,\n  resolveBoundCollision,\n  resolveItemCollision,\n} from './utils';\n\nexport type Item = {\n  index: number;\n  position: Animated.ValueXY;\n  dx: number;\n  dy: number;\n  x: number;\n  y: number;\n  radius: number;\n  mass: number;\n};\n\ntype Props = {\n  count: number;\n  canvas: CanvasDimensions;\n  minSize?: number;\n  maxSize?: number;\n  minSpeed?: number;\n  maxSpeed?: number;\n  minMass?: number;\n  maxMass?: number;\n  mitosis?: number;\n};\n\nexport const Balls = ({\n  count,\n  canvas,\n  minSize = 50,\n  maxSize = 50,\n  minSpeed = 1,\n  maxSpeed = 5,\n  minMass = 1,\n  maxMass = 1,\n  mitosis = 0.1,\n}: Props): JSX.Element => {\n  const color = useColor();\n\n  const [items, setItems] = useState<Item[]>(() =>\n    getItems({\n      count,\n      canvas,\n      minSize,\n      maxSize,\n      minSpeed,\n      maxSpeed,\n      minMass,\n      maxMass,\n    }),\n  );\n\n  const draw = useCallback(() => {\n    setItems((prev) => {\n      for (let i = 0; i < prev.length; i++) {\n        const a = prev[i];\n        for (let j = i + 1; j < prev.length; j++) {\n          const b = prev[j];\n          if (getOverlap(a.x, a.y, a.radius, b.x, b.y, b.radius, true)) {\n            resolveItemCollision(a, b, maxSpeed * 1.5);\n          }\n        }\n        resolveBoundCollision(a, canvas);\n        a.x += a.dx;\n        a.y += a.dy;\n        a.position = new Animated.ValueXY({x: a.x, y: a.y});\n      }\n      return [...prev];\n    });\n  }, [canvas, maxSpeed]);\n\n  useEffect(() => {\n    const interval = setInterval(draw);\n    return () => clearInterval(interval);\n  }, [draw]);\n\n  const onPress = useCallback(\n    ({index}) => () => {\n      setItems((prev) => {\n        const item = prev[index];\n        item.radius *= 1 - mitosis;\n        item.dx *= 2 - mitosis;\n        item.dy *= 2 - mitosis;\n        const copy = {...prev[index]};\n        copy.dx *= -1;\n        copy.dy *= -1;\n        return [...prev, copy];\n      });\n    },\n    [mitosis],\n  );\n\n  return (\n    <>\n      {items.map((item, index) => (\n        <Animated.View key={index} style={item.position.getLayout()}>\n          <TouchableOpacity\n            onPress={onPress({index})}\n            style={{\n              alignItems: 'center',\n              borderColor: color.primary,\n              borderWidth: 1,\n              borderRadius: item.radius,\n              flex: 1,\n              padding: Theme.padding.p01,\n              height: item.radius * 2,\n              justifyContent: 'center',\n              position: 'absolute',\n              width: item.radius * 2,\n            }}>\n            <Text adjustsFontSizeToFit title={String(index)} type=\"h3\" />\n          </TouchableOpacity>\n        </Animated.View>\n      ))}\n    </>\n  );\n};\n","import React, {memo, useCallback, useState} from 'react';\nimport {LayoutChangeEvent} from 'react-native';\nimport {Screen} from '../../../components';\nimport {useNav} from '../../../hooks';\nimport {Canvas, CanvasDimensions} from './Canvas';\nimport {Balls} from './Balls';\n\nexport default memo(function PlaygroundBouncingBalls() {\n  const nav = useNav();\n  const [canvas, setCanvas] = useState<CanvasDimensions | null>(null);\n\n  const onLayout = useCallback((event: LayoutChangeEvent) => {\n    const {x, y, height, width} = event.nativeEvent.layout;\n    setCanvas({x, y, height, width});\n  }, []);\n\n  const navBack = useCallback(nav('playground'), [nav]);\n  return (\n    <Screen onLeftPress={navBack} title=\"BouncingBalls\">\n      <Canvas onLayout={onLayout}>\n        {canvas && (\n          <Balls\n            canvas={canvas}\n            count={1}\n            maxSize={canvas.width / 6}\n            minSize={canvas.width / 6}\n          />\n        )}\n      </Canvas>\n    </Screen>\n  );\n});\n"],"sourceRoot":""}