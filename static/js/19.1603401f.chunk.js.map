{"version":3,"sources":["apps/Checklists/screens/List/index.tsx"],"names":["memo","nav","useNav","color","useColor","dispatch","useRootDispatch","items","useRootSelector","getCurrentActiveChecklistItemsOrderByCreatedAt","handleRemove","useCallback","id","removeChecklistItem","handleToggle","toggleChecklistItemComplete","handleEdit","setActiveChecklistItem","navigate","renderItem","item","style","flexDirection","alignItems","name","success","danger","onPress","warning","completed","lowercase","title","keyExtractor","onLeftPress","to","gutter","data","fab","right","background"],"mappings":"qGAAA,mFAaeA,0BAAK,WAClB,IAAMC,EAAMC,cACNC,EAAQC,cACRC,EAAWC,cACXC,EAAQC,YAAgBC,KAExBC,EAAeC,uBACnB,SAACC,GAAD,OAAgB,kBAAMP,EAASQ,YAAoBD,OACnD,CAACP,IAEGS,EAAeH,uBACnB,SAACC,GAAD,OAAgB,kBAAMP,EAASU,YAA4BH,OAC3D,CAACP,IAEGW,EAAaL,uBACjB,SAACC,GAAD,OAAgB,WACdP,EAASY,YAAuBL,IAChCP,EAASa,YAAS,4BAEpB,CAACb,IAGGc,EAAaR,uBACjB,gBAAGS,EAAH,EAAGA,KAAH,OACE,kBAAC,IAAD,CAAMC,MAAO,CAAEC,cAAe,MAAOC,WAAY,WAC/C,kBAAC,IAAD,CAAMC,KAAK,yBAAyBrB,MAAOA,EAAMsB,UACjD,kBAAC,IAAD,CACED,KAAK,eACLrB,MAAOA,EAAMuB,OACbC,QAASjB,EAAaU,EAAKR,MAE7B,kBAAC,IAAD,CACET,MAAOA,EAAMyB,QACbJ,KAAK,QACLG,QAASb,EAAaM,EAAKR,MAE7B,kBAAC,IAAD,CACET,MAAOiB,EAAKS,UAAY,UAAY,OACpCC,WAAS,EACTC,MAAOX,EAAKI,KACZG,QAASX,EAAWI,EAAKR,SAI/B,CACET,EAAMuB,OACNvB,EAAMsB,QACNtB,EAAMyB,QACNZ,EACAN,EACAI,IAGEkB,EAAerB,uBAAY,SAACS,GAAD,OAAUA,EAAKR,KAAI,IAEpD,OACE,kBAAC,IAAD,CAAQqB,YAAahC,EAAIiC,GAAG,cAAeH,MAAM,YAAYI,QAAM,GACjE,kBAAC,IAAD,CACEH,aAAcA,EACdI,KAAM7B,EACNY,WAAYA,IAEd,kBAAC,IAAD,CACEkB,KAAG,EACHC,OAAK,EACLd,KAAK,OACLrB,MAAOA,EAAMoC,WACbZ,QAAS1B,EAAIiC,GAAG","file":"static/js/19.1603401f.chunk.js","sourcesContent":["import React, { memo, useCallback } from 'react';\nimport { FlatList, View } from 'react-native';\nimport { Button, Screen, Icon } from '../../../../components';\nimport { useRootDispatch, useRootSelector } from '../../../../utils';\nimport {\n  removeChecklistItem,\n  toggleChecklistItemComplete,\n  getCurrentActiveChecklistItemsOrderByCreatedAt,\n  setActiveChecklistItem,\n} from '../../models';\nimport { useNav, useColor } from '../../../../hooks';\nimport { navigate } from '../../../../models';\n\nexport default memo(function Checklist() {\n  const nav = useNav();\n  const color = useColor();\n  const dispatch = useRootDispatch();\n  const items = useRootSelector(getCurrentActiveChecklistItemsOrderByCreatedAt);\n\n  const handleRemove = useCallback(\n    (id: string) => () => dispatch(removeChecklistItem(id)),\n    [dispatch]\n  );\n  const handleToggle = useCallback(\n    (id: string) => () => dispatch(toggleChecklistItemComplete(id)),\n    [dispatch]\n  );\n  const handleEdit = useCallback(\n    (id: string) => () => {\n      dispatch(setActiveChecklistItem(id));\n      dispatch(navigate('checklistsItemUpdate'));\n    },\n    [dispatch]\n  );\n\n  const renderItem = useCallback(\n    ({ item }) => (\n      <View style={{ flexDirection: 'row', alignItems: 'center' }}>\n        <Icon name=\"checkbox-marked-circle\" color={color.success} />\n        <Icon\n          name=\"close-circle\"\n          color={color.danger}\n          onPress={handleRemove(item.id)}\n        />\n        <Icon\n          color={color.warning}\n          name=\"clock\"\n          onPress={handleToggle(item.id)}\n        />\n        <Button\n          color={item.completed ? 'primary' : 'text'}\n          lowercase\n          title={item.name}\n          onPress={handleEdit(item.id)}\n        />\n      </View>\n    ),\n    [\n      color.danger,\n      color.success,\n      color.warning,\n      handleEdit,\n      handleRemove,\n      handleToggle,\n    ]\n  );\n  const keyExtractor = useCallback((item) => item.id, []);\n\n  return (\n    <Screen onLeftPress={nav.to('checklists')} title=\"Checklist\" gutter>\n      <FlatList\n        keyExtractor={keyExtractor}\n        data={items}\n        renderItem={renderItem}\n      />\n      <Icon\n        fab\n        right\n        name=\"plus\"\n        color={color.background}\n        onPress={nav.to('checklistsItemCreate')}\n      />\n    </Screen>\n  );\n});\n"],"sourceRoot":""}