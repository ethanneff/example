{"version":3,"sources":["apps/Playground/ImageCollection/AsyncImage.tsx","apps/Playground/ImageCollection/index.tsx"],"names":["AsyncImage","uri","height","width","color","size","nativeDriver","useNativeDriver","imageAnimated","Animated","Value","indicatorAnimated","styles","StyleSheet","create","indicatorOverlay","justifyContent","position","containerStyle","imageStyle","opacity","indicatorStyle","View","style","Image","onLoad","parallel","timing","toValue","start","source","ActivityIndicator","Container","data","Math","random","numColumns","handleInfiniteScrollThreshold","columnWidth","Dimensions","get","imageUrl","keyExtractor","toString","nav","to","props","navigate","handleFetchMore","push","renderImage","onLeftPress","this","title","FlatList","onEndReached","onEndReachedThreshold","renderItem","React","PureComponent","mapDispatchToProps","connect"],"mappings":"kPAWWA,EAAa,SAAC,GAMX,IALZC,EAKW,EALXA,IACAC,EAIW,EAJXA,OACAC,EAGW,EAHXA,MAGW,IAFXC,aAEW,MAFH,QAEG,MADXC,YACW,MADJ,QACI,EACLC,EAAeC,cACfC,EAAgB,IAAIC,IAASC,MAAM,GACnCC,EAAoB,IAAIF,IAASC,MAAM,GACvCE,EAASC,IAAWC,OAAO,CAC/BC,iBAAkB,CAACC,eAAgB,SAAUC,SAAU,cAenDC,EAAiB,CAACf,QAAOD,UACzBiB,EAAa,CAACD,EAAgB,CAACE,QAASZ,IACxCa,EAAiB,CACrBH,EACA,CAACE,QAAST,GACVC,EAAOG,kBAET,OACE,kBAACO,EAAA,EAAD,CAAMC,MAAOL,GACX,kBAACT,EAAA,EAASe,MAAV,CAAgBC,OAtBA,WAClBhB,IAASiB,SAAS,CAChBjB,IAASkB,OAAOhB,EAAmB,CACjCiB,QAAS,EACTrB,gBAAiBD,IAEnBG,IAASkB,OAAOnB,EAAe,CAC7BoB,QAAS,EACTrB,gBAAiBD,MAElBuB,SAYoCC,OAAQ,CAAC7B,OAAMsB,MAAOJ,IAC3D,kBAACV,EAAA,EAASa,KAAV,CAAeC,MAAOF,GACpB,kBAACU,EAAA,EAAD,CAAmB3B,MAAOA,EAAOC,KAAMA,OCnCzC2B,E,4MACJC,KAAiB,CACfC,KAAKC,SACLD,KAAKC,SACLD,KAAKC,SACLD,KAAKC,SACLD,KAAKC,SACLD,KAAKC,SACLD,KAAKC,SACLD,KAAKC,U,EAEPC,WAAa,E,EACbC,8BAAgC,G,EAChCC,YAAcC,IAAWC,IAAI,UAAUrC,MAAQ,EAAKiC,W,EACpDK,S,gCAAoC,EAAKH,Y,YAAe,EAAKA,a,EAE7DI,aAAe,SAACT,GAAD,OAAkBA,EAAKU,Y,EAEtCC,IAAM,SAACC,GAAD,OAA0B,YAE9BD,EADwB,EAAKE,MAAtBC,UACHF,K,EAGNG,gBAAkB,WAChB,EAAKf,KAAKgB,KAAKf,KAAKC,UACpB,EAAKF,KAAKgB,KAAKf,KAAKC,UACpB,EAAKF,KAAKgB,KAAKf,KAAKC,UACpB,EAAKF,KAAKgB,KAAKf,KAAKC,UACpB,EAAKF,KAAKgB,KAAKf,KAAKC,W,EAGtBe,YAAc,kBACZ,kBAAC,EAAD,CACEhD,OAAQ,EAAKoC,YACbrC,IAAK,EAAKwC,SACVtC,MAAO,EAAKmC,e,uDAKd,OACE,kBAAC,IAAD,CAAQa,YAAaC,KAAKR,IAAI,cAAeS,MAAM,oBACjD,kBAACC,EAAA,EAAD,CACErB,KAAMmB,KAAKnB,KACXS,aAAcU,KAAKV,aACnBN,WAAYgB,KAAKhB,WACjBmB,aAAcH,KAAKJ,gBACnBQ,sBAAuBJ,KAAKf,8BAC5BoB,WAAYL,KAAKF,mB,GAhDHQ,IAAMC,eAuDxBC,EAAoC,CAACb,cAE5Bc,sBAAQ,KAAMD,EAAdC,CAAkC7B","file":"static/js/37.a8d8fbaf.chunk.js","sourcesContent":["import React from 'react';\nimport {ActivityIndicator, Animated, StyleSheet, View} from 'react-native';\nimport {useNativeDriver} from '../../../hooks';\ninterface Props {\n  uri: string;\n  height: number;\n  width: number;\n  color?: string;\n  size?: number | 'small' | 'large';\n}\n\nexport var AsyncImage = ({\n  uri,\n  height,\n  width,\n  color = 'black',\n  size = 'small',\n}: Props) => {\n  const nativeDriver = useNativeDriver();\n  const imageAnimated = new Animated.Value(0);\n  const indicatorAnimated = new Animated.Value(1);\n  const styles = StyleSheet.create({\n    indicatorOverlay: {justifyContent: 'center', position: 'absolute'},\n  });\n  const onImageLoad = () => {\n    Animated.parallel([\n      Animated.timing(indicatorAnimated, {\n        toValue: 0,\n        useNativeDriver: nativeDriver,\n      }),\n      Animated.timing(imageAnimated, {\n        toValue: 1,\n        useNativeDriver: nativeDriver,\n      }),\n    ]).start();\n  };\n\n  const containerStyle = {width, height};\n  const imageStyle = [containerStyle, {opacity: imageAnimated}];\n  const indicatorStyle = [\n    containerStyle,\n    {opacity: indicatorAnimated},\n    styles.indicatorOverlay,\n  ];\n  return (\n    <View style={containerStyle}>\n      <Animated.Image onLoad={onImageLoad} source={{uri}} style={imageStyle} />\n      <Animated.View style={indicatorStyle}>\n        <ActivityIndicator color={color} size={size} />\n      </Animated.View>\n    </View>\n  );\n};\n","import React from 'react';\nimport {Dimensions, FlatList} from 'react-native';\nimport {connect} from 'react-redux';\nimport {Screen} from '../../../components';\nimport {NavigationScreen, navigate} from '../../../models';\nimport {AsyncImage} from './AsyncImage';\n\ninterface DispatchProps {\n  navigate: typeof navigate;\n}\n\ntype Props = DispatchProps;\n\nclass Container extends React.PureComponent<Props> {\n  data: number[] = [\n    Math.random(),\n    Math.random(),\n    Math.random(),\n    Math.random(),\n    Math.random(),\n    Math.random(),\n    Math.random(),\n    Math.random(),\n  ];\n  numColumns = 3;\n  handleInfiniteScrollThreshold = 0.3;\n  columnWidth = Dimensions.get('window').width / this.numColumns;\n  imageUrl = `http://lorempixel.com/${this.columnWidth}/${this.columnWidth}`;\n\n  keyExtractor = (data: number) => data.toString();\n\n  nav = (to: NavigationScreen) => () => {\n    const {navigate: nav} = this.props;\n    nav(to);\n  };\n\n  handleFetchMore = () => {\n    this.data.push(Math.random());\n    this.data.push(Math.random());\n    this.data.push(Math.random());\n    this.data.push(Math.random());\n    this.data.push(Math.random());\n  };\n\n  renderImage = () => (\n    <AsyncImage\n      height={this.columnWidth}\n      uri={this.imageUrl}\n      width={this.columnWidth}\n    />\n  );\n\n  render() {\n    return (\n      <Screen onLeftPress={this.nav('playground')} title=\"Image Collection\">\n        <FlatList\n          data={this.data}\n          keyExtractor={this.keyExtractor}\n          numColumns={this.numColumns}\n          onEndReached={this.handleFetchMore}\n          onEndReachedThreshold={this.handleInfiniteScrollThreshold}\n          renderItem={this.renderImage}\n        />\n      </Screen>\n    );\n  }\n}\n\nconst mapDispatchToProps: DispatchProps = {navigate};\n\nexport default connect(null, mapDispatchToProps)(Container);\n"],"sourceRoot":""}