{"version":3,"sources":["apps/Debug/screens/Ball/index.tsx"],"names":["styles","StyleSheet","create","ball","borderColor","borderRadius","borderWidth","height","marginLeft","marginTop","width","button","flex","flexDirection","justifyContent","memo","useRootSelector","getHeight","getWidth","nav","useNav","ballPosition","Animated","ValueXY","x","y","useDriver","useNativeDriver","animate","dx","dy","spring","toValue","start","onLeftPress","to","title","View","style","getLayout","onPress","Math","random"],"mappings":"qGAAA,kFAOMA,EAASC,IAAWC,OAAO,CAC/BC,KAAM,CACJC,YAAa,QACbC,aAAc,GACdC,YAAa,GACbC,OAAQ,GACRC,YAAa,GACbC,WAAY,GACZC,MAAO,IAETC,OAAQ,CACNC,KAAM,EACNC,cAAe,MACfC,eAAgB,kBAILC,0BAAK,WAClB,IAAMR,EAASS,YAAgBC,KACzBP,EAAQM,YAAgBE,KACxBC,EAAMC,cACNC,EAAe,IAAIC,IAASC,QAAQ,CAAEC,EAAGd,EAAQ,EAAGe,EAAGlB,EAAS,IAChEmB,EAAYC,cACZC,EAAU,SAACC,EAAYC,GAC3BR,IAASS,OAAOV,EAAc,CAC5BW,QAAS,CAAER,EAAGd,EAAQmB,EAAIJ,EAAGlB,EAASuB,GACtCH,gBAAiBD,IAChBO,SAIL,OACE,kBAAC,IAAD,CAAQC,YAAaf,EAAIgB,GAAG,SAAUC,MAAM,QAC1C,kBAAC,IAASC,KAAV,CAAeC,MAAO,CAACjB,EAAakB,YAAavC,EAAOG,QACxD,kBAAC,IAAD,CAAMmC,MAAOtC,EAAOW,QAClB,kBAAC,IAAD,CAAQyB,MAAM,UAAUI,QANP,kBAAMZ,EAAQ,GAAK,OAOpC,kBAAC,IAAD,CAAQQ,MAAM,SAASI,QANP,kBAAMZ,EAAQa,KAAKC,SAAUD,KAAKC","file":"static/js/24.a449d6bf.chunk.js","sourcesContent":["import React, { memo } from \"react\";\nimport { Animated, StyleSheet, View } from \"react-native\";\nimport { Button, Screen } from \"../../../../components\";\nimport { getHeight, getWidth } from \"../../../../models\";\nimport { useNativeDriver, useNav } from \"../../../../hooks\";\nimport { useRootSelector } from \"../../../../utils\";\n\nconst styles = StyleSheet.create({\n  ball: {\n    borderColor: \"black\",\n    borderRadius: 30,\n    borderWidth: 30,\n    height: 60,\n    marginLeft: -30,\n    marginTop: -30,\n    width: 60\n  },\n  button: {\n    flex: 1,\n    flexDirection: \"row\",\n    justifyContent: \"space-around\"\n  }\n});\n\nexport default memo(function DebugBall() {\n  const height = useRootSelector(getHeight);\n  const width = useRootSelector(getWidth);\n  const nav = useNav();\n  const ballPosition = new Animated.ValueXY({ x: width / 2, y: height / 2 });\n  const useDriver = useNativeDriver();\n  const animate = (dx: number, dy: number) => {\n    Animated.spring(ballPosition, {\n      toValue: { x: width * dx, y: height * dy },\n      useNativeDriver: useDriver\n    }).start();\n  };\n  const onInitialPress = () => animate(0.5, 0.5);\n  const onRandomPress = () => animate(Math.random(), Math.random());\n  return (\n    <Screen onLeftPress={nav.to(\"debug\")} title=\"Ball\">\n      <Animated.View style={[ballPosition.getLayout(), styles.ball]} />\n      <View style={styles.button}>\n        <Button title=\"initial\" onPress={onInitialPress} />\n        <Button title=\"random\" onPress={onRandomPress} />\n      </View>\n    </Screen>\n  );\n});\n"],"sourceRoot":""}