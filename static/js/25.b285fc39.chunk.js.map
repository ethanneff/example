{"version":3,"sources":["apps/Focus/components/ListSection.tsx","apps/Focus/components/ListItem.tsx","apps/Focus/components/List.tsx","apps/Focus/index.tsx"],"names":["ListSection","memo","item","color","useColor","View","style","alignItems","borderTopColor","secondary","borderTopWidth","flexDirection","justifyContent","marginTop","Theme","padding","p02","type","title","dayOfMonth","month","dayOfWeek","ListItem","showSection","onItemPress","currentItem","future","id","Date","now","iconColor","success","action","borderColor","primary","background","borderLeftWidth","p01","flex","height","p10","paddingHorizontal","p04","paddingVertical","onPress","disabled","width","p20","name","size","paddingRight","hour","zone","numberOfLines","ellipsizeMode","itemHeight","initialIndex","dayjs","startOf","add","diff","getItemLayout","_","index","length","offset","getCurrentItem","currentTime","before","setHours","getHours","after","getFirstItemOfDay","items","keyExtractor","String","List","onEndReached","onEndReachedThreshold","useState","loading","setLoading","styles","StyleSheet","create","list","opacity","position","onLoad","useCallback","setTimeout","useEffect","renderItem","FlatList","inverted","initialNumToRender","initialScrollIndex","data","ActivityIndicator","editItem","visible","Focus","modalItemEdit","setModalItemEdit","modalProfile","modalLogin","setItems","nav","useNav","generateMoreItems","group","i","lastItem","valueOf","next","subtract","push","Math","random","format","handleItemPress","handleLoad","handleModalEditBackgroundPress","state","border","onLeftPress","to","duration","testID","onBackgroundPress"],"mappings":"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","file":"static/js/25.b285fc39.chunk.js","sourcesContent":["import React, {memo} from 'react';\nimport {View} from 'react-native';\nimport {Text} from '../../../components';\nimport {Theme} from '../../../utils';\nimport {useColor} from '../../../hooks';\nimport {Item} from './List';\n\ninterface Props {\n  item: Item;\n}\n\nexport const ListSection = memo(function ListSection({item}: Props) {\n  const color = useColor();\n  return (\n    <View\n      style={{\n        alignItems: 'center',\n        borderTopColor: color.secondary,\n        borderTopWidth: 1,\n        flexDirection: 'row',\n        justifyContent: 'center',\n        marginTop: Theme.padding.p02,\n        padding: Theme.padding.p02,\n      }}>\n      <Text type=\"h3\" title={item.dayOfMonth} />\n      <Text type=\"overline\" title={` ${item.month}, ${item.dayOfWeek}`} />\n    </View>\n  );\n});\n","import React, {memo} from 'react';\nimport {View} from 'react-native';\nimport {Icon, Text, TouchableOpacity} from '../../../components';\nimport {Theme} from '../../../utils';\nimport {useColor} from '../../../hooks';\nimport {Item} from './List';\nimport {ListSection} from './ListSection';\n\ninterface Props {\n  showSection: boolean;\n  item: Item;\n  currentItem: boolean;\n  onItemPress(item: Item): void;\n}\n\nexport const ListItem = memo(function ListItem({\n  showSection,\n  item,\n  onItemPress,\n  currentItem,\n}: Props) {\n  const color = useColor();\n  const future = item.id > Date.now();\n  const iconColor = future ? color.secondary : color.success;\n  const title = currentItem ? 'current' : future ? 'future' : item.action;\n  return (\n    <View\n      style={{\n        borderColor: currentItem ? color.primary : color.background,\n        borderLeftWidth: Theme.padding.p01,\n        flex: 1,\n      }}>\n      <TouchableOpacity\n        style={{\n          flex: 1,\n          flexDirection: 'row',\n          height: Theme.padding.p10,\n          paddingHorizontal: Theme.padding.p04,\n          paddingVertical: Theme.padding.p02,\n        }}\n        onPress={() => onItemPress(item)} // TODO: usecallback\n        disabled={future}>\n        <View\n          style={{\n            flexDirection: 'row',\n            width: Theme.padding.p20,\n          }}>\n          <Icon\n            name={future ? 'cancel' : 'checkbox-blank-circle'}\n            size={14}\n            color={iconColor}\n            style={{paddingRight: Theme.padding.p01}}\n          />\n          <Text title={`${item.hour} ${item.zone}`} />\n        </View>\n        <Text\n          style={{\n            color: color.secondary,\n            flex: 1,\n          }}\n          title={title}\n          type=\"body1\"\n          numberOfLines={1}\n          ellipsizeMode={'tail'}\n        />\n      </TouchableOpacity>\n      {showSection && <ListSection item={item} />}\n    </View>\n  );\n});\n","import React, {memo, useCallback, useEffect, useState} from 'react';\nimport {ActivityIndicator, FlatList, StyleSheet} from 'react-native';\nimport dayjs from 'dayjs';\nimport {Theme} from '../../../utils';\nimport {ListItem} from './ListItem';\n\nexport interface Item {\n  action: string;\n  dayOfMonth: string;\n  dayOfWeek: string;\n  hour: string;\n  id: number;\n  month: string;\n  zone: string;\n}\n\ninterface Props {\n  items: Item[];\n  onEndReached(): void;\n  onEndReachedThreshold: number;\n  onItemPress(item: Item): void;\n}\n\nconst itemHeight = Theme.padding.p10;\n\nconst initialIndex =\n  dayjs().startOf('day').add(2, 'day').diff(dayjs(), 'hour') - 4;\n\nconst getItemLayout = (_: Item[] | null | undefined, index: number) => ({\n  length: itemHeight,\n  offset: itemHeight * index,\n  index,\n});\n\nconst getCurrentItem = (item: Item): boolean => {\n  const currentTime = new Date();\n  const before = currentTime.setHours(currentTime.getHours() - 1);\n  const after = currentTime.setHours(currentTime.getHours() + 1);\n  const between = item.id > before && item.id < after;\n  return between;\n};\n\nconst getFirstItemOfDay = (index: number, item: Item, items: Item[]) =>\n  index < 1 ? false : item.dayOfMonth !== items[index - 1].dayOfMonth;\n\nconst keyExtractor = (item: Item) => String(item.id);\n\nexport const List = memo(\n  ({items, onItemPress, onEndReached, onEndReachedThreshold}: Props) => {\n    const [loading, setLoading] = useState(true);\n    const styles = StyleSheet.create({\n      list: {\n        opacity: loading ? 0 : 1,\n      },\n      loading: {\n        height: '100%',\n        position: 'absolute',\n        width: '100%',\n      },\n    });\n\n    const onLoad = useCallback(() => {\n      setTimeout(() => {\n        setLoading(false);\n      }, 1000);\n    }, []);\n\n    useEffect(onLoad, []);\n\n    const renderItem = useCallback(\n      ({item, index}) => (\n        <ListItem\n          currentItem={getCurrentItem(item)}\n          item={item}\n          showSection={getFirstItemOfDay(index, item, items)}\n          onItemPress={onItemPress}\n        />\n      ),\n      [items, onItemPress],\n    );\n\n    return (\n      <>\n        <FlatList\n          style={styles.list}\n          inverted\n          initialNumToRender={0}\n          initialScrollIndex={initialIndex}\n          getItemLayout={getItemLayout}\n          keyExtractor={keyExtractor}\n          data={items}\n          onEndReached={onEndReached}\n          onEndReachedThreshold={onEndReachedThreshold}\n          renderItem={renderItem}\n        />\n        {loading && <ActivityIndicator size=\"large\" style={styles.loading} />}\n      </>\n    );\n  },\n);\n","import React, {useCallback, useEffect, useState} from 'react';\nimport dayjs from 'dayjs';\nimport {Dialog, Screen} from '../../components';\nimport {useNav} from '../../hooks';\nimport {Item, List} from './components/List';\n\n// TODO: flatlist on web\n// TODO: rename item.action to item.title\n// TODO: fix refresh scroll jitter\n// TODO: re-rendering everything because dialog is same level as list\n\nconst infiniteScrollRegeneration = 100;\nconst editItem: {visible: boolean; item: Item | null} = {\n  visible: false,\n  item: null,\n};\nexport default function Focus() {\n  const [modalItemEdit, setModalItemEdit] = useState(editItem);\n  const [modalProfile] = useState(false);\n  const [modalLogin] = useState(false);\n  const [items, setItems] = useState<Item[]>([]);\n  const nav = useNav();\n\n  const generateMoreItems = useCallback(() => {\n    const group = [...items];\n    for (let i = 0; i < infiniteScrollRegeneration; i++) {\n      const lastItem =\n        group.length === 0\n          ? dayjs().startOf('day').add(2, 'day').valueOf()\n          : group[group.length - 1].id;\n      const next = dayjs(lastItem).subtract(1, 'hour');\n      const id = next.valueOf();\n      group.push({\n        action: String(Math.random()) + String(Math.random()),\n        dayOfMonth: next.format('D'),\n        dayOfWeek: next.format('ddd'),\n        hour: next.format('h'),\n        id,\n        month: next.format('MMM'),\n        zone: next.format('a'),\n      });\n    }\n    setItems(group);\n  }, [items]);\n\n  const handleItemPress = useCallback((item: Item) => {\n    setModalItemEdit({visible: true, item});\n  }, []);\n\n  const handleLoad = useCallback(() => {\n    if (items.length > 0) {\n      return;\n    }\n    generateMoreItems();\n  }, [generateMoreItems, items.length]);\n\n  const handleModalEditBackgroundPress = useCallback(() => {\n    setModalItemEdit((state) => ({...state, visible: false}));\n  }, []);\n\n  useEffect(handleLoad, []);\n\n  return (\n    <>\n      <Screen border onLeftPress={nav.to('portfolioLanding')} title=\"Focus\">\n        {items.length > 0 && (\n          <List\n            items={items}\n            onItemPress={handleItemPress}\n            onEndReached={generateMoreItems}\n            onEndReachedThreshold={0.5}\n          />\n        )}\n      </Screen>\n      {modalItemEdit.visible && (\n        <Dialog\n          duration={2000}\n          testID=\"editItem\"\n          title={modalItemEdit.item ? modalItemEdit.item.action : 'empty'}\n          onBackgroundPress={handleModalEditBackgroundPress}\n        />\n      )}\n      {modalProfile && (\n        <Dialog\n          testID=\"editItem\"\n          title=\"hello\"\n          onBackgroundPress={handleModalEditBackgroundPress}\n        />\n      )}\n      {modalLogin && (\n        <Dialog\n          testID=\"editItem\"\n          title=\"hello\"\n          onBackgroundPress={handleModalEditBackgroundPress}\n        />\n      )}\n    </>\n  );\n}\n"],"sourceRoot":""}