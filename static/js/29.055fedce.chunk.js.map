{"version":3,"sources":["apps/Debug/screens/Input/index.tsx"],"names":["Container","state","email","error","name","password","styles","StyleSheet","create","container","flex","padding","Theme","p04","nav","to","props","navigate","updateState","key","val","setState","this","onLeftPress","style","title","placeholder","optional","value","onChangeText","keyboardType","KeyboardType","Email","secureTextEntry","contained","onPress","React","PureComponent","mapDispatchToProps","connect"],"mappings":"8NAkBMA,E,2MACGC,MAAQ,CACbC,MAAO,GACPC,MAAO,GACPC,KAAM,GACNC,SAAU,I,EAGJC,OAASC,IAAWC,OAAO,CACjCC,UAAW,CACTC,KAAM,EACNC,QAASC,IAAMD,QAAQE,O,EAyCnBC,IAAM,SAACC,GAAD,OAA0B,kBAAM,EAAKC,MAAMC,SAASF,K,EAE1DG,YAAc,SAACC,GAAD,OAAiB,SAACC,GAAD,OACrC,EAAKC,SAAL,eAAiBF,EAAMC,M,wEAzCR,IAAD,SAC2BE,KAAKrB,MAAtCC,EADM,EACNA,MAAOG,EADD,EACCA,SAAUD,EADX,EACWA,KAAMD,EADjB,EACiBA,MAC/B,OACE,kBAAC,IAAD,CAAQoB,YAAaD,KAAKR,IAAI,UAC5B,kBAAC,IAAD,CAAMU,MAAOF,KAAKhB,OAAOG,WACvB,kBAAC,IAAD,CACEgB,MAAM,OACNC,YAAY,WACZC,UAAQ,EACRC,MAAOxB,EACPyB,aAAcP,KAAKJ,YAAY,QAC/Bf,MAAOA,IAET,kBAAC,IAAD,CACEsB,MAAM,QACNG,MAAO1B,EACP2B,aAAcP,KAAKJ,YAAY,SAC/BY,aAAcC,IAAaC,MAC3BN,YAAY,oBACZvB,MAAOA,IAET,kBAAC,IAAD,CACEyB,MAAOvB,EACPwB,aAAcP,KAAKJ,YAAY,YAC/BO,MAAM,WACNC,YAAY,6CACZO,iBAAe,IAEjB,kBAAC,IAAD,CACEC,WAAS,EACTT,MAAM,gBACNU,QAAS,kBAAM,EAAKd,SAAS,CAAElB,MAAO,2B,GA7C1BiC,IAAMC,eA0DxBC,EAAoC,CAAErB,cAE7BsB,sBACb,KACAD,EAFaC,CAGbvC","file":"static/js/29.055fedce.chunk.js","sourcesContent":["import React from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport { connect } from \"react-redux\";\nimport {\n  Button,\n  KeyboardType,\n  Screen,\n  TextInput\n} from \"../../../../components\";\nimport { NavigationScreen, navigate } from \"../../../../models\";\nimport { Theme } from \"../../../../utils\";\n\ninterface DispatchProps {\n  navigate: typeof navigate;\n}\n\ntype Props = DispatchProps;\n\nclass Container extends React.PureComponent<Props> {\n  public state = {\n    email: \"\",\n    error: \"\",\n    name: \"\",\n    password: \"\"\n  };\n\n  private styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      padding: Theme.padding.p04\n    }\n  });\n  public render() {\n    const { email, password, name, error } = this.state;\n    return (\n      <Screen onLeftPress={this.nav(\"debug\")}>\n        <View style={this.styles.container}>\n          <TextInput\n            title=\"Name\"\n            placeholder=\"jane doe\"\n            optional\n            value={name}\n            onChangeText={this.updateState(\"name\")}\n            error={error}\n          />\n          <TextInput\n            title=\"Email\"\n            value={email}\n            onChangeText={this.updateState(\"email\")}\n            keyboardType={KeyboardType.Email}\n            placeholder=\"example@gmail.com\"\n            error={error}\n          />\n          <TextInput\n            value={password}\n            onChangeText={this.updateState(\"password\")}\n            title=\"Password\"\n            placeholder=\"•••••••\"\n            secureTextEntry\n          />\n          <Button\n            contained\n            title=\"complete form\"\n            onPress={() => this.setState({ error: \"Invalid Email\" })}\n          />\n        </View>\n      </Screen>\n    );\n  }\n\n  private nav = (to: NavigationScreen) => () => this.props.navigate(to);\n\n  private updateState = (key: string) => (val: string) =>\n    this.setState({ [key]: val });\n}\n\nconst mapDispatchToProps: DispatchProps = { navigate };\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(Container);\n"],"sourceRoot":""}