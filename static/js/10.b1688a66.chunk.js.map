{"version":3,"sources":["../node_modules/react-native-web/dist/vendor/react-native/TouchHistoryMath/index.js","../node_modules/react-native-web/dist/vendor/react-native/PanResponder/index.js","../node_modules/react-native-web/dist/exports/PanResponder/index.js","apps/Debug/screens/PinchSpread/usePanGesture.ts","apps/Debug/screens/PinchSpread/logic.tsx","apps/Debug/screens/PinchSpread/index.tsx"],"names":["TouchHistoryMath","centroidDimension","touchHistory","touchesChangedAfter","isXAxis","ofCurrent","touchBank","total","count","oneTouchData","numberActiveTouches","indexOfSingleActiveTouch","touchActive","currentTimeStamp","currentPageX","currentPageY","previousPageX","previousPageY","i","length","touchTrack","undefined","noCentroid","currentCentroidXOfTouchesChangedAfter","currentCentroidYOfTouchesChangedAfter","previousCentroidXOfTouchesChangedAfter","previousCentroidYOfTouchesChangedAfter","currentCentroidX","currentCentroidY","PanResponder","_initializeGestureState","gestureState","moveX","moveY","x0","y0","dx","dy","vx","vy","_accountsForMovesUpTo","_updateGestureStateOnMove","movedAfter","prevX","x","prevY","y","nextDX","nextDY","dt","mostRecentTimeStamp","create","config","interactionState","handle","stateID","Math","random","panHandlers","onStartShouldSetResponder","e","onStartShouldSetPanResponder","onMoveShouldSetResponder","onMoveShouldSetPanResponder","onStartShouldSetResponderCapture","nativeEvent","touches","onStartShouldSetPanResponderCapture","onMoveShouldSetResponderCapture","onMoveShouldSetPanResponderCapture","onResponderGrant","InteractionManager","createInteractionHandle","onPanResponderGrant","onShouldBlockNativeResponder","onResponderReject","clearInteractionHandle","onPanResponderReject","onResponderRelease","onPanResponderRelease","onResponderStart","onPanResponderStart","onResponderMove","onPanResponderMove","onResponderEnd","onPanResponderEnd","onResponderTerminate","onPanResponderTerminate","onResponderTerminationRequest","onPanResponderTerminationRequest","getInteractionHandle","callback","event","usePanGesture","useState","panGesture","setPanGesture","useEffect","gesture","GestureHandler","minTouches","finish","start","this","forEach","touch","recordFinish","recordStart","outcome","determineOutcome","isStartAlreadyRecorded","String","identifier","locationX","locationY","center","startXDistance","abs","startYDistance","finishXDistance","finishYDistance","points","numRecordedTouched","Object","keys","point","pinch","spread","determineCenter","isPinch","isSpread","title","PinchSpread","pinchCount","spreadCount","state","setState","color","useColor","nav","useNav","styles","StyleSheet","container","flex","backgroundColor","surface","gestureHandler","disableScroll","onLeftPress","to","Animated","View","style"],"mappings":"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","file":"static/js/10.b1688a66.chunk.js","sourcesContent":["var TouchHistoryMath = {\n  /**\n   * This code is optimized and not intended to look beautiful. This allows\n   * computing of touch centroids that have moved after `touchesChangedAfter`\n   * timeStamp. You can compute the current centroid involving all touches\n   * moves after `touchesChangedAfter`, or you can compute the previous\n   * centroid of all touches that were moved after `touchesChangedAfter`.\n   *\n   * @param {TouchHistoryMath} touchHistory Standard Responder touch track\n   * data.\n   * @param {number} touchesChangedAfter timeStamp after which moved touches\n   * are considered \"actively moving\" - not just \"active\".\n   * @param {boolean} isXAxis Consider `x` dimension vs. `y` dimension.\n   * @param {boolean} ofCurrent Compute current centroid for actively moving\n   * touches vs. previous centroid of now actively moving touches.\n   * @return {number} value of centroid in specified dimension.\n   */\n  centroidDimension: function centroidDimension(touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {\n    var touchBank = touchHistory.touchBank;\n    var total = 0;\n    var count = 0;\n    var oneTouchData = touchHistory.numberActiveTouches === 1 ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;\n\n    if (oneTouchData !== null) {\n      if (oneTouchData.touchActive && oneTouchData.currentTimeStamp > touchesChangedAfter) {\n        total += ofCurrent && isXAxis ? oneTouchData.currentPageX : ofCurrent && !isXAxis ? oneTouchData.currentPageY : !ofCurrent && isXAxis ? oneTouchData.previousPageX : oneTouchData.previousPageY;\n        count = 1;\n      }\n    } else {\n      for (var i = 0; i < touchBank.length; i++) {\n        var touchTrack = touchBank[i];\n\n        if (touchTrack !== null && touchTrack !== undefined && touchTrack.touchActive && touchTrack.currentTimeStamp >= touchesChangedAfter) {\n          var toAdd = void 0; // Yuck, program temporarily in invalid state.\n\n          if (ofCurrent && isXAxis) {\n            toAdd = touchTrack.currentPageX;\n          } else if (ofCurrent && !isXAxis) {\n            toAdd = touchTrack.currentPageY;\n          } else if (!ofCurrent && isXAxis) {\n            toAdd = touchTrack.previousPageX;\n          } else {\n            toAdd = touchTrack.previousPageY;\n          }\n\n          total += toAdd;\n          count++;\n        }\n      }\n    }\n\n    return count > 0 ? total / count : TouchHistoryMath.noCentroid;\n  },\n  currentCentroidXOfTouchesChangedAfter: function currentCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, // isXAxis\n    true);\n  },\n  currentCentroidYOfTouchesChangedAfter: function currentCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, // isXAxis\n    true);\n  },\n  previousCentroidXOfTouchesChangedAfter: function previousCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, // isXAxis\n    false);\n  },\n  previousCentroidYOfTouchesChangedAfter: function previousCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, // isXAxis\n    false);\n  },\n  currentCentroidX: function currentCentroidX(touchHistory) {\n    return TouchHistoryMath.centroidDimension(touchHistory, 0, // touchesChangedAfter\n    true, // isXAxis\n    true);\n  },\n  currentCentroidY: function currentCentroidY(touchHistory) {\n    return TouchHistoryMath.centroidDimension(touchHistory, 0, // touchesChangedAfter\n    false, // isXAxis\n    true);\n  },\n  noCentroid: -1\n};\nexport default TouchHistoryMath;","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport InteractionManager from '../../../exports/InteractionManager';\nimport TouchHistoryMath from '../TouchHistoryMath';\nvar currentCentroidXOfTouchesChangedAfter = TouchHistoryMath.currentCentroidXOfTouchesChangedAfter;\nvar currentCentroidYOfTouchesChangedAfter = TouchHistoryMath.currentCentroidYOfTouchesChangedAfter;\nvar previousCentroidXOfTouchesChangedAfter = TouchHistoryMath.previousCentroidXOfTouchesChangedAfter;\nvar previousCentroidYOfTouchesChangedAfter = TouchHistoryMath.previousCentroidYOfTouchesChangedAfter;\nvar currentCentroidX = TouchHistoryMath.currentCentroidX;\nvar currentCentroidY = TouchHistoryMath.currentCentroidY;\n/**\n * `PanResponder` reconciles several touches into a single gesture. It makes\n * single-touch gestures resilient to extra touches, and can be used to\n * recognize simple multi-touch gestures.\n *\n * By default, `PanResponder` holds an `InteractionManager` handle to block\n * long-running JS events from interrupting active gestures.\n *\n * It provides a predictable wrapper of the responder handlers provided by the\n * [gesture responder system](docs/gesture-responder-system.html).\n * For each handler, it provides a new `gestureState` object alongside the\n * native event object:\n *\n * ```\n * onPanResponderMove: (event, gestureState) => {}\n * ```\n *\n * A native event is a synthetic touch event with the following form:\n *\n *  - `nativeEvent`\n *      + `changedTouches` - Array of all touch events that have changed since the last event\n *      + `identifier` - The ID of the touch\n *      + `locationX` - The X position of the touch, relative to the element\n *      + `locationY` - The Y position of the touch, relative to the element\n *      + `pageX` - The X position of the touch, relative to the root element\n *      + `pageY` - The Y position of the touch, relative to the root element\n *      + `target` - The node id of the element receiving the touch event\n *      + `timestamp` - A time identifier for the touch, useful for velocity calculation\n *      + `touches` - Array of all current touches on the screen\n *\n * A `gestureState` object has the following:\n *\n *  - `stateID` - ID of the gestureState- persisted as long as there at least\n *     one touch on screen\n *  - `moveX` - the latest screen coordinates of the recently-moved touch\n *  - `moveY` - the latest screen coordinates of the recently-moved touch\n *  - `x0` - the screen coordinates of the responder grant\n *  - `y0` - the screen coordinates of the responder grant\n *  - `dx` - accumulated distance of the gesture since the touch started\n *  - `dy` - accumulated distance of the gesture since the touch started\n *  - `vx` - current velocity of the gesture\n *  - `vy` - current velocity of the gesture\n *  - `numberActiveTouches` - Number of touches currently on screen\n *\n * ### Basic Usage\n *\n * ```\n *   componentWillMount: function() {\n *     this._panResponder = PanResponder.create({\n *       // Ask to be the responder:\n *       onStartShouldSetPanResponder: (evt, gestureState) => true,\n *       onStartShouldSetPanResponderCapture: (evt, gestureState) => true,\n *       onMoveShouldSetPanResponder: (evt, gestureState) => true,\n *       onMoveShouldSetPanResponderCapture: (evt, gestureState) => true,\n *\n *       onPanResponderGrant: (evt, gestureState) => {\n *         // The gesture has started. Show visual feedback so the user knows\n *         // what is happening!\n *\n *         // gestureState.d{x,y} will be set to zero now\n *       },\n *       onPanResponderMove: (evt, gestureState) => {\n *         // The most recent move distance is gestureState.move{X,Y}\n *\n *         // The accumulated gesture distance since becoming responder is\n *         // gestureState.d{x,y}\n *       },\n *       onPanResponderTerminationRequest: (evt, gestureState) => true,\n *       onPanResponderRelease: (evt, gestureState) => {\n *         // The user has released all touches while this view is the\n *         // responder. This typically means a gesture has succeeded\n *       },\n *       onPanResponderTerminate: (evt, gestureState) => {\n *         // Another component has become the responder, so this gesture\n *         // should be cancelled\n *       },\n *       onShouldBlockNativeResponder: (evt, gestureState) => {\n *         // Returns whether this component should block native components from becoming the JS\n *         // responder. Returns true by default. Is currently only supported on android.\n *         return true;\n *       },\n *     });\n *   },\n *\n *   render: function() {\n *     return (\n *       <View {...this._panResponder.panHandlers} />\n *     );\n *   },\n *\n * ```\n *\n * ### Working Example\n *\n * To see it in action, try the\n * [PanResponder example in RNTester](https://github.com/facebook/react-native/blob/master/RNTester/js/PanResponderExample.js)\n */\n\nvar PanResponder = {\n  /**\n   *\n   * A graphical explanation of the touch data flow:\n   *\n   * +----------------------------+             +--------------------------------+\n   * | ResponderTouchHistoryStore |             |TouchHistoryMath                |\n   * +----------------------------+             +----------+---------------------+\n   * |Global store of touchHistory|             |Allocation-less math util       |\n   * |including activeness, start |             |on touch history (centroids     |\n   * |position, prev/cur position.|             |and multitouch movement etc)    |\n   * |                            |             |                                |\n   * +----^-----------------------+             +----^---------------------------+\n   *      |                                          |\n   *      | (records relevant history                |\n   *      |  of touches relevant for                 |\n   *      |  implementing higher level               |\n   *      |  gestures)                               |\n   *      |                                          |\n   * +----+-----------------------+             +----|---------------------------+\n   * | ResponderEventPlugin       |             |    |   Your App/Component      |\n   * +----------------------------+             +----|---------------------------+\n   * |Negotiates which view gets  | Low level   |    |             High level    |\n   * |onResponderMove events.     | events w/   |  +-+-------+     events w/     |\n   * |Also records history into   | touchHistory|  |   Pan   |     multitouch +  |\n   * |ResponderTouchHistoryStore. +---------------->Responder+-----> accumulative|\n   * +----------------------------+ attached to |  |         |     distance and  |\n   *                                 each event |  +---------+     velocity.     |\n   *                                            |                                |\n   *                                            |                                |\n   *                                            +--------------------------------+\n   *\n   *\n   *\n   * Gesture that calculates cumulative movement over time in a way that just\n   * \"does the right thing\" for multiple touches. The \"right thing\" is very\n   * nuanced. When moving two touches in opposite directions, the cumulative\n   * distance is zero in each dimension. When two touches move in parallel five\n   * pixels in the same direction, the cumulative distance is five, not ten. If\n   * two touches start, one moves five in a direction, then stops and the other\n   * touch moves fives in the same direction, the cumulative distance is ten.\n   *\n   * This logic requires a kind of processing of time \"clusters\" of touch events\n   * so that two touch moves that essentially occur in parallel but move every\n   * other frame respectively, are considered part of the same movement.\n   *\n   * Explanation of some of the non-obvious fields:\n   *\n   * - moveX/moveY: If no move event has been observed, then `(moveX, moveY)` is\n   *   invalid. If a move event has been observed, `(moveX, moveY)` is the\n   *   centroid of the most recently moved \"cluster\" of active touches.\n   *   (Currently all move have the same timeStamp, but later we should add some\n   *   threshold for what is considered to be \"moving\"). If a palm is\n   *   accidentally counted as a touch, but a finger is moving greatly, the palm\n   *   will move slightly, but we only want to count the single moving touch.\n   * - x0/y0: Centroid location (non-cumulative) at the time of becoming\n   *   responder.\n   * - dx/dy: Cumulative touch distance - not the same thing as sum of each touch\n   *   distance. Accounts for touch moves that are clustered together in time,\n   *   moving the same direction. Only valid when currently responder (otherwise,\n   *   it only represents the drag distance below the threshold).\n   * - vx/vy: Velocity.\n   */\n  _initializeGestureState: function _initializeGestureState(gestureState) {\n    gestureState.moveX = 0;\n    gestureState.moveY = 0;\n    gestureState.x0 = 0;\n    gestureState.y0 = 0;\n    gestureState.dx = 0;\n    gestureState.dy = 0;\n    gestureState.vx = 0;\n    gestureState.vy = 0;\n    gestureState.numberActiveTouches = 0; // All `gestureState` accounts for timeStamps up until:\n\n    gestureState._accountsForMovesUpTo = 0;\n  },\n\n  /**\n   * This is nuanced and is necessary. It is incorrect to continuously take all\n   * active *and* recently moved touches, find the centroid, and track how that\n   * result changes over time. Instead, we must take all recently moved\n   * touches, and calculate how the centroid has changed just for those\n   * recently moved touches, and append that change to an accumulator. This is\n   * to (at least) handle the case where the user is moving three fingers, and\n   * then one of the fingers stops but the other two continue.\n   *\n   * This is very different than taking all of the recently moved touches and\n   * storing their centroid as `dx/dy`. For correctness, we must *accumulate\n   * changes* in the centroid of recently moved touches.\n   *\n   * There is also some nuance with how we handle multiple moved touches in a\n   * single event. With the way `ReactNativeEventEmitter` dispatches touches as\n   * individual events, multiple touches generate two 'move' events, each of\n   * them triggering `onResponderMove`. But with the way `PanResponder` works,\n   * all of the gesture inference is performed on the first dispatch, since it\n   * looks at all of the touches (even the ones for which there hasn't been a\n   * native dispatch yet). Therefore, `PanResponder` does not call\n   * `onResponderMove` passed the first dispatch. This diverges from the\n   * typical responder callback pattern (without using `PanResponder`), but\n   * avoids more dispatches than necessary.\n   */\n  _updateGestureStateOnMove: function _updateGestureStateOnMove(gestureState, touchHistory) {\n    gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n    gestureState.moveX = currentCentroidXOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);\n    gestureState.moveY = currentCentroidYOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);\n    var movedAfter = gestureState._accountsForMovesUpTo;\n    var prevX = previousCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n    var x = currentCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n    var prevY = previousCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n    var y = currentCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n    var nextDX = gestureState.dx + (x - prevX);\n    var nextDY = gestureState.dy + (y - prevY); // TODO: This must be filtered intelligently.\n\n    var dt = touchHistory.mostRecentTimeStamp - gestureState._accountsForMovesUpTo;\n    gestureState.vx = (nextDX - gestureState.dx) / dt;\n    gestureState.vy = (nextDY - gestureState.dy) / dt;\n    gestureState.dx = nextDX;\n    gestureState.dy = nextDY;\n    gestureState._accountsForMovesUpTo = touchHistory.mostRecentTimeStamp;\n  },\n\n  /**\n   * @param {object} config Enhanced versions of all of the responder callbacks\n   * that provide not only the typical `ResponderSyntheticEvent`, but also the\n   * `PanResponder` gesture state.  Simply replace the word `Responder` with\n   * `PanResponder` in each of the typical `onResponder*` callbacks. For\n   * example, the `config` object would look like:\n   *\n   *  - `onMoveShouldSetPanResponder: (e, gestureState) => {...}`\n   *  - `onMoveShouldSetPanResponderCapture: (e, gestureState) => {...}`\n   *  - `onStartShouldSetPanResponder: (e, gestureState) => {...}`\n   *  - `onStartShouldSetPanResponderCapture: (e, gestureState) => {...}`\n   *  - `onPanResponderReject: (e, gestureState) => {...}`\n   *  - `onPanResponderGrant: (e, gestureState) => {...}`\n   *  - `onPanResponderStart: (e, gestureState) => {...}`\n   *  - `onPanResponderEnd: (e, gestureState) => {...}`\n   *  - `onPanResponderRelease: (e, gestureState) => {...}`\n   *  - `onPanResponderMove: (e, gestureState) => {...}`\n   *  - `onPanResponderTerminate: (e, gestureState) => {...}`\n   *  - `onPanResponderTerminationRequest: (e, gestureState) => {...}`\n   *  - `onShouldBlockNativeResponder: (e, gestureState) => {...}`\n   *\n   *  In general, for events that have capture equivalents, we update the\n   *  gestureState once in the capture phase and can use it in the bubble phase\n   *  as well.\n   *\n   *  Be careful with onStartShould* callbacks. They only reflect updated\n   *  `gestureState` for start/end events that bubble/capture to the Node.\n   *  Once the node is the responder, you can rely on every start/end event\n   *  being processed by the gesture and `gestureState` being updated\n   *  accordingly. (numberActiveTouches) may not be totally accurate unless you\n   *  are the responder.\n   */\n  create: function create(config) {\n    var interactionState = {\n      handle: null\n    };\n    var gestureState = {\n      // Useful for debugging\n      stateID: Math.random()\n    };\n\n    PanResponder._initializeGestureState(gestureState);\n\n    var panHandlers = {\n      onStartShouldSetResponder: function onStartShouldSetResponder(e) {\n        return config.onStartShouldSetPanResponder === undefined ? false : config.onStartShouldSetPanResponder(e, gestureState);\n      },\n      onMoveShouldSetResponder: function onMoveShouldSetResponder(e) {\n        return config.onMoveShouldSetPanResponder === undefined ? false : config.onMoveShouldSetPanResponder(e, gestureState);\n      },\n      onStartShouldSetResponderCapture: function onStartShouldSetResponderCapture(e) {\n        // TODO: Actually, we should reinitialize the state any time\n        // touches.length increases from 0 active to > 0 active.\n        if (e.nativeEvent.touches.length === 1) {\n          PanResponder._initializeGestureState(gestureState);\n        }\n\n        gestureState.numberActiveTouches = e.touchHistory.numberActiveTouches;\n        return config.onStartShouldSetPanResponderCapture !== undefined ? config.onStartShouldSetPanResponderCapture(e, gestureState) : false;\n      },\n      onMoveShouldSetResponderCapture: function onMoveShouldSetResponderCapture(e) {\n        var touchHistory = e.touchHistory; // Responder system incorrectly dispatches should* to current responder\n        // Filter out any touch moves past the first one - we would have\n        // already processed multi-touch geometry during the first event.\n\n        if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {\n          return false;\n        }\n\n        PanResponder._updateGestureStateOnMove(gestureState, touchHistory);\n\n        return config.onMoveShouldSetPanResponderCapture ? config.onMoveShouldSetPanResponderCapture(e, gestureState) : false;\n      },\n      onResponderGrant: function onResponderGrant(e) {\n        if (!interactionState.handle) {\n          interactionState.handle = InteractionManager.createInteractionHandle();\n        }\n\n        gestureState.x0 = currentCentroidX(e.touchHistory);\n        gestureState.y0 = currentCentroidY(e.touchHistory);\n        gestureState.dx = 0;\n        gestureState.dy = 0;\n\n        if (config.onPanResponderGrant) {\n          config.onPanResponderGrant(e, gestureState);\n        } // TODO: t7467124 investigate if this can be removed\n\n\n        return config.onShouldBlockNativeResponder === undefined ? true : config.onShouldBlockNativeResponder();\n      },\n      onResponderReject: function onResponderReject(e) {\n        clearInteractionHandle(interactionState, config.onPanResponderReject, e, gestureState);\n      },\n      onResponderRelease: function onResponderRelease(e) {\n        clearInteractionHandle(interactionState, config.onPanResponderRelease, e, gestureState);\n\n        PanResponder._initializeGestureState(gestureState);\n      },\n      onResponderStart: function onResponderStart(e) {\n        var touchHistory = e.touchHistory;\n        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n\n        if (config.onPanResponderStart) {\n          config.onPanResponderStart(e, gestureState);\n        }\n      },\n      onResponderMove: function onResponderMove(e) {\n        var touchHistory = e.touchHistory; // Guard against the dispatch of two touch moves when there are two\n        // simultaneously changed touches.\n\n        if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {\n          return;\n        } // Filter out any touch moves past the first one - we would have\n        // already processed multi-touch geometry during the first event.\n\n\n        PanResponder._updateGestureStateOnMove(gestureState, touchHistory);\n\n        if (config.onPanResponderMove) {\n          config.onPanResponderMove(e, gestureState);\n        }\n      },\n      onResponderEnd: function onResponderEnd(e) {\n        var touchHistory = e.touchHistory;\n        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n        clearInteractionHandle(interactionState, config.onPanResponderEnd, e, gestureState);\n      },\n      onResponderTerminate: function onResponderTerminate(e) {\n        clearInteractionHandle(interactionState, config.onPanResponderTerminate, e, gestureState);\n\n        PanResponder._initializeGestureState(gestureState);\n      },\n      onResponderTerminationRequest: function onResponderTerminationRequest(e) {\n        return config.onPanResponderTerminationRequest === undefined ? true : config.onPanResponderTerminationRequest(e, gestureState);\n      }\n    };\n    return {\n      panHandlers: panHandlers,\n      getInteractionHandle: function getInteractionHandle() {\n        return interactionState.handle;\n      }\n    };\n  }\n};\n\nfunction clearInteractionHandle(interactionState, callback, event, gestureState) {\n  if (interactionState.handle) {\n    InteractionManager.clearInteractionHandle(interactionState.handle);\n    interactionState.handle = null;\n  }\n\n  if (callback) {\n    callback(event, gestureState);\n  }\n}\n\nexport default PanResponder;","import PanResponder from '../../vendor/react-native/PanResponder';\nexport default PanResponder;","import {\n  GestureResponderEvent,\n  PanResponderGestureState,\n  PanResponder,\n  PanResponderInstance\n} from \"react-native\";\nimport { useState, useEffect } from \"react\";\n\ntype Props = {\n  onStartShouldSetPanResponder?(\n    event: GestureResponderEvent,\n    gestureState: PanResponderGestureState\n  ): boolean;\n  onStartShouldSetPanResponderCapture?(\n    event: GestureResponderEvent,\n    gestureState: PanResponderGestureState\n  ): boolean;\n  onMoveShouldSetPanResponder?(\n    event: GestureResponderEvent,\n    gestureState: PanResponderGestureState\n  ): boolean;\n  onMoveShouldSetPanResponderCapture?(\n    event: GestureResponderEvent,\n    gestureState: PanResponderGestureState\n  ): boolean;\n  onPanResponderGrant?(\n    event: GestureResponderEvent,\n    gestureState: PanResponderGestureState\n  ): void;\n  onPanResponderMove?(\n    event: GestureResponderEvent,\n    gestureState: PanResponderGestureState\n  ): void;\n  onPanResponderTerminationRequest?(\n    event: GestureResponderEvent,\n    gestureState: PanResponderGestureState\n  ): boolean;\n  onPanResponderRelease?(\n    event: GestureResponderEvent,\n    gestureState: PanResponderGestureState\n  ): void;\n  onPanResponderTerminate?(\n    event: GestureResponderEvent,\n    gestureState: PanResponderGestureState\n  ): void;\n  onShouldBlockNativeResponder?(\n    event: GestureResponderEvent,\n    gestureState: PanResponderGestureState\n  ): boolean;\n};\n\nexport const usePanGesture = ({\n  onStartShouldSetPanResponder,\n  onStartShouldSetPanResponderCapture,\n  onMoveShouldSetPanResponder,\n  onMoveShouldSetPanResponderCapture,\n  onPanResponderGrant,\n  onPanResponderMove,\n  onPanResponderTerminationRequest,\n  onPanResponderRelease,\n  onPanResponderTerminate,\n  onShouldBlockNativeResponder\n}: Props): PanResponderInstance => {\n  const [panGesture, setPanGesture] = useState();\n  useEffect(() => {\n    const gesture = PanResponder.create({\n      onStartShouldSetPanResponder,\n      onStartShouldSetPanResponderCapture,\n      onMoveShouldSetPanResponder,\n      onMoveShouldSetPanResponderCapture,\n      onPanResponderGrant,\n      onPanResponderMove,\n      onPanResponderTerminationRequest,\n      onPanResponderRelease,\n      onPanResponderTerminate,\n      onShouldBlockNativeResponder\n    });\n    setPanGesture(gesture);\n  }, [\n    // TODO: memory leak because of all these imports\n    onMoveShouldSetPanResponder,\n    onMoveShouldSetPanResponderCapture,\n    onPanResponderGrant,\n    onPanResponderMove,\n    onPanResponderRelease,\n    onPanResponderTerminate,\n    onPanResponderTerminationRequest,\n    onShouldBlockNativeResponder,\n    onStartShouldSetPanResponder,\n    onStartShouldSetPanResponderCapture\n  ]);\n\n  return panGesture;\n};\n","/* eslint-disable */\nimport {\n  GestureResponderEvent,\n  NativeTouchEvent,\n  PointPropType\n} from \"react-native\";\n\ninterface Touches {\n  [key: string]: PointPropType;\n}\n\ninterface Outcome {\n  spread: boolean;\n  pinch: boolean;\n}\n\nexport class GestureHandler {\n  private minTouches: number;\n  private finish: Touches = {};\n  private start: Touches = {};\n\n  public constructor({ minTouches = 2 } = {}) {\n    this.minTouches = minTouches;\n  }\n\n  public onPanResponderMove(event: GestureResponderEvent) {\n    const touches: NativeTouchEvent[] = event.nativeEvent.touches;\n    touches.forEach((touch: NativeTouchEvent) => {\n      this.recordFinish(touch);\n      this.recordStart(touch);\n    });\n  }\n\n  public onPanResponderRelease(): Outcome {\n    const outcome = this.determineOutcome();\n    this.start = {};\n    this.finish = {};\n    return outcome;\n  }\n\n  private recordStart(touch: NativeTouchEvent) {\n    if (this.isStartAlreadyRecorded(touch)) {\n      return;\n    }\n    this.start[String(touch.identifier)] = {\n      x: touch.locationX,\n      y: touch.locationY\n    };\n  }\n\n  private isStartAlreadyRecorded(touch: NativeTouchEvent) {\n    return this.start[String(touch.identifier)];\n  }\n\n  private recordFinish(touch: NativeTouchEvent) {\n    this.finish[String(touch.identifier)] = {\n      x: touch.locationX,\n      y: touch.locationY\n    };\n  }\n\n  private isSpread(\n    start: PointPropType,\n    finish: PointPropType,\n    center: PointPropType\n  ) {\n    const startXDistance = Math.abs(start.x - center.x);\n    const startYDistance = Math.abs(start.y - center.y);\n    const finishXDistance = Math.abs(finish.x - center.x);\n    const finishYDistance = Math.abs(finish.y - center.y);\n    return (\n      startXDistance <= finishXDistance && startYDistance <= finishYDistance\n    );\n  }\n\n  private determineCenter(points: Touches) {\n    const numRecordedTouched = Object.keys(points).length;\n    let x = 0;\n    let y = 0;\n    for (let i = 1; i <= numRecordedTouched; i++) {\n      const point = points[i];\n      x += point.x;\n      y += point.x;\n    }\n    return { x: x / numRecordedTouched, y: y / numRecordedTouched };\n  }\n\n  private determineOutcome(): Outcome {\n    const numRecordedTouched = Object.keys(this.start).length;\n    const outcome = {\n      pinch: false,\n      spread: false\n    };\n    if (numRecordedTouched < this.minTouches) {\n      return outcome;\n    }\n    let spread = false;\n    let pinch = false;\n    const center = this.determineCenter(this.start);\n    for (let i = 1; i <= numRecordedTouched; i++) {\n      const start = this.start[i];\n      const finish = this.finish[i];\n      const isPinch = !this.isSpread(start, finish, center);\n      const isSpread = this.isSpread(start, finish, center);\n      if (isPinch && isSpread) {\n        return outcome;\n      }\n      if (!isPinch && !isSpread) {\n        return outcome;\n      }\n      if (isPinch && spread) {\n        return outcome;\n      }\n      if (isSpread && pinch) {\n        return outcome;\n      }\n      pinch = isPinch;\n      spread = isSpread;\n    }\n    return { spread, pinch };\n  }\n}\n","import React, { useState } from \"react\";\nimport { Animated, StyleSheet } from \"react-native\";\nimport { Screen, Text } from \"../../../../components\";\nimport { useNav, useColor } from \"../../../../hooks\";\nimport { usePanGesture } from \"./usePanGesture\";\nimport { GestureHandler } from \"./logic\";\n\nconst minTouches = 2;\nconst title = `pinch or spread the screen with ${minTouches} fingers minimum`;\n\nexport default function PinchSpread() {\n  const [state, setState] = useState({\n    pinchCount: 0,\n    spreadCount: 0\n  });\n  const color = useColor();\n  const nav = useNav();\n  const styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      backgroundColor: color.surface\n    }\n  });\n  const gestureHandler = new GestureHandler({ minTouches });\n  const panGesture = usePanGesture({\n    onMoveShouldSetPanResponderCapture: () => true,\n    onPanResponderMove: event => {\n      gestureHandler.onPanResponderMove(event);\n    },\n    onPanResponderRelease: () => {\n      const { spreadCount, pinchCount } = state;\n      // TODO: fix cannot read property of undefined when 2+ touches\n      const outcome = gestureHandler.onPanResponderRelease();\n      if (outcome.spread) {\n        setState({ ...state, spreadCount: spreadCount + 1 });\n      }\n      if (outcome.pinch) {\n        setState({ ...state, pinchCount: pinchCount + 1 });\n      }\n    }\n  });\n\n  if (!panGesture) {\n    return <></>;\n  }\n  return (\n    <Screen disableScroll onLeftPress={nav.to(\"debug\")}>\n      <Text center title={title} />\n      <Text center title={`spread: ${state.spreadCount}`} />\n      <Text center title={`pinch: ${state.pinchCount}`} />\n      <Animated.View style={styles.container} {...panGesture.panHandlers} />\n    </Screen>\n  );\n}\n"],"sourceRoot":""}