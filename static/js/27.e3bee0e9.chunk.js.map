{"version":3,"sources":["apps/Debug/screens/Drift/Canvas.tsx","apps/Debug/screens/Drift/Context.tsx","apps/Debug/screens/Drift/Dpad.tsx","apps/Debug/screens/Drift/Character.tsx","apps/Debug/screens/Drift/utils.ts","apps/Debug/screens/Drift/Tracks.tsx","apps/Debug/screens/Drift/Game.tsx","apps/Debug/screens/Drift/index.tsx"],"names":["Canvas","memo","children","onLayout","color","useColor","View","style","flex","backgroundColor","surface","driftInitialState","tracks","driftReducer","state","action","type","payload","length","pop","DriftContext","createContext","dispatch","Dpad","useShadow","useDropShadow","useContext","box","width","height","onPress","useCallback","position","bottom","right","transform","rotate","flexDirection","TouchableOpacity","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","Character","canvas","initialPositionRef","useRef","x","y","Animated","ValueXY","current","animate","dx","dy","toValue","change","size","getPosition","spring","start","useEffect","setUpdateIntervalForType","SensorTypes","accelerometer","acc","subscribe","unsubscribe","getLayout","borderRadius","elevation","shadowColor","shadowOffset","shadowOpacity","shadowRadius","zIndex","Track","track","styles","StyleSheet","create","opacity","top","left","Tracks","map","index","key","Game","useState","setCanvas","onCanvasLayout","event","nativeEvent","layout","nav","useNav","useReducer","isEmulator","DeviceInfo","isEmulatorSync","border","title","onLeftPress","to","Provider","value","center"],"mappings":"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","file":"static/js/27.e3bee0e9.chunk.js","sourcesContent":["import React, { memo } from \"react\";\nimport { View, LayoutChangeEvent } from \"react-native\";\nimport { useColor } from \"../../../../hooks\";\n\ninterface CanvasProps {\n  onLayout: (event: LayoutChangeEvent) => void;\n}\n\nexport const Canvas: React.FC<CanvasProps> = memo(function Canvas({\n  children,\n  onLayout\n}) {\n  const color = useColor();\n  return (\n    <View\n      onLayout={onLayout}\n      style={{ flex: 1, backgroundColor: color.surface }}\n    >\n      {children}\n    </View>\n  );\n});\n","import { TrackPositionWithColor, TrackPosition } from \"./Tracks\";\nimport { ColorChoice } from \"./Dpad\";\nimport { createContext } from \"react\";\n\nexport type DriftState = {\n  tracks: TrackPositionWithColor[];\n  color: ColorChoice;\n};\n\nexport const driftInitialState: DriftState = {\n  tracks: [],\n  color: \"lightgrey\"\n};\n\ntype Action =\n  | { type: \"addColor\"; payload: ColorChoice }\n  | { type: \"addTrack\"; payload: TrackPosition };\n\nexport const driftReducer = (state: DriftState, action: Action) => {\n  switch (action.type) {\n    case \"addColor\":\n      return { ...state, color: action.payload };\n    case \"addTrack\": {\n      const tracks = [...state.tracks];\n      while (tracks.length > 10) {\n        tracks.pop();\n      }\n      return {\n        ...state,\n        tracks: [{ ...action.payload, color: state.color }, ...tracks]\n      };\n    }\n    default:\n      return state;\n  }\n};\n\ntype Context = {\n  state: DriftState;\n  dispatch: (action: Action) => void;\n};\n\nexport const DriftContext = createContext<Context>({\n  state: driftInitialState,\n  dispatch: () => undefined\n});\n","import React, { memo, useCallback, useContext } from \"react\";\nimport { View, TouchableOpacity } from \"react-native\";\nimport { useDropShadow } from \"../../../../hooks\";\nimport { DriftContext } from \"./Context\";\n\nexport type ColorChoice =\n  | \"slateblue\"\n  | \"orange\"\n  | \"mediumseagreen\"\n  | \"violet\"\n  | \"lightgrey\";\n\nexport const Dpad = memo(function Dpad() {\n  const useShadow = useDropShadow(10);\n  const { dispatch } = useContext(DriftContext);\n  const size = 50;\n  const box = {\n    width: size,\n    height: size\n  };\n\n  const onPress = useCallback(\n    (payload: ColorChoice) => () => dispatch({ type: \"addColor\", payload }),\n    [dispatch]\n  );\n\n  return (\n    <View\n      style={{\n        position: \"absolute\",\n        bottom: size,\n        right: size,\n        transform: [{ rotate: \"45deg\" }]\n      }}\n    >\n      <View style={{ flexDirection: \"row\" }}>\n        <TouchableOpacity\n          onPress={onPress(\"violet\")}\n          style={{\n            ...box,\n            backgroundColor: \"violet\",\n            borderTopLeftRadius: size,\n            ...useShadow\n          }}\n        />\n        <TouchableOpacity\n          onPress={onPress(\"mediumseagreen\")}\n          style={{\n            ...box,\n            backgroundColor: \"mediumseagreen\",\n            borderTopRightRadius: size,\n            ...useShadow\n          }}\n        />\n      </View>\n      <View style={{ flexDirection: \"row\" }}>\n        <TouchableOpacity\n          onPress={onPress(\"slateblue\")}\n          style={{\n            ...box,\n            backgroundColor: \"slateblue\",\n            borderBottomLeftRadius: size,\n            ...useShadow\n          }}\n        />\n        <TouchableOpacity\n          onPress={onPress(\"orange\")}\n          style={{\n            ...box,\n            backgroundColor: \"orange\",\n            borderBottomRightRadius: size,\n            ...useShadow\n          }}\n        />\n      </View>\n    </View>\n  );\n});\n","import React, { memo, useEffect, useRef, useCallback, useContext } from \"react\";\nimport { Animated } from \"react-native\";\nimport {\n  accelerometer,\n  setUpdateIntervalForType,\n  SensorTypes\n} from \"react-native-sensors\";\nimport { getPosition } from \"./utils\";\nimport { DriftContext } from \"./Context\";\nimport { CanvasDimensions } from \"./Game\";\n\ntype CharacterProps = {\n  canvas: CanvasDimensions;\n};\n\nexport const Character = memo(function Character({ canvas }: CharacterProps) {\n  const elevation = 5;\n  const size = 30;\n  const speed = 6;\n  const rate = 16;\n  const shadowOpacity = elevation * 0.036 + 0.12;\n  const shadowRadius = elevation * 0.36 + 1.2;\n  const initialPositionRef = useRef({\n    x: canvas.width / 2 - size,\n    y: canvas.height / 2 - size\n  });\n  const position = new Animated.ValueXY(initialPositionRef.current);\n  const { dispatch } = useContext(DriftContext);\n\n  const animate = useCallback(\n    (dx: number, dy: number) => {\n      const toValue = getPosition({\n        canvas,\n        change: { dx: dx * speed, dy: dy * speed },\n        current: initialPositionRef.current,\n        size\n      });\n      initialPositionRef.current = toValue;\n      dispatch({ type: \"addTrack\", payload: { ...toValue, size } });\n      Animated.spring(position, { toValue }).start();\n    },\n    [initialPositionRef, canvas, size, position, dispatch]\n  );\n\n  useEffect(() => {\n    setUpdateIntervalForType(SensorTypes.accelerometer, rate);\n    const acc = accelerometer.subscribe(({ x, y }) => animate(x, y));\n    return () => {\n      acc.unsubscribe();\n    };\n  }, [rate, animate]);\n\n  return (\n    <Animated.View\n      style={[\n        position.getLayout(),\n        {\n          width: size,\n          height: size,\n          borderRadius: size,\n          elevation,\n          shadowColor: \"black\",\n          shadowOffset: {\n            height: 2,\n            width: 0\n          },\n          shadowOpacity,\n          shadowRadius,\n          zIndex: elevation,\n          backgroundColor: \"coral\"\n        }\n      ]}\n    />\n  );\n});\n","type Position = {\n  change: { dx: number; dy: number };\n  canvas: { x: number; y: number; width: number; height: number };\n  current: { x: number; y: number };\n  size: number;\n};\n\nexport const getPosition = (position: Position) => {\n  const dx = position.current.x - position.change.dx;\n  const dy = position.current.y + position.change.dy;\n  const y =\n    dy < 0\n      ? 0\n      : dy + position.size > position.canvas.height\n      ? position.canvas.height - position.size\n      : dy;\n  const x =\n    dx < 0\n      ? 0\n      : dx + position.size > position.canvas.width\n      ? position.canvas.width - position.size\n      : dx;\n  return { x, y };\n};\n","import React, { memo, useContext } from \"react\";\nimport { View, StyleSheet } from \"react-native\";\nimport { ColorChoice } from \"./Dpad\";\nimport { DriftContext } from \"./Context\";\n\nexport type TrackPosition = { x: number; y: number; size: number };\nexport type TrackPositionWithColor = TrackPosition & { color: ColorChoice };\n\ninterface TrackProps {\n  track: TrackPositionWithColor;\n}\n\nconst Track = memo(function TrackMemo({ track }: TrackProps) {\n  const size = track.size / 4;\n  const styles = StyleSheet.create({\n    tracks: {\n      opacity: 0.4,\n      borderRadius: track.size,\n      position: \"absolute\",\n      width: size,\n      height: size,\n      backgroundColor: track.color\n    }\n  });\n  return (\n    <View>\n      <View\n        style={{\n          ...styles.tracks,\n          top: track.y - track.size / 2 - size / 2,\n          left: track.x + track.size / 2 - track.size / 2\n        }}\n      />\n      <View\n        style={{\n          ...styles.tracks,\n          top: track.y - track.size / 2 - size / 2,\n          left: track.x + track.size / 2 + track.size / 2 - size\n        }}\n      />\n    </View>\n  );\n});\n\nexport const Tracks = memo(function TracksMemo() {\n  const { state } = useContext(DriftContext);\n  return (\n    <View>\n      {state.tracks.map((track: TrackPositionWithColor, index: number) => \n        <Track key={`${track.x}${track.y}${index}`} track={track} />\n      )}\n    </View>\n  );\n});\n","import React, { memo, useState, useCallback } from \"react\";\nimport { View, LayoutChangeEvent } from \"react-native\";\nimport { Canvas } from \"./Canvas\";\nimport { Dpad } from \"./Dpad\";\nimport { Character } from \"./Character\";\nimport { Tracks } from \"./Tracks\";\n\nexport type CanvasDimensions = {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n};\n\nexport const Game = memo(function Game() {\n  const [canvas, setCanvas] = useState<CanvasDimensions | null>(null);\n\n  const onCanvasLayout = useCallback((event: LayoutChangeEvent) => {\n    const { x, y, height, width } = event.nativeEvent.layout;\n    setCanvas({ x, y, height, width });\n  }, []);\n\n  return (\n    <View style={{ flex: 1 }}>\n      <Canvas onLayout={onCanvasLayout}>\n        {canvas && \n          <View>\n            <Character canvas={canvas} />\n            <Tracks />\n          </View>\n        }\n      </Canvas>\n      <Dpad />\n    </View>\n  );\n});\n","import DeviceInfo from \"react-native-device-info\";\nimport React, { memo, useReducer } from \"react\";\nimport { Screen, Text } from \"../../../../components\";\nimport { useNav } from \"../../../../hooks\";\nimport { Game } from \"./Game\";\nimport { DriftContext, driftReducer, driftInitialState } from \"./Context\";\n\nexport default memo(function DebugDrift() {\n  const nav = useNav();\n  const [state, dispatch] = useReducer(driftReducer, driftInitialState);\n  const isEmulator = DeviceInfo.isEmulatorSync();\n\n  // TODO: figure out why Screen re-renders\n  return (\n    <Screen border title=\"Drift\" onLeftPress={nav.to(\"debug\")}>\n      <DriftContext.Provider value={{ state, dispatch }}>\n        {isEmulator ? \n          <Text title=\"simulators not supported\" center />\n         : \n          <Game />\n        }\n      </DriftContext.Provider>\n    </Screen>\n  );\n});\n"],"sourceRoot":""}