{"version":3,"sources":["assets/placeholder.png","apps/Debug/screens/DarkMode/index.tsx"],"names":["module","exports","image","require","cards","title","value","target","chart","button","memo","dispatch","useRootDispatch","themes","Object","values","ColorTheme","color","useColor","nav","useNav","currentTheme","useRootSelector","state","theme","currentColor","useState","elevation","setElevation","columns","getLandscapeOrientation","onPress","useCallback","renderItem","item","index","touchable","key","overline","h3","style","marginTop","Theme","padding","p02","body2","source","height","resizeMode","width","contained","buttonStyle","onLeftPress","to","p04","flexDirection","alignItems","map","changeTheme","primary","minimumTrackTintColor","onValueChange","step","maximumValue","minimumValue","h2","center","data","numColumns"],"mappings":"uFAAAA,EAAOC,QAAU,IAA0B,yC,qHC2BrCC,EAAQC,EAAQ,KAChBC,EAAgB,CACpB,CACEC,MAAO,YACPC,MAAO,UAET,CACEC,OAAQ,iBACRF,MAAO,aACPC,MAAO,OAET,CACEE,MAAON,EACPK,OAAQ,kBACRF,MAAO,aACPC,MAAO,UAET,CACEC,OAAQ,gBACRF,MAAO,QACPC,MAAO,SACPE,MAAON,GAET,CACEO,OAAQ,OACRJ,MAAO,QACPC,MAAO,UAET,CACEC,OAAQ,mBACRF,MAAO,cACPC,MAAO,UAET,CACED,MAAO,WACPC,MAAO,UAET,CACED,MAAO,cACPC,MAAO,QAIII,0BAAK,WAClB,IAAMC,EAAWC,cACXC,EAASC,OAAOC,OAAOC,KACvBC,EAAQC,cACRC,EAAMC,cACNC,EAAeC,aAAgB,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,gBALpB,EAOJC,mBAAS,GAPL,mBAO/BC,EAP+B,KAOpBC,EAPoB,KAUhCC,EADYP,YAAgBQ,KACN,EAAI,EAC1BC,EAAUC,uBAAY,cAAiB,IAEvCC,EAAaD,uBACjB,gBAAGE,EAAH,EAAGA,KAAMC,EAAT,EAASA,MAAT,OACE,kBAAC,IAAD,CAAMR,UAAWA,EAAWI,QAASA,EAASK,WAAS,EAACC,IAAKF,GAC3D,kBAAC,IAAD,CAAM9B,MAAO6B,EAAK7B,MAAOiC,UAAQ,IACjC,kBAAC,IAAD,CAAMjC,MAAO6B,EAAK5B,MAAOiC,IAAE,EAACC,MAAO,CAAEC,UAAWC,IAAMC,QAAQC,OAC7DV,EAAK3B,QACJ,kBAAC,IAAD,CACEF,MAAO6B,EAAK3B,OACZsC,OAAK,EACLL,MAAO,CAAEC,UAAWC,IAAMC,QAAQC,OAGrCV,EAAK1B,OACJ,kBAAC,IAAD,CACEsC,OAAQZ,EAAK1B,MACbgC,MAAO,CACLO,OAAQ,GACRN,UAAWC,IAAMC,QAAQC,IACzBI,WAAY,QACZC,MAAO,UAIZf,EAAKzB,QACJ,kBAAC,IAAD,CACEyC,WAAS,EACT7C,MAAO6B,EAAKzB,OACZ0C,YAAa,CAAEV,UAAWC,IAAMC,QAAQC,UAKhD,CAACjB,EAAWI,IAGd,OACE,kBAAC,IAAD,CAAQqB,YAAajC,EAAIkC,GAAG,SAAUhD,MAAM,aAC1C,kBAAC,IAAD,CAAMmC,MAAO,CAAEG,QAASD,IAAMC,QAAQW,MACpC,kBAAC,IAAD,CACEd,MAAO,CACLe,cAAe,MACfC,WAAY,WAGd,kBAAC,IAAD,CAAMnD,MAAM,YACXQ,EAAO4C,KAAI,SAAAvB,GAAI,OACd,kBAAC,IAAD,CACEG,IAAKH,EACL7B,MAAO6B,EACPH,SAxDQP,EAwDYU,EAxDU,kBAAMvB,EAAS+C,YAAYlC,MAyDzDmC,SAAO,EACPT,UAAW7B,IAAiBa,IA1DrB,IAACV,MA8Dd,kBAAC,IAAD,CAAMnB,MAAK,qBAAgBsB,KAC3B,kBAAC,IAAD,CACEiC,sBAAuB3C,EAAM0C,QAC7BrD,MAAOqB,EACPkC,cAhEa,SAACvD,GAAD,OAAmBsB,EAAatB,IAiE7CwD,KAAM,EACNC,aAAc,GACdC,aAAc,KAGlB,kBAAC,IAAD,CAAM3D,MAAM,eAAe4D,IAAE,EAACC,QAAM,IACpC,kBAAC,IAAD,CAASC,KAAM/D,EAAOgE,WAAYvC,EAASI,WAAYA","file":"static/js/8.c3a16d1b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/placeholder.d1d6991d.png\";","// TODO: slider on web\nimport React, { memo, useState, useCallback } from \"react\";\nimport { Image, ImageSourcePropType, View } from \"react-native\";\nimport {\n  Button,\n  Card,\n  Screen,\n  Text,\n  Masonry,\n  Slider\n} from \"../../../../components\";\nimport {\n  ColorTheme,\n  changeTheme,\n  getLandscapeOrientation\n} from \"../../../../models\";\nimport { Theme, useRootDispatch, useRootSelector } from \"../../../../utils\";\nimport { useColor, useNav } from \"../../../../hooks\";\n\ninterface Card {\n  title: string;\n  value: string;\n  target?: string;\n  chart?: ImageSourcePropType;\n  button?: string;\n}\n\nconst image = require(\"../../../../assets/placeholder.png\");\nconst cards: Card[] = [\n  {\n    title: \"Marketing\",\n    value: \"12.4 M\"\n  },\n  {\n    target: \"+22% of target\",\n    title: \"Conversion\",\n    value: \"537\"\n  },\n  {\n    chart: image,\n    target: \"+12.3 of target\",\n    title: \"Conversion\",\n    value: \"42.1 M\"\n  },\n  {\n    target: \"11% of target\",\n    title: \"Sales\",\n    value: \"35.8 M\",\n    chart: image\n  },\n  {\n    button: \"save\",\n    title: \"Users\",\n    value: \"45.5 M\"\n  },\n  {\n    target: \"+56.6% of target\",\n    title: \"Avg session\",\n    value: \"4:53 H\"\n  },\n  {\n    title: \"Sessions\",\n    value: \"23.242\"\n  },\n  {\n    title: \"Bounce rate\",\n    value: \"12%\"\n  }\n];\n\nexport default memo(function DarkMode() {\n  const dispatch = useRootDispatch();\n  const themes = Object.values(ColorTheme);\n  const color = useColor();\n  const nav = useNav();\n  const currentTheme = useRootSelector(state => state.theme.currentColor);\n  const themePress = (theme: ColorTheme) => () => dispatch(changeTheme(theme));\n  const [elevation, setElevation] = useState(2);\n  const handleSlider = (value: number) => setElevation(value);\n  const landscape = useRootSelector(getLandscapeOrientation);\n  const columns = landscape ? 5 : 3;\n  const onPress = useCallback(() => undefined, []);\n\n  const renderItem = useCallback(\n    ({ item, index }) => \n      <Card elevation={elevation} onPress={onPress} touchable key={index}>\n        <Text title={item.title} overline />\n        <Text title={item.value} h3 style={{ marginTop: Theme.padding.p02 }} />\n        {item.target && \n          <Text\n            title={item.target}\n            body2\n            style={{ marginTop: Theme.padding.p02 }}\n          />\n        }\n        {item.chart && \n          <Image\n            source={item.chart}\n            style={{\n              height: 80,\n              marginTop: Theme.padding.p02,\n              resizeMode: \"cover\",\n              width: \"100%\"\n            }}\n          />\n        }\n        {item.button && \n          <Button\n            contained\n            title={item.button}\n            buttonStyle={{ marginTop: Theme.padding.p02 }}\n          />\n        }\n      </Card>\n    ,\n    [elevation, onPress]\n  );\n\n  return (\n    <Screen onLeftPress={nav.to(\"debug\")} title=\"Dark mode\">\n      <View style={{ padding: Theme.padding.p04 }}>\n        <View\n          style={{\n            flexDirection: \"row\",\n            alignItems: \"center\"\n          }}\n        >\n          <Text title=\"theme: \" />\n          {themes.map(item => \n            <Button\n              key={item}\n              title={item}\n              onPress={themePress(item)}\n              primary\n              contained={currentTheme === item}\n            />\n          )}\n        </View>\n        <Text title={`elevation: ${elevation}`} />\n        <Slider\n          minimumTrackTintColor={color.primary}\n          value={elevation}\n          onValueChange={handleSlider}\n          step={1}\n          maximumValue={10}\n          minimumValue={0}\n        />\n      </View>\n      <Text title=\"Weekly Stats\" h2 center />\n      <Masonry data={cards} numColumns={columns} renderItem={renderItem} />\n    </Screen>\n  );\n});\n"],"sourceRoot":""}