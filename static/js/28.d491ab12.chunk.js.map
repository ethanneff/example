{"version":3,"sources":["apps/Focus/components/ListSection.tsx","apps/Focus/components/ListItem.tsx","apps/Focus/components/List.tsx","apps/Focus/index.tsx"],"names":["ListSection","memo","item","View","style","alignItems","borderTopColor","borderTopWidth","flexDirection","justifyContent","marginTop","Theme","padding","p02","h3","title","dayOfMonth","overline","month","dayOfWeek","ListItem","showSection","onItemPress","currentItem","color","useColor","future","id","Date","now","iconColor","secondary","success","action","borderColor","primary","background","borderLeftWidth","p01","flex","TouchableOpacity","height","p10","paddingHorizontal","p04","paddingVertical","onPress","disabled","width","p20","name","size","paddingRight","hour","zone","body1","numberOfLines","ellipsizeMode","EllipsizeMode","Tail","items","List","listRef","useRef","generateMoreItems","i","lastItem","length","moment","startOf","add","valueOf","next","subtract","push","String","Math","random","format","getCurrentItem","currentTime","before","after","setHours","getHours","useEffect","FlatList","inverted","ref","keyExtractor","data","onEndReached","onEndReachedThreshold","renderItem","index","firstItemOfDay","to","dispatch","useRootDispatch","useState","modalItemEdit","setModalItemEdit","modalProfile","modalLogin","handleItemPress","useCallback","edit","handleModalEditBackgroundPress","onLeftPress","navigate","disableScroll","h1","center","duration","testID","onBackgroundPress"],"mappings":"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","file":"static/js/28.d491ab12.chunk.js","sourcesContent":["import React, { memo } from \"react\";\nimport { View } from \"react-native\";\nimport { Text } from \"../../../components\";\nimport { Theme } from \"../../../utils\";\nimport { Item } from \"./List\";\n\ninterface Props {\n  item: Item;\n}\n\nexport const ListSection = memo(({ item }: Props) => (\n  <View\n    style={{\n      alignItems: \"center\",\n      borderTopColor: \"grey\",\n      borderTopWidth: 1,\n      flexDirection: \"row\",\n      justifyContent: \"center\",\n      marginTop: Theme.padding.p02,\n      padding: Theme.padding.p02\n    }}\n  >\n    <Text h3 title={item.dayOfMonth} />\n    <Text overline title={` ${item.month}, ${item.dayOfWeek}`} />\n  </View>\n));\n","import React, { memo } from \"react\";\nimport { TouchableOpacity, View } from \"react-native\";\nimport { EllipsizeMode, Icon, Text } from \"../../../components\";\nimport { Theme } from \"../../../utils\";\nimport { Item } from \"./List\";\nimport { ListSection } from \"./ListSection\";\nimport { useColor } from \"../../../behaviors\";\n\ninterface Props {\n  showSection: boolean;\n  item: Item;\n  currentItem: boolean;\n  onItemPress(item: Item): void;\n}\n\nexport const ListItem = memo(\n  ({ showSection, item, onItemPress, currentItem }: Props) => {\n    const color = useColor();\n    const future = item.id > Date.now();\n    const iconColor = future ? color.secondary : color.success;\n    const title = currentItem ? \"current\" : future ? \"future\" : item.action;\n    return (\n      <View\n        style={{\n          borderColor: currentItem ? color.primary : color.background,\n          borderLeftWidth: Theme.padding.p01,\n          flex: 1\n        }}\n      >\n        <TouchableOpacity\n          style={{\n            flex: 1,\n            flexDirection: \"row\",\n            height: Theme.padding.p10,\n            paddingHorizontal: Theme.padding.p04,\n            paddingVertical: Theme.padding.p02\n          }}\n          onPress={() => onItemPress(item)} // TODO: usecallback\n          disabled={future}\n        >\n          <View\n            style={{\n              flexDirection: \"row\",\n              width: Theme.padding.p20\n            }}\n          >\n            <Icon\n              name={future ? \"cancel\" : \"checkbox-blank-circle\"}\n              size={14}\n              color={iconColor}\n              style={{ paddingRight: Theme.padding.p01 }}\n            />\n            <Text title={`${item.hour} ${item.zone}`} />\n          </View>\n          <Text\n            style={{\n              color: color.secondary,\n              flex: 1\n            }}\n            title={title}\n            body1\n            numberOfLines={1}\n            ellipsizeMode={EllipsizeMode.Tail}\n          />\n        </TouchableOpacity>\n        {showSection && <ListSection item={item} />}\n      </View>\n    );\n  }\n);\n","import moment from \"moment\";\nimport React, { memo, useEffect, useRef } from \"react\";\nimport { FlatList } from \"react-native\";\nimport { ListItem } from \"./ListItem\";\n\nexport interface Item {\n  action: string;\n  dayOfMonth: string;\n  dayOfWeek: string;\n  hour: string;\n  id: number;\n  month: string;\n  zone: string;\n}\n\ninterface Props {\n  onItemPress(item: Item): void;\n}\n\nconst infiniteScrollThreshold = 0.3;\nconst infiniteScrollRegeneration = 50;\nconst items: Item[] = [];\n\nexport const List = memo(({ onItemPress }: Props) => {\n  const listRef = useRef(null);\n\n  const generateMoreItems = () => {\n    // TODO: batch\n    for (let i = 0; i < infiniteScrollRegeneration; i++) {\n      const lastItem =\n        items.length === 0\n          ? moment()\n              .startOf(\"day\")\n              .add(2, \"day\")\n              .valueOf()\n          : items[items.length - 1].id;\n      const next = moment(lastItem).subtract(1, \"hour\");\n      const id = next.valueOf();\n      items.push({\n        action: String(Math.random()) + String(Math.random()),\n        dayOfMonth: next.format(\"D\"),\n        dayOfWeek: next.format(\"ddd\"),\n        hour: next.format(\"h\"),\n        id,\n        month: next.format(\"MMM\"),\n        zone: next.format(\"a\")\n      });\n    }\n  };\n\n  const getCurrentItem = (item: Item): boolean => {\n    const currentTime = new Date();\n    const before = currentTime.valueOf();\n    const after = currentTime.setHours(currentTime.getHours() + 1);\n    if (item.id > before && item.id < after) {\n      return true;\n    }\n    return false;\n  };\n\n  const renderItem = ({ item, index }: { item: Item; index: number }) => {\n    const firstItemOfDay =\n      index < 1 ? false : item.dayOfMonth !== items[index - 1].dayOfMonth;\n    return (\n      <ListItem\n        currentItem={getCurrentItem(item)}\n        item={item}\n        showSection={firstItemOfDay}\n        onItemPress={onItemPress}\n      />\n    );\n  };\n\n  const keyExtractor = (item: Item) => String(item.id);\n\n  useEffect(() => {\n    generateMoreItems();\n  }, []);\n\n  useEffect(() => {\n    if (items.length === 0 || listRef === null) {\n      return;\n    }\n    // listRef.current.scrollToIndex(2);\n  }, [listRef]);\n\n  return items.length < 0 ? null : (\n    <FlatList\n      inverted\n      //   initialScrollIndex={20} // TODO:\n      ref={listRef}\n      keyExtractor={keyExtractor}\n      data={items}\n      onEndReached={generateMoreItems}\n      onEndReachedThreshold={infiniteScrollThreshold}\n      renderItem={renderItem}\n    />\n  );\n});\n","import React, { memo, useCallback, useState } from \"react\";\nimport { Dialog, Screen, Text } from \"../../components\";\nimport { navigate, NavigationScreen } from \"../../models\";\nimport { useRootDispatch } from \"../../utils\";\nimport { List } from \"./components/List\";\n\n// TODO: scroll to current index\n// TODO: migrate all dialogs to Dialogs (remove modals from navigation layer)\n// TODO: batch item list\n// TODO: handle modals\n// TODO: flatlist on web\n// TODO: refresh every hour\n// TODO: convert hours to minutes to config 15, 30, 60, 120\n\nexport default memo(function Focus() {\n  const dispatch = useRootDispatch();\n  const [modalItemEdit, setModalItemEdit] = useState(false);\n  const [modalProfile] = useState(false);\n  const [modalLogin] = useState(false);\n  const nav = (to: NavigationScreen) => () => dispatch(navigate(to));\n  const handleItemPress = useCallback(() => {\n    // flatList.scrollToIndex(20);\n    setModalItemEdit(edit => !edit);\n  }, []);\n  const handleModalEditBackgroundPress = useCallback(() => {\n    setModalItemEdit(false);\n  }, []);\n\n  return (\n    <>\n      <Screen onLeftPress={nav(\"portfolioLanding\")} disableScroll>\n        <Text h1 title=\"fc\" center />\n        <List onItemPress={handleItemPress} />\n      </Screen>\n      {modalItemEdit && (\n        <Dialog\n          duration={2000}\n          testID=\"editItem\"\n          title=\"hello\"\n          onBackgroundPress={handleModalEditBackgroundPress}\n        />\n      )}\n      {modalProfile && (\n        <Dialog\n          testID=\"editItem\"\n          title=\"hello\"\n          onBackgroundPress={handleModalEditBackgroundPress}\n        />\n      )}\n      {modalLogin && (\n        <Dialog\n          testID=\"editItem\"\n          title=\"hello\"\n          onBackgroundPress={handleModalEditBackgroundPress}\n        />\n      )}\n    </>\n  );\n});\n"],"sourceRoot":""}