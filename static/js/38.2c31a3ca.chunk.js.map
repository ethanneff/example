{"version":3,"sources":["apps/Playground/FortuneWheel/utils.tsx","apps/Playground/FortuneWheel/Wheel.tsx","apps/Playground/FortuneWheel/index.tsx"],"names":["getNewLocation","minSpin","maxSpin","numOfSegments","location","spins","min","max","Math","floor","random","getRandomRange","winner","Wheel","memo","size","Dimensions","get","width","backgroundColor","textColor","fontSize","segments","innerRadius","spinSpeed","bounceSpeed","onComplete","radius","length","angleOfSegment","angleOffset","active","useRef","angle","Animated","Value","yPosition","arcs","d3","map","arc","index","instance","padAngle","outerRadius","path","centroid","segment","onSpinComplete","useCallback","current","winnerIndex","deg","abs","round","getWinnerIndex","spin","newLocation","timing","toValue","duration","easing","Easing","inOut","sin","useNativeDriver","start","onPress","bounce","config","useEffect","TouchableOpacity","View","style","transform","translateY","interpolate","inputRange","outputRange","height","borderRadius","rotate","x","y","i","key","d","String","fill","color","strokeWidth","origin","rotation","textAnchor","display","useColor","useMemo","value","primary","info","danger","brand","warning","success","dark","secondary","useSegments","nav","useNav","useState","setWinner","a","onLeftPress","to","title","center"],"mappings":"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","file":"static/js/38.2c31a3ca.chunk.js","sourcesContent":["type GetRandomRange = {\n  min: number;\n  max: number;\n};\n\nconst getRandomRange = ({min, max}: GetRandomRange) => {\n  return Math.floor(Math.random() * (max - min) + min);\n};\n\ntype GetNewLocation = {\n  minSpin: number;\n  maxSpin: number;\n  numOfSegments: number;\n  location: number;\n};\n\nexport const getNewLocation = ({\n  minSpin,\n  maxSpin,\n  numOfSegments,\n  location,\n}: GetNewLocation) => {\n  const spins = getRandomRange({min: minSpin, max: maxSpin}) * 360;\n  const winner = Math.floor(Math.random() * numOfSegments);\n  const winnerSection = Math.floor(winner * (360 / numOfSegments));\n  const newLocation = location + spins + winnerSection;\n  return newLocation;\n};\n\ntype GetWinnerIndex = {\n  location: number;\n  numOfSegments: number;\n  angleOfSegment: number;\n};\n\nexport const getWinnerIndex = ({\n  location,\n  numOfSegments,\n  angleOfSegment,\n}: GetWinnerIndex) => {\n  const deg = Math.abs(Math.round(location % 360));\n  const index =\n    (numOfSegments - Math.floor(deg / angleOfSegment)) % numOfSegments;\n  return index;\n};\n","import React, {memo, useCallback, useEffect, useRef} from 'react';\nimport {Animated, Dimensions, Easing, TouchableOpacity} from 'react-native';\nimport * as d3 from 'd3-shape';\nimport Svg, {G, Path, Text} from 'react-native-svg';\nimport {getNewLocation, getWinnerIndex} from './utils';\n\ntype Segment = {\n  value: string;\n  display: string;\n  color: string;\n};\n\ntype Props = {\n  size?: number;\n  backgroundColor?: string;\n  borderColor?: string;\n  textColor?: string;\n  borderWidth?: number;\n  fontSize?: number;\n  innerRadius?: number;\n  segments: Segment[];\n  spinSpeed?: number;\n  bounceSpeed?: number;\n  minSpin?: number;\n  maxSpin?: number;\n  onComplete: (segment: Segment) => void;\n};\n\nexport const Wheel = memo(\n  ({\n    size = Dimensions.get('screen').width,\n    backgroundColor = 'lightgrey',\n    textColor = 'white',\n    fontSize = 20,\n    segments,\n    innerRadius = 60,\n    spinSpeed = 1000,\n    bounceSpeed = 5000,\n    minSpin = 1,\n    maxSpin = 3,\n    onComplete,\n  }: Props) => {\n    const radius = size / 2;\n    const numOfSegments = segments.length;\n    const angleOfSegment = 360 / numOfSegments;\n    const angleOffset = angleOfSegment / 2;\n    const active = useRef(false);\n    const location = useRef(0);\n    const angle = new Animated.Value(0);\n    const yPosition = new Animated.Value(-1);\n    const arcs = d3\n      .pie()(segments.map(() => 1))\n      .map((arc: any, index) => {\n        const instance = d3\n          .arc()\n          .padAngle(0.01)\n          .outerRadius(radius)\n          .innerRadius(innerRadius);\n        return {\n          path: instance(arc),\n          centroid: instance.centroid(arc),\n          segment: segments[index],\n        };\n      });\n\n    const onSpinComplete = useCallback(() => {\n      active.current = false;\n      const winnerIndex = getWinnerIndex({\n        location: location.current,\n        numOfSegments,\n        angleOfSegment,\n      });\n      onComplete(segments[winnerIndex]);\n    }, [angleOfSegment, numOfSegments, onComplete, segments]);\n\n    const spin = useCallback(() => {\n      const newLocation = getNewLocation({\n        minSpin,\n        maxSpin,\n        numOfSegments,\n        location: location.current,\n      });\n      location.current = newLocation;\n      active.current = true;\n      Animated.timing(angle, {\n        toValue: newLocation,\n        duration: spinSpeed,\n        easing: Easing.inOut(Easing.sin),\n        useNativeDriver: true,\n      }).start(onSpinComplete);\n    }, [angle, maxSpin, minSpin, numOfSegments, onSpinComplete, spinSpeed]);\n\n    const onPress = useCallback(() => {\n      if (active.current) {\n        return;\n      }\n      spin();\n    }, [spin]);\n\n    const bounce = useCallback(\n      (toValue: number) => {\n        const config = {toValue, duration: bounceSpeed, useNativeDriver: true};\n        Animated.timing(yPosition, config).start(() =>\n          bounce(toValue === 1 ? -1 : 1),\n        );\n      },\n      [bounceSpeed, yPosition],\n    );\n\n    useEffect(() => {\n      bounce(1);\n    }, [bounce]);\n\n    return (\n      <TouchableOpacity onPress={onPress}>\n        <Animated.View\n          style={{\n            transform: [\n              {\n                translateY: yPosition.interpolate({\n                  inputRange: [-1, 0, 1],\n                  outputRange: ['-10', '0', '-10'],\n                }),\n              },\n            ],\n            backgroundColor,\n            width: size,\n            height: size,\n            borderRadius: size,\n          }}>\n          <Animated.View\n            style={{\n              width: size,\n              height: size,\n              transform: [\n                {\n                  rotate: angle.interpolate({\n                    inputRange: [-360, 0, 360],\n                    outputRange: ['-360deg', '0deg', '360deg'],\n                  }),\n                },\n              ],\n            }}>\n            <Svg\n              style={{\n                transform: [{rotate: `-${angleOffset}deg`}],\n              }}>\n              <G x={radius} y={radius}>\n                {arcs.map((arc, i) => (\n                  <G key={`arc-${i}`}>\n                    <Path\n                      d={String(arc.path)}\n                      fill={arc.segment.color}\n                      strokeWidth={2}\n                    />\n                    <G\n                      origin={`${arc.centroid}`}\n                      rotation={(i * 360) / segments.length + angleOffset}>\n                      <Text\n                        fill={textColor}\n                        fontSize={fontSize}\n                        textAnchor=\"middle\"\n                        x={arc.centroid[0]}\n                        y={arc.centroid[1] - 50}>\n                        {arc.segment.display}\n                      </Text>\n                    </G>\n                  </G>\n                ))}\n              </G>\n            </Svg>\n          </Animated.View>\n        </Animated.View>\n      </TouchableOpacity>\n    );\n  },\n);\n","import React, {memo, useCallback, useMemo, useState} from 'react';\nimport {Screen, Text} from '../../../components';\nimport {useColor, useNav} from '../../../hooks';\nimport {Wheel} from './Wheel';\n\nconst useSegments = () => {\n  const color = useColor();\n  return useMemo(\n    () => [\n      {display: '1', value: '1', color: color.primary},\n      {display: '2', value: '2', color: color.info},\n      {display: '3', value: '3', color: color.danger},\n      {display: '4', value: '4', color: color.brand},\n      {display: '5', value: '5', color: color.warning},\n      {display: '6', value: '6', color: color.success},\n      {display: '7', value: '7', color: color.dark},\n      {display: '8', value: '8', color: color.secondary},\n    ],\n    [\n      color.brand,\n      color.danger,\n      color.dark,\n      color.info,\n      color.primary,\n      color.secondary,\n      color.success,\n      color.warning,\n    ],\n  );\n};\n\nexport default memo(function PlaygroundFortuneWheel() {\n  const segments = useSegments();\n  const nav = useNav();\n  const [winner, setWinner] = useState(null);\n\n  const onComplete = useCallback((a) => {\n    setWinner(a.display);\n  }, []);\n\n  // TODO: fix odd number return\n  // TODO: add knob\n  // TODO: add animation decay\n  return (\n    <Screen onLeftPress={nav.to('playground')} title=\"FortuneWheel\">\n      <Wheel onComplete={onComplete} segments={segments} />\n      <Text center title={String(winner)} />\n    </Screen>\n  );\n});\n"],"sourceRoot":""}