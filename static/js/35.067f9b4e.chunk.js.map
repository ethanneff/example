{"version":3,"sources":["apps/Playground/GameOfLife/utils.ts","apps/Playground/GameOfLife/Cell.tsx","apps/Playground/GameOfLife/index.tsx"],"names":["operations","generateBoard","size","random","board","i","j","Math","Cell","memo","x","y","row","onItemPress","color","useColor","key","onPress","style","height","width","backgroundColor","primary","surface","borderWidth","borderColor","light","useState","run","delay","count","form","setForm","loading","setLoading","setBoard","runRef","useRef","delayRef","timeoutRef","useRootSelector","getSmallestDimension","nav","useNav","styles","StyleSheet","create","container","background","onClear","useCallback","state","map","rows","item","swapBoardItem","onRandom","loop","current","_","neighbors","length","forEach","newI","newK","determineBoardItem","setTimeout","onStart","onCountSlide","value","onDelaySlide","useEffect","clearTimeout","onLeftPress","to","title","emphasis","type","View","flexDirection","alignSelf","maximumValue","minimumValue","onSlidingComplete","step","flex","floor","justifyContent"],"mappings":"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","file":"static/js/35.067f9b4e.chunk.js","sourcesContent":["const operations = [\n  [0, 1],\n  [0, -1],\n  [1, -1],\n  [-1, 1],\n  [1, 1],\n  [-1, -1],\n  [1, 0],\n  [-1, 0],\n];\n\ntype BoardItem = 0 | 1;\n\nexport type Board = Array<Array<BoardItem>>;\n\nexport const generateBoard = (size: number, random = 0) => {\n  const board: Board = [];\n  for (let i = 0; i < size; i++) {\n    board[i] = [];\n    for (let j = 0; j < size; j++) {\n      board[i][j] = Math.random() > random ? 0 : 1;\n    }\n  }\n  return board;\n};\n\n// TODO: memoize\nexport const determineBoardItem = (board: Board, i: number, j: number) => {\n  let neighbors = 0;\n  const item = board[i][j];\n  const length = board.length;\n  operations.forEach(([x, y]) => {\n    const newI = i + x;\n    const newK = j + y;\n    if (newI >= 0 && newI < length && newK >= 0 && newK < length) {\n      neighbors += board[newI][newK];\n    }\n  });\n\n  return neighbors < 2 || neighbors > 3\n    ? 0\n    : item === 0 && neighbors === 3\n    ? 1\n    : item;\n};\n\nexport const swapBoardItem = (\n  item: BoardItem,\n  x: number,\n  y: number,\n  i: number,\n  j: number,\n) => {\n  return i === x && y === j ? (item ? 0 : 1) : item;\n};\n","import React, {memo} from 'react';\nimport {useColor} from '../../../hooks';\nimport {TouchableOpacity} from '../../../components';\n\ninterface CellProps {\n  x: number;\n  y: number;\n  row: number;\n  size: number;\n  onItemPress(x: number, y: number): () => void;\n}\n\nexport const Cell = memo(function Cell({\n  x,\n  y,\n  row,\n  size,\n  onItemPress,\n}: CellProps) {\n  const color = useColor();\n  return (\n    <TouchableOpacity\n      key={`${x}-${y}`}\n      onPress={onItemPress(x, y)}\n      style={{\n        height: size,\n        width: size,\n        backgroundColor: row ? color.primary : color.surface,\n        borderWidth: 1,\n        borderColor: color.light,\n      }}\n    />\n  );\n});\n","import React, {memo, useCallback, useEffect, useRef, useState} from 'react';\nimport {StyleSheet, View} from 'react-native';\nimport {Button, Screen, Slider, Text} from '../../../components';\nimport {useColor, useNav} from '../../../hooks';\nimport {useRootSelector} from '../../../utils';\nimport {getSmallestDimension} from '../../../models';\nimport {determineBoardItem, generateBoard, swapBoardItem} from './utils';\nimport {Cell} from './Cell';\n\nexport default memo(function PlaygroundGameOfLife() {\n  const color = useColor();\n  const [form, setForm] = useState({\n    run: false,\n    delay: 16,\n    count: 20,\n  });\n  const [loading, setLoading] = useState(true);\n  const [board, setBoard] = useState(generateBoard(form.count, 0.5));\n  const runRef = useRef(form.run);\n  const delayRef = useRef(form.delay);\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const smallest = useRootSelector(getSmallestDimension);\n  const size = smallest / form.count;\n  const nav = useNav();\n  const styles = StyleSheet.create({\n    container: {\n      backgroundColor: color.background,\n    },\n  });\n\n  const onClear = useCallback(() => setBoard(generateBoard(form.count)), [\n    form.count,\n  ]);\n\n  const onItemPress = useCallback(\n    (x: number, y: number) => () => {\n      setBoard((state) =>\n        state.map((rows, i) =>\n          rows.map((item, j) => swapBoardItem(item, x, y, i, j)),\n        ),\n      );\n    },\n    [],\n  );\n\n  const onRandom = useCallback(() => setBoard(generateBoard(form.count, 0.5)), [\n    form.count,\n  ]);\n\n  const loop = useCallback(() => {\n    if (!runRef.current) {\n      return;\n    }\n\n    setBoard((state) =>\n      state.map((rows, i) =>\n        rows.map((_, j) => determineBoardItem(state, i, j)),\n      ),\n    );\n\n    timeoutRef.current = setTimeout(loop, delayRef.current);\n  }, []);\n\n  const onStart = useCallback(() => {\n    setForm((state) => ({...state, run: !state.run}));\n    runRef.current = !runRef.current;\n    loop();\n  }, [loop]);\n\n  const onCountSlide = useCallback((value: number) => {\n    setForm((state) => ({...state, count: value}));\n    setBoard(generateBoard(value, 0.5));\n  }, []);\n\n  const onDelaySlide = useCallback((value: number) => {\n    setForm((state) => ({...state, delay: value}));\n    delayRef.current = value;\n  }, []);\n\n  useEffect(() => {\n    setLoading(false);\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, [timeoutRef]);\n\n  return (\n    <Screen onLeftPress={nav.to('playground')} title=\"Game of life\">\n      {loading ? (\n        <Text emphasis=\"medium\" title=\"loading...\" type=\"h5\" />\n      ) : (\n        <>\n          <View style={{flexDirection: 'row'}}>\n            <Text\n              style={{alignSelf: 'center'}}\n              title={`count: ${form.count}`}\n              type=\"h4\"\n            />\n            <Slider\n              maximumValue={100}\n              minimumValue={1}\n              onSlidingComplete={onCountSlide}\n              step={1}\n              style={{flex: 1}}\n              value={10}\n            />\n          </View>\n          <View style={{flexDirection: 'row'}}>\n            <Text\n              style={{alignSelf: 'center'}}\n              title={`delay: ${Math.floor(form.delay)}`}\n              type=\"h4\"\n            />\n            <Slider\n              maximumValue={100}\n              minimumValue={1}\n              onSlidingComplete={onDelaySlide}\n              step={1}\n              style={{flex: 1}}\n              value={10}\n            />\n          </View>\n          <View style={styles.container}>\n            <View style={{flexDirection: 'row', justifyContent: 'center'}}>\n              <Button onPress={onStart} title={form.run ? 'stop' : 'start'} />\n              <Button onPress={onRandom} title=\"random\" />\n              <Button onPress={onClear} title=\"clear\" />\n            </View>\n            {board.map((rows, x) => (\n              <View\n                key={`${x}`}\n                style={{flexDirection: 'row', justifyContent: 'center'}}>\n                {rows.map((row, y) => (\n                  <Cell\n                    key={`${x}-${y}`}\n                    onItemPress={onItemPress}\n                    row={row}\n                    size={size}\n                    x={x}\n                    y={y}\n                  />\n                ))}\n              </View>\n            ))}\n          </View>\n        </>\n      )}\n    </Screen>\n  );\n});\n"],"sourceRoot":""}