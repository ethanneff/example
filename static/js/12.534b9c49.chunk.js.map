{"version":3,"sources":["apps/Complete/configs.tsx","apps/Complete/components/AddButton.tsx","apps/Complete/components/AddItem.tsx","apps/Complete/components/AddList.tsx","apps/Complete/components/AlertWrapper.tsx","apps/Complete/utils/useAlertSize.tsx","apps/Complete/components/Card.tsx","apps/Complete/components/ListHeaderInput.tsx","apps/Complete/components/ListHeader.tsx","apps/Complete/components/ListItem.tsx","apps/Complete/components/ListItems.tsx","apps/Complete/components/List.tsx","apps/Complete/components/Board.tsx","apps/Complete/components/OrganizeButton.tsx","apps/Complete/screens/Account/factory.ts","apps/Complete/screens/Account/index.tsx","apps/Complete/screens/Capture/index.tsx","apps/Complete/screens/ItemDetail/index.tsx","apps/Complete/screens/Landing/index.tsx","apps/Complete/screens/Project/index.tsx","apps/Complete/screens/Projects/index.tsx","apps/Complete/screens/Reflect/Graph.tsx","apps/Complete/screens/Reflect/index.tsx","apps/Complete/index.tsx"],"names":["config","borderRadius","Theme","padding","p02","p04","alert","width","height","AddButton","memo","placeholder","title","onSubmit","color","useColor","textInputRef","useRef","useState","showInput","setShowInput","itemTitle","setItemTitle","onItemTitleChange","useCallback","v","onAddItemPress","p","onItemTitleClose","onItemTitleSubmit","formatted","trim","length","current","focus","onBlur","View","style","p12","backgroundColor","background","justifyContent","flexDirection","alignItems","blurOnSubmit","emphasis","flex","focusOnLoad","onChangeText","onRef","onSubmitEditing","returnKeyType","value","name","onPress","padded","primary","center","AddItem","listId","dispatch","useRootDispatch","itemId","v4","date","Date","now","item","id","active","createdAt","updatedAt","createItem","updateListAddItem","AddList","boardId","list","items","createList","updateBoardAddList","AlertWrapper","children","onBackgroundPress","alertSize","dimensions","useRootSelector","s","dimension","screen","useAlertSize","ScrollView","showsVerticalScrollIndicator","Card","onLayout","margin","marginRight","marginBottom","ListHeaderInput","listTitle","completeList","setTitle","onSave","updateListTitle","type","ListHeader","ListItem","completeItem","navigate","useNavigation","showControls","setShowControls","onTextChange","Keyboard","dismiss","updateItem","onFocus","onItemNav","board","Error","setActiveBoard","onItemDelete","removeItem","updateListRemoveItem","onItemDetails","setActiveItem","setActiveList","onItemLongPress","onLongPress","surface","ListItems","maxHeight","listItems","cardsRef","cardsLength","onKeyExtractor","onCardSizeChange","scrollToEnd","onRenderItem","FlatList","data","keyExtractor","keyboardShouldPersistTaps","onContentSizeChange","ref","renderItem","List","orientation","listWidth","listMaxHeight","Board","listSize","completeBoard","getItemId","getItemLayout","_","index","offset","renderAddList","renderList","ListFooterComponent","contentContainerStyle","lists","decelerationRate","horizontal","showsHorizontalScrollIndicator","snapToAlignment","snapToInterval","OrganizeButton","disable","defaults","Account","goBack","navBack","onLogin","inboxItems","inboxList","map","inboxBoard","homeItems","homeLists","homeBoard","projectItems","projectsList","listsItems","listsList","categoryBoard","user","boards","getDefaultUserTemplate","createBoard","createUser","onLogout","removeUser","onSetActive","setActiveUser","onNavToAdmin","paddingBottom","Capture","keyboardHeight","state","device","container","button","setDimensions","android","Platform","OS","listHeight","getInboxListId","onOrganize","key","event","nativeEvent","layout","navToAccount","onRightPress","rightIcon","render","ItemDetail","description","setDescription","onTitleChange","onDescriptionChange","onItemSave","Landing","navPortfolioLogin","slides","text","info","warning","success","brand","Project","screenWidth","getSmallestDimension","setContainer","onLeftPress","Projects","listIds","getCategoryListIds","getDomain","domain","Math","min","max","Graph","scaleX","scaleTime","d","range","scaleY","scaleLinear","strokeWidth","shape","x","y","curve","StyleSheet","absoluteFill","x1","x2","y1","y2","stopColor","fill","stroke","Title","getTime","Reflect","Dimensions","get","noHeader","headerShown","RootTab","createBottomTabNavigator","RootStack","createStackNavigator","ProjectsStack","tabIcons","capture","focused","unfocused","reflect","Focus","Navigator","screenOptions","Screen","component","Tabs","tabBarOptions","keyboardHidesTabBar","activeTintColor","inactiveTintColor","secondary","showLabel","route","tabBarIcon","size","iconColor","Main","completeUser","mode","rootMode","rootScreenOptions","Notification","Alert"],"mappings":"uMAEaA,EAAS,CACpBC,aAAcC,IAAMC,QAAQC,IAC5BD,QAASD,IAAMC,QAAQE,IACvBC,MAAO,CACLC,MAAO,GACPC,OAAQ,KCOCC,EAAYC,gBAAK,YAKV,IAJlBH,EAIiB,EAJjBA,MACAI,EAGiB,EAHjBA,YACAC,EAEiB,EAFjBA,MACAC,EACiB,EADjBA,SAEMC,EAAQC,cACRC,EAAeC,iBAAiC,MAFrC,EAGiBC,oBAAS,GAH1B,mBAGVC,EAHU,KAGCC,EAHD,OAIiBF,mBAAS,IAJ1B,mBAIVG,EAJU,KAICC,EAJD,KAKXC,EAAoBC,uBAAY,SAACC,GAAD,OAAeH,EAAaG,KAAI,IAChEC,EAAiBF,uBAAY,kBAAMJ,GAAa,SAACO,GAAD,OAAQA,OAAI,IAE5DC,EAAmBJ,uBAAY,WACnCJ,GAAa,GACbE,EAAa,MACZ,IAEGO,EAAoBL,uBAAY,WAAO,IAAD,EACpCM,EAAYT,EAAUU,OACH,IAArBD,EAAUE,SAEdV,EAAa,IACbT,EAASiB,GACT,UAAAd,EAAaiB,eAAb,SAAsBC,WACrB,CAACb,EAAWR,IAETsB,EAASX,uBAAY,WACzBJ,GAAa,GACbE,EAAa,MACZ,IAEH,OACE,cAACc,EAAA,EAAD,CACEC,MAAO,CACL9B,QACAC,OAAQN,IAAMC,QAAQmC,IACtBrC,aAAcD,EAAOC,aACrBsC,gBAAiBzB,EAAM0B,WACvBC,eAAgB,UANpB,SAQGtB,EACC,eAACiB,EAAA,EAAD,CAAMC,MAAO,CAACK,cAAe,MAAOC,WAAY,UAAhD,UACE,cAAC,IAAD,CACEC,cAAc,EACdC,SAAS,OACTC,MAAI,EACJC,aAAW,EACXZ,OAAQA,EACRa,aAAczB,EACd0B,MAAOjC,EACPkC,gBAAiBrB,EACjBlB,YAAaA,EACbwC,cAAc,OACdC,MAAO/B,IAET,cAAC,IAAD,CAAMgC,KAAK,QAAQC,QAAS1B,EAAkB2B,QAAM,IACpD,cAAC,IAAD,CACEzC,MAAOA,EAAM0C,QACbH,KAAK,OACLC,QAASzB,EACT0B,QAAM,OAIV,cAAC,IAAD,CAAQE,QAAM,EAAC3C,MAAM,UAAUwC,QAAS5B,EAAgBd,MAAOA,S,iBCnE1D8C,EAAUhD,gBAAK,YAIV,IAHhBC,EAGe,EAHfA,YACAC,EAEe,EAFfA,MACA+C,EACe,EADfA,OAEMC,EAAWC,cACXhD,EAAWW,uBACf,SAAC4B,GACC,IAAMU,EAASC,cACTC,EAAOC,KAAKC,MACZC,EAAa,CACjBC,GAAIN,EACJO,QAAQ,EACRzD,MAAOwC,EACPkB,UAAWN,EACXO,UAAWP,GAEbJ,EAASY,YAAWL,IACpBP,EAASa,YAAkB,CAACd,SAAQG,cAEtC,CAACF,EAAUD,IAGb,OACE,cAAC,EAAD,CAAW9C,SAAUA,EAAUF,YAAaA,EAAaC,MAAOA,OCvBvD8D,EAAUhE,gBAAK,YAKV,IAJhBC,EAIe,EAJfA,YACAC,EAGe,EAHfA,MACA+D,EAEe,EAFfA,QACApE,EACe,EADfA,MAEMqD,EAAWC,cACXhD,EAAWW,uBACf,SAAC4B,GACC,IAAMO,EAASI,cACTC,EAAOC,KAAKC,MACZU,EAAa,CACjBR,GAAIT,EACJU,QAAQ,EACRzD,MAAOwC,EACPkB,UAAWN,EACXO,UAAWP,EACXa,MAAO,IAETjB,EAASkB,YAAWF,IACpBhB,EAASmB,YAAmB,CAACJ,UAAShB,cAExC,CAACgB,EAASf,IAGZ,OACE,cAAC,EAAD,CACE/C,SAAUA,EACVF,YAAaA,EACbC,MAAOA,EACPL,MAAOA,O,eChCAyE,EAAetE,gBAAK,YAIV,IAHrBuE,EAGoB,EAHpBA,SACAC,EAEoB,EAFpBA,kBACA3C,EACoB,EADpBA,gBAEM4C,ECXoB,WAC1B,IAAMC,EAAaC,aAAgB,SAACC,GAAD,OAAOA,EAAEC,UAAUC,UAGtD,MAAO,CAACjF,MAFM6E,EAAW7E,MAAQP,EAAOM,MAAMC,MAE/BC,OADA4E,EAAW5E,OAASR,EAAOM,MAAME,QDQ9BiF,GAClB,OACE,cAAC,IAAD,CACElD,gBAAiBA,EACjB2C,kBAAmBA,EAFrB,SAGE,cAAC9C,EAAA,EAAD,CAAMC,MAAK,eAAM8C,GAAjB,SACE,cAACO,EAAA,EAAD,CAAYC,8BAA8B,EAA1C,SAAkDV,W,SER7CW,EAAOlF,gBAAK,YAKV,IAJbuE,EAIY,EAJZA,SACAY,EAGY,EAHZA,SAGY,IAFZC,cAEY,MAFH,SAEG,EADZvF,EACY,EADZA,MAEMO,EAAQC,cACd,OACE,cAACqB,EAAA,EAAD,CACEyD,SAAUA,EACVxD,MAAO,CACL9B,QACAN,aAAcD,EAAOC,aACrBsC,gBAAiBzB,EAAM0B,WACvBrC,QAASH,EAAOG,QAAU,EAC1B4F,YAAwB,UAAXD,EAAqB9F,EAAOG,QAAU,EACnD6F,aAAyB,WAAXF,EAAsB9F,EAAOG,QAAU,GARzD,SAUG8E,OCvBMgB,EAAkBvF,gBAAK,YAEV,IADxBiD,EACuB,EADvBA,OAEMC,EAAWC,cACXqC,EAAYb,aAAgB,SAACC,GAAD,OAAOA,EAAEa,aAAatB,MAAMlB,GAAQ/C,SAF/C,EAGGM,mBAASgF,GAHZ,mBAGhBtF,EAHgB,KAGTwF,EAHS,KAIjBpD,EAAexB,uBAAY,SAAC4B,GAChCgD,EAAShD,KACR,IAEGiD,EAAS7E,uBAAY,WACzBoC,EAAS0C,YAAgB,CAAC3C,SAAQ/C,aACjC,CAACgD,EAAUD,EAAQ/C,IAEtB,OACE,cAAC,IAAD,CACEiC,SAAS,OACTC,MAAI,EACJX,OAAQkE,EACRrD,aAAcA,EACdrC,YAAY,eACZwC,cAAc,OACdoD,KAAK,KACLnD,MAAOxC,OCvBA4F,EAAa9F,gBAAK,YAAgD,IAA3BiD,EAA0B,EAA1BA,OAClD,OACE,eAACvB,EAAA,EAAD,CACEC,MAAO,CACLK,cAAe,MACfC,WAAY,SACZF,eAAgB,iBAJpB,UAME,cAAC,EAAD,CAAiBkB,OAAQA,IACzB,cAAC,IAAD,CAAMN,KAAK,kBAAkBE,QAAM,U,SCG5BkD,EAAW/F,gBAAK,YAGV,IAFjBoD,EAEgB,EAFhBA,OACAH,EACgB,EADhBA,OAEMQ,EAAOkB,aAAgB,SAACC,GAAD,OAAOA,EAAEoB,aAAa7B,MAAMf,MACnDF,EAAWC,cACV8C,EAAYC,0BAAZD,SACD7F,EAAQC,cAJE,EAKUG,mBAASiD,EAAKvD,OALxB,mBAKTA,EALS,KAKFwF,EALE,OAMwBlF,oBAAS,GANjC,mBAMT2F,EANS,KAMKC,EANL,KAQVC,EAAevF,uBAAY,SAAC4B,GAChCgD,EAAShD,KACR,IAEGxB,EAAmBJ,uBAAY,WACnC4E,EAASjC,EAAKvD,OACdoG,IAASC,YACR,CAAC9C,EAAKvD,QAEHiB,EAAoBL,uBAAY,WACpCoC,EAASsD,YAAW,2BAAI/C,GAAL,IAAWvD,YAC9BoG,IAASC,YACR,CAACrD,EAAUO,EAAMvD,IAEduG,EAAU3F,uBAAY,kBAAMsF,GAAgB,KAAO,IACnD3E,EAASX,uBAAY,kBAAMsF,GAAgB,KAAQ,IAEnDM,EAAY5F,uBAAY,WAC5B,IAAK2C,EAAKkD,MACR,MAAM,IAAIC,MAAM,6CAClB1D,EAAS2D,YAAepD,EAAKkD,QAC7BV,EAAS,WACR,CAAC/C,EAAUO,EAAKkD,MAAOV,IAEpBa,EAAehG,uBAAY,WAC/BoC,EAAS6D,YAAW3D,IACpBF,EAAS8D,YAAqB,CAAC/D,SAAQG,cACtC,CAACF,EAAUE,EAAQH,IAEhBgE,EAAgBnG,uBAAY,WAChCoC,EAASgE,YAAc9D,IACvBF,EAASiE,YAAclE,IACvBgD,EAAS,iBACR,CAAC/C,EAAUE,EAAQH,EAAQgD,IAExBmB,EAAkBtG,uBAAY,cAAiB,IAErD,OACE,eAAC,IAAD,CAEEuG,YAAaD,EACbzF,MAAO,CACLS,KAAM,EACN7C,aAAcD,EAAOC,aACrB6F,OAAQ9F,EAAOG,QAAU,EACzBoC,gBAAiBzB,EAAMkH,QACvBtF,cAAe,OARnB,UAUE,cAAC,IAAD,CACEH,gBAAiBzB,EAAMkH,QACvBlF,MAAI,EACJX,OAAQA,EACRa,aAAc+D,EACdI,QAASA,EACTjE,gBAAiBrB,EACjBlB,YAAY,eACZwC,cAAc,OACdC,MAAOxC,IAERiG,EACC,eAACzE,EAAA,EAAD,CAAMC,MAAO,CAACK,cAAe,MAAOC,WAAY,UAAhD,UACE,cAAC,IAAD,CAAMU,KAAK,QAAQC,QAAS1B,EAAkB2B,QAAM,IACpD,cAAC,IAAD,CACEzC,MAAOA,EAAM0C,QACbH,KAAK,OACLC,QAASzB,EACT0B,QAAM,OAIV,eAACnB,EAAA,EAAD,CAAMC,MAAO,CAACK,cAAe,MAAOC,WAAY,UAAhD,UACE,cAAC,IAAD,CAAMU,KAAK,oBAAoBC,QAASkE,EAAcjE,QAAM,IAC5D,cAAC,IAAD,CAAMF,KAAK,kBAAkBC,QAASqE,EAAepE,QAAM,IAC1DY,EAAKkD,OACJ,cAAC,IAAD,CAAMhE,KAAK,gBAAgBC,QAAS8D,EAAW7D,QAAM,SAnCtDY,EAAKC,OC7DH6D,EAAYvH,gBAAK,YAGV,IAFlBiD,EAEiB,EAFjBA,OACAuE,EACiB,EADjBA,UAEMC,EAAY9C,aAAgB,SAACC,GAAD,OAAOA,EAAEa,aAAatB,MAAMlB,GAAQkB,SAChEuD,EAAWnH,iBAAwB,MACnCoH,EAAcpH,iBAAOkH,EAAUnG,QAE/BsG,EAAiB9G,uBAAY,SAAC2C,GAAD,OAAUA,IAAM,IAE7CoE,EAAmB/G,uBAAY,WACU,IAAD,EAAxC2G,EAAUnG,OAASqG,EAAYpG,UACjC,UAAAmG,EAASnG,eAAT,SAAkBuG,cAClBH,EAAYpG,QAAUkG,EAAUnG,UAEjC,CAACmG,EAAUnG,SAERyG,EAAuCjH,uBAC3C,YAAa,IAAX2C,EAAU,EAAVA,KACA,OAAO,cAAC,EAAD,CAAUL,OAAQK,EAAiBR,OAAQA,GAAdQ,KAEtC,CAACR,IAGH,OACE,cAAC+E,EAAA,EAAD,CACEC,KAAMR,EACNS,aAAcN,EACdO,0BAA0B,UAC1BC,oBAAqBP,EACrBQ,IAAKX,EACLY,WAAYP,EACZ9C,8BAA8B,EAC9BtD,MAAO,CAAC6F,kBC3BDe,EAAOvI,gBAAK,YAOV,IANbiD,EAMY,EANZA,OACAuF,EAKY,EALZA,YACAC,EAIY,EAJZA,UACAC,EAGY,EAHZA,cACAxI,EAEY,EAFZA,MACAD,EACY,EADZA,YAEMmF,EAAyB,eAAhBoD,EAA+B,QAAU,SACxD,OACE,cAAC9G,EAAA,EAAD,UACE,eAAC,EAAD,CAAM0D,OAAQA,EAAQvF,MAAO4I,EAA7B,UACE,cAAC,EAAD,CAAYxF,OAAQA,IACpB,cAAC,EAAD,CAAWA,OAAQA,EAAQuE,UAAWkB,IACtC,cAAC,EAAD,CAASzF,OAAQA,EAAQhD,YAAaA,EAAaC,MAAOA,YCjBrDyI,EAAQ3I,gBAAK,YAIV,IAHdiE,EAGa,EAHbA,QACAyE,EAEa,EAFbA,cACAD,EACa,EADbA,UAEMG,EAAWH,EAAYnJ,EAAOG,QAC9BkH,EAAQhC,aAAgB,SAACC,GAAD,OAAOA,EAAEiE,cAAc1E,MAAMF,MACrD6E,EAAYhI,uBAAY,SAAC2C,GAAD,OAAUA,IAAM,IAExCsF,EAAgBjI,uBACpB,SAACkI,EAAGC,GAAJ,MAAe,CACb3H,OAAQsH,EACRM,OAAQN,EAAWK,EACnBA,WAEF,CAACL,IAGGO,EAAgBrI,uBAAY,WAChC,OACE,cAAC,EAAD,CACEmD,QAASA,EACThE,YAAY,gBACZC,MAAM,WACNL,MAAO4I,MAGV,CAACxE,EAASwE,IAEPW,EAAatI,uBACjB,YAAa,IAAX2C,EAAU,EAAVA,KACA,OACE,cAAC,EAAD,CAEER,OAAQQ,EACRiF,cAAeA,EACfD,UAAWA,EACXD,YAAY,aACZvI,YAAY,gBACZC,MAAM,YANDuD,KAUX,CAACiF,EAAeD,IAGlB,OACE,cAACT,EAAA,EAAD,CACEqB,oBAAqBF,EACrBG,sBAAuB,CAAC7J,QAASH,EAAOG,SACxCwI,KAAMtB,EAAM4C,MACZC,iBAAiB,OACjBT,cAAeA,EACfU,YAAU,EACVvB,aAAcY,EACdX,0BAA0B,UAC1BG,WAAYc,EACZM,gCAAgC,EAChCC,gBAAgB,SAChBC,eAAgBhB,OC5DTiB,EAAiB7J,gBAAK,YAIV,IAHvBiD,EAGsB,EAHtBA,OACAL,EAEsB,EAFtBA,QACAuC,EACsB,EADtBA,SAEMsC,EAAY9C,aAChB,SAACC,GAAD,OAAOA,EAAEa,aAAatB,MAAMlB,GAAQkB,MAAM7C,UAE5C,OACE,cAAC,EAAD,CAAM6D,SAAUA,EAAhB,SACE,cAAC,IAAD,CACEpC,QAAM,EACN3C,MAAM,UACN0J,QAAuB,IAAdrC,EACT7E,QAASA,EACT1C,MAAM,kBCjBRoD,EAAOC,KAAKC,MACZuG,EAAW,iBAAO,CACtBrG,GAAIL,cACJM,QAAQ,EACRC,UAAWN,EACXO,UAAWP,ICMA0G,EAAUhK,gBAAK,WAC1B,IAAMI,EAAQC,cACR6C,EAAWC,cAF4B,EAGlB+C,0BAApB+D,EAHsC,EAGtCA,OAAQhE,EAH8B,EAG9BA,SACTiE,EAAUpJ,uBAAY,kBAAMmJ,MAAU,CAACA,IAEvCE,EAAUrJ,uBAAY,WAAO,IAAD,EDTE,WAEpC,IAAMsJ,EAAqB,CAAC,2BACtBL,KADqB,IACT7J,MAAO,cADE,2BAErB6J,KAFqB,IAET7J,MAAO,8BAFE,2BAGrB6J,KAHqB,IAGT7J,MAAO,gBAHE,2BAIrB6J,KAJqB,IAIT7J,MAAO,eAJE,2BAKrB6J,KALqB,IAKT7J,MAAO,+BALE,2BAMrB6J,KANqB,IAMT7J,MAAO,oCANE,2BAOrB6J,KAPqB,IAOT7J,MAAO,gBAPE,2BAQrB6J,KARqB,IAQT7J,MAAO,kCARE,2BASrB6J,KATqB,IAST7J,MAAO,qBATE,2BAUrB6J,KAVqB,IAUT7J,MAAO,kBAEnBmK,EAAe,2BAChBN,KADgB,IAEnB7J,MAAO,QACPiE,MAAOiG,EAAWE,KAAI,SAAC7G,GAAD,OAAUA,EAAKC,QAEjC6G,EAAiB,2BAClBR,KADkB,IAErB7J,MAAO,QACPqJ,MAAO,CAACc,EAAU3G,MAId8G,EAAoB,CAAC,2BACrBT,KADoB,IACR7J,MAAO,eADC,2BAEpB6J,KAFoB,IAER7J,MAAO,eAFC,2BAGpB6J,KAHoB,IAGR7J,MAAO,aAHC,2BAIpB6J,KAJoB,IAIR7J,MAAO,gBAJC,2BAKpB6J,KALoB,IAKR7J,MAAO,eALC,2BAMpB6J,KANoB,IAMR7J,MAAO,cAEnBuK,EAAoB,CAAC,2BACrBV,KADoB,IACR7J,MAAO,UAAWiE,MAAOqG,EAAUF,KAAI,SAAC7G,GAAD,OAAUA,EAAKC,QAD9C,2BAEpBqG,KAFoB,IAER7J,MAAO,OAAQiE,MAAO,KAFd,2BAGpB4F,KAHoB,IAGR7J,MAAO,cAAeiE,MAAO,KAHrB,2BAIpB4F,KAJoB,IAIR7J,MAAO,OAAQiE,MAAO,MAElCuG,EAAgB,2BACjBX,KADiB,IAEpB7J,MAAO,OACPqJ,MAAOkB,EAAUH,KAAI,SAAC7G,GAAD,OAAUA,EAAKC,QAIhCiH,EAAuB,CAAC,2BACxBZ,KADuB,IACX7J,MAAO,UAAWyG,MAAO+D,EAAUhH,KADxB,2BAEvBqG,KAFuB,IAEX7J,MAAO,YAFI,2BAGvB6J,KAHuB,IAGX7J,MAAO,YAHI,2BAIvB6J,KAJuB,IAIX7J,MAAO,WAJI,2BAKvB6J,KALuB,IAKX7J,MAAO,iBAEnB0K,EAAkB,2BACnBb,KADmB,IAEtB7J,MAAO,WACPiE,MAAOwG,EAAaL,KAAI,SAAC7G,GAAD,OAAUA,EAAKC,QAEnCmH,EAAqB,CAAC,2BACtBd,KADqB,IACT7J,MAAO,kBADE,2BAErB6J,KAFqB,IAET7J,MAAO,mBAFE,2BAGrB6J,KAHqB,IAGT7J,MAAO,eAHE,2BAIrB6J,KAJqB,IAIT7J,MAAO,eAJE,2BAKrB6J,KALqB,IAKT7J,MAAO,oBAEnB4K,EAAe,2BAChBf,KADgB,IAEnB7J,MAAO,QACPiE,MAAO0G,EAAWP,KAAI,SAAC7G,GAAD,OAAUA,EAAKC,QAEjCqH,EAAoB,2BACrBhB,KADqB,IAExB7J,MAAO,aACPqJ,MAAO,CAACqB,EAAalH,GAAIoH,EAAUpH,MAUrC,MAAO,CACLsH,KAPc,2BACXjB,KADW,IAEdpH,KAAM,YACNsI,OAAQ,CAACV,EAAW7G,GAAIqH,EAAcrH,MAKtCuH,OAAQ,CAACP,EAAWH,EAAYQ,GAChCxB,MAAM,CAAEc,GAAH,OAAiBI,EAAjB,CAA4BG,EAAcE,IAC/C3G,MAAM,GAAD,OAAMiG,EAAeI,EAAcG,EAAiBE,IC9EpBK,GAA9BF,EADyB,EACzBA,KAAMC,EADmB,EACnBA,OAAQ1B,EADW,EACXA,MADW,EACJpF,MACtBmG,KAAI,SAAC7G,GAAD,OAAUP,EAASY,YAAWL,OACxC8F,EAAMe,KAAI,SAACpG,GAAD,OAAUhB,EAASkB,YAAWF,OACxC+G,EAAOX,KAAI,SAAC3D,GAAD,OAAWzD,EAASiI,YAAYxE,OAC3CzD,EAASkI,YAAWJ,IACpBf,MACC,CAAC/G,EAAU+G,IACRoB,EAAWvK,uBAAY,WAC3BoC,EAASoI,eACTrF,EAAS,UACR,CAAC/C,EAAU+C,IACRsF,EAAczK,uBAAY,WAC9BoC,EAASsI,aAAc,MACtB,CAACtI,IAEEuI,EAAe3K,uBAAY,kBAAMmF,EAAS,WAAU,CAACA,IAE3D,OACE,eAAC,EAAD,CAAcpE,gBAAiBzB,EAAMkH,QAAS9C,kBAAmB0F,EAAjE,UACE,eAAC,EAAD,WACE,cAAC,IAAD,CACEvI,MAAO,CAAC+J,cAAelM,IAAMC,QAAQE,KACrCO,MAAM,UACN2F,KAAK,OAEP,cAAC,IAAD,CAAM9C,QAAM,EAACZ,SAAS,SAASjC,MAAM,MAAM2F,KAAK,UAElD,eAAC,EAAD,WACE,cAAC,IAAD,CACElE,MAAO,CAAC+J,cAAelM,IAAMC,QAAQE,KACrCO,MAAM,YACN2F,KAAK,OAEP,cAAC,IAAD,CAAM9C,QAAM,EAACZ,SAAS,SAASjC,MAAM,MAAM2F,KAAK,UAElD,eAAC,EAAD,WACE,cAAC,IAAD,CACElE,MAAO,CAAC+J,cAAelM,IAAMC,QAAQE,KACrCO,MAAM,UACN2F,KAAK,OAEP,cAAC,IAAD,CAAM9C,QAAM,EAACZ,SAAS,SAASjC,MAAM,MAAM2F,KAAK,UAElD,eAAC,EAAD,WACE,cAAC,IAAD,CACElE,MAAO,CAAC+J,cAAelM,IAAMC,QAAQE,KACrCO,MAAM,WACN2F,KAAK,OAEP,cAAC,IAAD,CAAM9C,QAAM,EAACZ,SAAS,SAASjC,MAAM,MAAM2F,KAAK,UAElD,cAAC,IAAD,CAAQjD,QAASuH,EAASjK,MAAM,UAChC,cAAC,IAAD,CAAQ0C,QAASyI,EAAUnL,MAAM,WACjC,cAAC,IAAD,CAAQ0C,QAAS2I,EAAarL,MAAM,eACpC,cAAC,IAAD,CAAQ0C,QAAS6I,EAAcvL,MAAM,sB,gBCxE9ByL,EAAU3L,gBAAK,WAC1B,IAAMI,EAAQC,cACP4F,EAAYC,0BAAZD,SAED2F,EAAiBjH,aACrB,SAACkH,GAAD,OAAWA,EAAMC,OAAOF,kBALmB,EAOTpL,mBAAS,CAACuL,UAAW,EAAGC,OAAQ,IAPvB,mBAOtCtH,EAPsC,KAO1BuH,EAP0B,KAQvCC,EAA0B,YAAhBC,IAASC,GAEnBC,EACe,IAAnBT,EACIlH,EAAWqH,UACXrH,EAAWsH,QACVE,EAA2B,EAAjB5M,EAAOG,QAA+B,GAAjBH,EAAOG,SACvCiF,EAAWqH,UACXH,GACCM,EAA2B,EAAjB5M,EAAOG,QAA+B,EAAjBH,EAAOG,SAEvCwD,EAAS0B,YAAgB2H,KAEzBC,EAAazL,uBAAY,cAAiB,IAE1CqE,EAAWrE,uBACf,SAAC0L,GAAD,OAAiB,SAACC,GAA8B,IACvC3M,EAAU2M,EAAMC,YAAYC,OAA5B7M,OAEG,cAAR0M,GAAuB9H,EAAWqH,UAAY,GAGhDE,GAAc,SAAChL,GAAD,mBAAC,eAAWA,GAAZ,kBAAgBuL,EAAM1M,UAEtC,CAAC4E,EAAWqH,YAGRa,EAAe9L,uBAAY,kBAAMmF,EAAS,aAAY,CAACA,IAE7D,OACE,cAAC,IAAD,CAAQ4G,aAAcD,EAAcE,UAAU,UAAU5M,MAAM,UAA9D,SACE,cAAC,IAAD,CACE2B,gBAAiBzB,EAAMkH,QACvBnC,SAAUA,EAAS,aACnB4H,OAAQrI,EAAWqH,UAAY,EAHjC,SAIG9I,EACC,eAACvB,EAAA,EAAD,CAAMC,MAAO,CAAClC,QAASH,EAAOG,SAA9B,UACE,cAAC,EAAD,CACEwD,OAAQA,EACRyF,cAAe2D,EACfpM,YAAY,gBACZC,MAAM,aAER,cAAC,EAAD,CACE+C,OAAQA,EACRkC,SAAUA,EAAS,UACnBvC,QAAS2J,OAIb,cAAC,IAAD,CAAMrM,MAAM,2BCvDT8M,EAAahN,gBAAK,WAC7B,IAAMI,EAAQC,cACR6C,EAAWC,cACV8G,EAAU/D,0BAAV+D,OACDC,EAAUpJ,uBAAY,kBAAMmJ,MAAU,CAACA,IACvC7G,EAASuB,aAAgB,SAACC,GAAD,OAAOA,EAAEoB,aAAarC,UAC/CV,EAAS0B,aAAgB,SAACC,GAAD,OAAOA,EAAEa,aAAa9B,UAC/CF,EAAOkB,aAAgB,SAACC,GAAD,OAAOA,EAAEoB,aAAa7B,MAAMf,GAAU,OAPhB,EASzB5C,mBAASiD,EAAKvD,OATW,mBAS5CA,EAT4C,KASrCwF,EATqC,OAUblF,mBAASiD,EAAKwJ,aAAe,IAVhB,mBAU5CA,EAV4C,KAU/BC,EAV+B,KAY7CC,EAAgBrM,uBAAY,SAACC,GAAD,OAAO2E,EAAS3E,KAAI,IAChDqM,EAAsBtM,uBAAY,SAACC,GAAD,OAAOmM,EAAenM,KAAI,IAE5DsM,EAAavM,uBAAY,WAC7BoC,EAASsD,YAAW,2BAAI/C,GAAL,IAAWvD,QAAO+M,kBACrC3G,IAASC,YACR,CAAC0G,EAAa/J,EAAUO,EAAMvD,IAE3B4G,EAAehG,uBAAY,WAC/B,IAAKsC,IAAWH,EACd,MAAM,IAAI2D,MAAM,kDAClB1D,EAAS6D,YAAW3D,IACpBF,EAAS8D,YAAqB,CAAC/D,SAAQG,cACtC,CAACF,EAAUE,EAAQH,IAEtB,OAAQQ,EACN,cAAC,EAAD,CAAc5B,gBAAiBzB,EAAMkH,QAAS9C,kBAAmB0F,EAAjE,SACIzG,EAKA,eAAC/B,EAAA,EAAD,WACE,eAAC,EAAD,WACE,cAAC,IAAD,CACEC,MAAO,CAAC+J,cAAelM,IAAMC,QAAQE,KACrCO,MAAM,QACN2F,KAAK,OAEP,cAAC,IAAD,CACE1D,SAAS,SACTC,MAAI,EACJX,OAAQ4L,EACR/K,aAAc6K,EACdlN,YAAY,eACZwC,cAAc,OACdoD,KAAK,KACLnD,MAAOxC,OAGX,eAAC,EAAD,WACE,cAAC,IAAD,CACEyB,MAAO,CAAC+J,cAAelM,IAAMC,QAAQE,KACrCO,MAAM,cACN2F,KAAK,OAEP,cAAC,IAAD,CACE1D,SAAS,SACTC,MAAI,EACJX,OAAQ4L,EACR/K,aAAc8K,EACdnN,YAAY,aACZwC,cAAc,OACdoD,KAAK,KACLnD,MAAOuK,OAGX,cAAC,EAAD,UACE,cAAC,IAAD,CACEtL,MAAO,CAAC+J,cAAelM,IAAMC,QAAQE,KACrCO,MAAM,YACN2F,KAAK,SAGT,cAAC,EAAD,UACE,cAAC,IAAD,CAAQ9C,QAAM,EAACH,QAASkE,EAAc5G,MAAM,gBA/ChD,cAACwB,EAAA,EAAD,UACE,cAAC,IAAD,CAAMxB,MAAM,qBAJL,QClCJoN,EAAUtN,gBAAK,WAAoB,IACvCiG,EAAYC,0BAAZD,SACD7F,EAAQC,cACRkN,EAAoBzM,uBAAY,kBAAMmF,EAAS,aAAY,CAACA,IAE5DuH,EAAkB,CACtB,CAAC9J,GAAI,IAAK+J,KAAM,QAASrN,MAAOA,EAAMsN,MACtC,CAAChK,GAAI,IAAK+J,KAAM,MAAOrN,MAAOA,EAAMuN,SACpC,CAACjK,GAAI,IAAK+J,KAAM,QAASrN,MAAOA,EAAMwN,SACtC,CAAClK,GAAI,IAAK+J,KAAM,OAAQrN,MAAOA,EAAMyN,QAGvC,OACE,eAAC,IAAD,CAAQ3N,MAAM,UAAd,UACE,cAAC,IAAD,CAAUsN,OAAQA,IAClB,cAAC,IAAD,CAAQzK,QAAM,EAACH,QAAS2K,EAAmBrN,MAAM,gB,QCT1C4N,EAAU9N,gBAAK,WAAoB,IACvCiK,EAAU/D,0BAAV+D,OACD7J,EAAQC,cACR0N,EAAcpJ,YAAgBqJ,KAC9B/J,EAAUU,aAAgB,SAACC,GAAD,OAAOA,EAAEiE,cAAclF,UACjD8E,EAA0B,GAAdsF,EAL2B,EAMXvN,mBAAS,GANE,mBAMtCuL,EANsC,KAM3BkC,EAN2B,KAOvC/B,EAA0B,YAAhBC,IAASC,GACnBR,EAAiBjH,aACrB,SAACkH,GAAD,OAAWA,EAAMC,OAAOF,kBAGpBlD,EACe,IAAnBkD,EACIG,GAAaG,EAA2B,EAAjB5M,EAAOG,QAA+B,GAAjBH,EAAOG,SACnDsM,EACAH,GACCM,EAA2B,EAAjB5M,EAAOG,QAA+B,EAAjBH,EAAOG,SAEvC0F,EAAWrE,uBACf,SAAC2L,GAA8B,IACtB3M,EAAU2M,EAAMC,YAAYC,OAA5B7M,OACHiM,EAAY,GAEhBkC,EAAanO,KAEf,CAACiM,IAGG7B,EAAUpJ,uBAAY,WAC1BmJ,MACC,CAACA,IAEJ,OACE,cAAC,IAAD,CAAQiE,YAAahE,EAAShK,MAAM,QAApC,SACI+D,EAGA,cAAC,IAAD,CACEpC,gBAAiBzB,EAAMkH,QACvBnC,SAAUA,EACV4H,OAAQhB,EAAY,EAHtB,SAIE,cAAC,EAAD,CACE9H,QAASA,EACTyE,cAAeA,EACfD,UAAWA,MATf,cAAC,IAAD,CAAMvI,MAAM,uBC/BPiO,EAAWnO,gBAAK,WAC3B,IAAMI,EAAQC,cACP4F,EAAYC,0BAAZD,SACDmI,EAAUzJ,YAAgB0J,KAHe,EAIX7N,mBAAS,GAJE,mBAIxCkE,EAJwC,KAI5BuH,EAJ4B,KAMzC9G,EAAWrE,uBACf,SAAC2L,GAA8B,IACtB3M,EAAU2M,EAAMC,YAAYC,OAA5B7M,OACH4E,EAAa,GAEjBuH,EAAcnM,KAEhB,CAAC4E,IAGG8C,EAAY9C,EAAa,EAAqB,GAAjBpF,EAAOG,QAEpCmN,EAAe9L,uBAAY,kBAAMmF,EAAS,aAAY,CAACA,IAE7D,OACE,cAAC,IAAD,CAAQ4G,aAAcD,EAAcE,UAAU,UAAU5M,MAAM,WAA9D,SACE,cAAC,IAAD,CACE2B,gBAAiBzB,EAAMkH,QACvBnC,SAAUA,EACV4H,OAAQrI,EAAa,EAHvB,SAIE,cAAChD,EAAA,EAAD,CAAMC,MAAO,CAAClC,QAASH,EAAOG,SAA9B,SACG2O,EAAQ9D,KAAI,SAACrH,GAAD,OACX,cAAC,EAAD,CAEEA,OAAQA,EACRyF,cAAelB,EACfvH,YAAY,gBACZC,MAAM,YAJD+C,e,6EC3BbqL,EAAY,SAACC,GAAD,MAAsB,CACtCC,KAAKC,IAAL,MAAAD,KAAI,YAAQD,IACZC,KAAKE,IAAL,MAAAF,KAAI,YAAQD,MAGDI,GAAQ,SAAC,GAIiB,IAHrC1G,EAGoC,EAHpCA,KACApI,EAEoC,EAFpCA,MACAC,EACoC,EADpCA,OAEM8O,EAASC,cACZN,OAAOD,EAAUrG,EAAKqC,KAAI,SAACwE,GAAD,OAAOA,EAAExL,UACnCyL,MAAM,CAAC,EAAGlP,IACPmP,EAASC,cACZV,OAAOD,EAAUrG,EAAKqC,KAAI,SAACwE,GAAD,OAAOA,EAAEpM,WACnCqM,MAAM,CAACjP,EAhBIoP,MAiBRJ,EAAIK,MAEPC,GAAE,SAACnO,GAAD,OAAO2N,EAAO3N,EAAEqC,SAClB+L,GAAE,SAACpO,GAAD,OAAO+N,EAAO/N,EAAEyB,UAClB4M,MAAMH,IAJCA,CAIiBlH,GAC3B,OACE,cAACvG,EAAA,EAAD,CAAMC,MAAO,CAAC9B,QAAOC,UAArB,SACE,eAAC,IAAD,CAAK6B,MAAO4N,IAAWC,aAAvB,UACE,cAAC,OAAD,UACE,eAAC,iBAAD,CAAgB9L,GAAG,WAAW+L,GAAG,MAAMC,GAAG,MAAMC,GAAG,KAAKC,GAAG,OAA3D,UACE,cAAC,OAAD,CAAM1G,OAAO,KAAK2G,UAAU,YAC5B,cAAC,OAAD,CAAM3G,OAAO,MAAM2G,UAAU,YAC7B,cAAC,OAAD,CAAM3G,OAAO,OAAO2G,UAAU,iBAGlC,cAAC,OAAD,CACEf,EAAC,UAAKA,EAAL,aAAWjP,EAAX,YAAoBC,EAApB,gBAAkCA,GACnCgQ,KAAK,mBAEP,cAAC,OAAD,aAAMA,KAAK,cAAcC,OAAO,WAAc,CAACjB,IAAGI,YArCtC,WCAdc,GAAQ,SAAC,GAAwB,IAAvBrN,EAAsB,EAAtBA,KACd,OACE,cAAC,IAAD,CACER,SAAS,OACTR,MAAO,CAAC+J,cAAepM,EAAOG,SAC9BS,MAAOyC,EACPkD,KAAK,QAKLoC,GAAO,CACX,CAAC3E,KAAM,IAAIC,KAAK,KAAM,EAAG,GAAG0M,UAAWvN,MAAO,GAC9C,CAACY,KAAM,IAAIC,KAAK,KAAM,EAAG,IAAI0M,UAAWvN,MAAO,GAC/C,CAACY,KAAM,IAAIC,KAAK,KAAM,EAAG,IAAI0M,UAAWvN,MAAO,KAC/C,CAACY,KAAM,IAAIC,KAAK,KAAM,GAAI,GAAG0M,UAAWvN,MAAO,KAC/C,CAACY,KAAM,IAAIC,KAAK,KAAM,GAAI,GAAG0M,UAAWvN,MAAO,KAC/C,CAACY,KAAM,IAAIC,KAAK,KAAM,GAAI,GAAG0M,UAAWvN,MAAO,MAGpCwN,GAAUlQ,gBAAK,WAC1B,IAAMI,EAAQC,cACP4F,EAAYC,0BAAZD,SACD2G,EAAe9L,uBAAY,kBAAMmF,EAAS,aAAY,CAACA,IAE7D,OACE,cAAC,IAAD,CAAQ4G,aAAcD,EAAcE,UAAU,UAAU5M,MAAM,UAA9D,SACE,eAAC8E,EAAA,EAAD,CACEsE,sBAAuB,CACrB7J,QAASD,IAAMC,QAAQE,IACvBkC,gBAAiBzB,EAAMkH,SAEzB3F,MAAO,CAACE,gBAAiBzB,EAAMkH,SALjC,UAME,cAAC,EAAD,UACE,eAAC5F,EAAA,EAAD,WACE,cAAC,GAAD,CAAOiB,KAAK,YACZ,cAAC,IAAD,CAAMzC,MAAM,uEAGhB,cAAC,EAAD,UACE,eAACwB,EAAA,EAAD,WACE,cAAC,GAAD,CAAOiB,KAAK,UACZ,cAAC,IAAD,CAAMzC,MAAM,UACZ,cAAC,IAAD,CAAMA,MAAM,eACZ,cAAC,IAAD,CAAMA,MAAM,UACZ,cAAC,IAAD,CAAMA,MAAM,oBAGhB,cAAC,EAAD,UACE,eAACwB,EAAA,EAAD,WACE,cAAC,GAAD,CAAOiB,KAAK,sBACZ,cAACjB,EAAA,EAAD,CACEC,MAAO,CAACS,KAAM,EAAGL,eAAgB,SAAUE,WAAY,UADzD,SAEE,cAAC,GAAD,CACEgG,KAAMA,GACNnI,OAAQ,IACRD,MAAOsQ,IAAWC,IAAI,UAAUvQ,MAAyB,EAAjBP,EAAOG,iBAKvD,cAAC,EAAD,UACE,eAACiC,EAAA,EAAD,WACE,cAAC,GAAD,CAAOiB,KAAK,sBACZ,cAAC,IAAD,iBCzDN0N,GAAmC,CAACC,aAAa,GACjDC,GAAUC,cACVC,GAAYC,cACZC,GAAgBD,cAOhBE,GAAqB,CACzBC,QAAS,CACPC,QAAS,sBACTC,UAAW,uBAEbvP,MAAO,CACLsP,QAAS,mCACTC,UAAW,oCAEbC,QAAS,CAACF,QAAS,UAAWC,UAAW,YAYrCE,GAAQ,WACZ,OACE,eAACN,GAAcO,UAAf,CAAyBC,cAAed,GAAxC,UACE,cAACM,GAAcS,OAAf,CAAsBC,UAAWlD,EAAUxL,KAAK,WAChD,cAACgO,GAAcS,OAAf,CAAsBC,UAAWvD,EAASnL,KAAK,cAK/C2O,GAAO,WACX,IAAMlR,EAAQC,cACRkR,EAAqC,CACzCC,qBAAqB,EACrBC,gBAAiBrR,EAAMqN,KACvBiE,kBAAmBtR,EAAMuR,UACzBC,WAAW,GAEPT,EAAgBrQ,uBACpB,gBAAE+Q,EAAF,EAAEA,MAAF,MAAkC,CAChCC,WAAY,YAAuD,IAAlChB,EAAiC,EAAjCA,QAASiB,EAAwB,EAAxBA,KAClCvQ,EAAQsP,EAAU,UAAY,YAC9BkB,EAAYlB,EAAU1Q,EAAMqN,KAAOrN,EAAMuR,UACzChP,EAAQiO,GAAiBiB,EAAMlP,MAAMnB,GAC3C,OAAO,cAAC,IAAD,CAAMpB,MAAO4R,EAAWrP,KAAMA,EAAMoP,KAAMA,QAGrD,CAAC3R,IAGH,OACE,eAACmQ,GAAQW,UAAT,CACEC,cAAeA,EACfI,cAAeA,EAFjB,UAGE,cAAChB,GAAQa,OAAT,CAAgBC,UAAW1F,EAAShJ,KAAK,YACzC,cAAC4N,GAAQa,OAAT,CAAgBC,UAAWJ,GAAOtO,KAAK,UACvC,cAAC4N,GAAQa,OAAT,CAAgBC,UAAWnB,GAASvN,KAAK,gBAKhC3C,0BAAK,WAClB,IACMiS,EADOtN,aAAgB,SAACC,GAAD,OAAOA,EAAEsN,gBAClBZ,GAAOhE,EAC3B,OACE,eAACmD,GAAUS,UAAX,CAAqBiB,KAAMC,IAAUjB,cAAekB,IAApD,UACE,cAAC5B,GAAUW,OAAX,CAAkBC,UAAWY,EAAMtP,KAAK,SACxC,cAAC8N,GAAUW,OAAX,CAAkBC,UAAWrH,EAASrH,KAAK,YAC3C,cAAC8N,GAAUW,OAAX,CAAkBC,UAAWiB,IAAc3P,KAAK,iBAChD,cAAC8N,GAAUW,OAAX,CAAkBC,UAAWkB,IAAO5P,KAAK,UACzC,cAAC8N,GAAUW,OAAX,CAAkBC,UAAWrE,EAAYrK,KAAK","file":"static/js/12.534b9c49.chunk.js","sourcesContent":["import {Theme} from '../../utils';\n\nexport const config = {\n  borderRadius: Theme.padding.p02,\n  padding: Theme.padding.p04,\n  alert: {\n    width: 0.8,\n    height: 0.6,\n  },\n};\n","import React, {memo, useCallback, useRef, useState} from 'react';\nimport {TextInput as OriginalTextInput, View} from 'react-native';\nimport {Button, Icon, TextInput} from '../../../components';\nimport {useColor} from '../../../hooks';\nimport {Theme} from '../../../utils';\nimport {config} from '../configs';\n\ntype AddButtonProps = {\n  width?: number;\n  placeholder: string;\n  title: string;\n  onSubmit: (value: string) => void;\n};\n\nexport const AddButton = memo(function AddButton({\n  width,\n  placeholder,\n  title,\n  onSubmit,\n}: AddButtonProps) {\n  const color = useColor();\n  const textInputRef = useRef<OriginalTextInput | null>(null);\n  const [showInput, setShowInput] = useState(false);\n  const [itemTitle, setItemTitle] = useState('');\n  const onItemTitleChange = useCallback((v: string) => setItemTitle(v), []);\n  const onAddItemPress = useCallback(() => setShowInput((p) => !p), []);\n\n  const onItemTitleClose = useCallback(() => {\n    setShowInput(false);\n    setItemTitle('');\n  }, []);\n\n  const onItemTitleSubmit = useCallback(() => {\n    const formatted = itemTitle.trim();\n    if (formatted.length === 0) return;\n\n    setItemTitle('');\n    onSubmit(formatted);\n    textInputRef.current?.focus();\n  }, [itemTitle, onSubmit]);\n\n  const onBlur = useCallback(() => {\n    setShowInput(false);\n    setItemTitle('');\n  }, []);\n\n  return (\n    <View\n      style={{\n        width,\n        height: Theme.padding.p12,\n        borderRadius: config.borderRadius,\n        backgroundColor: color.background,\n        justifyContent: 'center',\n      }}>\n      {showInput ? (\n        <View style={{flexDirection: 'row', alignItems: 'center'}}>\n          <TextInput\n            blurOnSubmit={false}\n            emphasis=\"high\"\n            flex\n            focusOnLoad\n            onBlur={onBlur}\n            onChangeText={onItemTitleChange}\n            onRef={textInputRef}\n            onSubmitEditing={onItemTitleSubmit}\n            placeholder={placeholder}\n            returnKeyType=\"done\"\n            value={itemTitle}\n          />\n          <Icon name=\"close\" onPress={onItemTitleClose} padded />\n          <Icon\n            color={color.primary}\n            name=\"send\"\n            onPress={onItemTitleSubmit}\n            padded\n          />\n        </View>\n      ) : (\n        <Button center color=\"primary\" onPress={onAddItemPress} title={title} />\n      )}\n    </View>\n  );\n});\n","import React, {memo, useCallback} from 'react';\nimport {v4} from 'uuid';\nimport {useRootDispatch} from '../../../utils';\nimport {createItem, Item, updateListAddItem} from '../models';\nimport {AddButton} from './AddButton';\n\ntype AddItemProps = {\n  listId: string;\n  placeholder: string;\n  title: string;\n};\n\nexport const AddItem = memo(function AddItem({\n  placeholder,\n  title,\n  listId,\n}: AddItemProps) {\n  const dispatch = useRootDispatch();\n  const onSubmit = useCallback(\n    (value: string) => {\n      const itemId = v4();\n      const date = Date.now();\n      const item: Item = {\n        id: itemId,\n        active: true,\n        title: value,\n        createdAt: date,\n        updatedAt: date,\n      };\n      dispatch(createItem(item));\n      dispatch(updateListAddItem({listId, itemId}));\n    },\n    [dispatch, listId],\n  );\n\n  return (\n    <AddButton onSubmit={onSubmit} placeholder={placeholder} title={title} />\n  );\n});\n","import React, {memo, useCallback} from 'react';\nimport {v4} from 'uuid';\nimport {useRootDispatch} from '../../../utils';\nimport {createList, List, updateBoardAddList} from '../models';\nimport {AddButton} from './AddButton';\n\ntype AddListProps = {\n  boardId: string;\n  placeholder: string;\n  title: string;\n  width: number;\n};\n\nexport const AddList = memo(function AddList({\n  placeholder,\n  title,\n  boardId,\n  width,\n}: AddListProps) {\n  const dispatch = useRootDispatch();\n  const onSubmit = useCallback(\n    (value: string) => {\n      const listId = v4();\n      const date = Date.now();\n      const list: List = {\n        id: listId,\n        active: true,\n        title: value,\n        createdAt: date,\n        updatedAt: date,\n        items: [],\n      };\n      dispatch(createList(list));\n      dispatch(updateBoardAddList({boardId, listId}));\n    },\n    [boardId, dispatch],\n  );\n\n  return (\n    <AddButton\n      onSubmit={onSubmit}\n      placeholder={placeholder}\n      title={title}\n      width={width}\n    />\n  );\n});\n","import React, {memo, ReactElement} from 'react';\nimport {ScrollView, View} from 'react-native';\nimport {Alert} from '../../../components';\nimport {useAlertSize} from '../utils';\n\ntype AlertWrapperProps = {\n  children: ReactElement | ReactElement[];\n  onBackgroundPress: () => void;\n  backgroundColor: string;\n};\n\nexport const AlertWrapper = memo(function AlertWrapper({\n  children,\n  onBackgroundPress,\n  backgroundColor,\n}: AlertWrapperProps) {\n  const alertSize = useAlertSize();\n  return (\n    <Alert\n      backgroundColor={backgroundColor}\n      onBackgroundPress={onBackgroundPress}>\n      <View style={{...alertSize}}>\n        <ScrollView showsVerticalScrollIndicator={false}>{children}</ScrollView>\n      </View>\n    </Alert>\n  );\n});\n","import {useRootSelector} from '../../../utils';\nimport {config} from '../configs';\n\ntype UseAlertSize = {width: number; height: number};\n\nexport const useAlertSize = (): UseAlertSize => {\n  const dimensions = useRootSelector((s) => s.dimension.screen);\n  const width = dimensions.width * config.alert.width;\n  const height = dimensions.height * config.alert.height;\n  return {width, height};\n};\n","import React, {memo, ReactElement} from 'react';\nimport {LayoutChangeEvent, View} from 'react-native';\nimport {useColor} from '../../../hooks';\nimport {config} from '../configs';\n\n// TODO: combine card components with global card\n\ntype CardProps = {\n  onLayout?: (event: LayoutChangeEvent) => void;\n  children: ReactElement | ReactElement[];\n  margin?: 'bottom' | 'right';\n  width?: number;\n};\n\nexport const Card = memo(function Card({\n  children,\n  onLayout,\n  margin = 'bottom',\n  width,\n}: CardProps) {\n  const color = useColor();\n  return (\n    <View\n      onLayout={onLayout}\n      style={{\n        width,\n        borderRadius: config.borderRadius,\n        backgroundColor: color.background,\n        padding: config.padding / 2,\n        marginRight: margin === 'right' ? config.padding : 0,\n        marginBottom: margin === 'bottom' ? config.padding : 0,\n      }}>\n      {children}\n    </View>\n  );\n});\n","import React, {memo, useCallback, useState} from 'react';\nimport {TextInput} from '../../../components';\nimport {useRootDispatch, useRootSelector} from '../../../utils';\nimport {updateListTitle} from '../models';\n\ntype ListHeaderInputProps = {\n  listId: string;\n};\n\nexport const ListHeaderInput = memo(function ListHeaderInput({\n  listId,\n}: ListHeaderInputProps) {\n  const dispatch = useRootDispatch();\n  const listTitle = useRootSelector((s) => s.completeList.items[listId].title);\n  const [title, setTitle] = useState(listTitle);\n  const onChangeText = useCallback((value: string) => {\n    setTitle(value);\n  }, []);\n\n  const onSave = useCallback(() => {\n    dispatch(updateListTitle({listId, title}));\n  }, [dispatch, listId, title]);\n\n  return (\n    <TextInput\n      emphasis=\"high\"\n      flex\n      onBlur={onSave}\n      onChangeText={onChangeText}\n      placeholder=\"list name...\"\n      returnKeyType=\"done\"\n      type=\"h4\"\n      value={title}\n    />\n  );\n});\n","import React, {memo} from 'react';\nimport {View} from 'react-native';\nimport {Icon} from '../../../components';\nimport {ListHeaderInput} from './ListHeaderInput';\n\ntype ListHeaderProps = {\n  listId: string;\n};\n\nexport const ListHeader = memo(function ListHeader({listId}: ListHeaderProps) {\n  return (\n    <View\n      style={{\n        flexDirection: 'row',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n      }}>\n      <ListHeaderInput listId={listId} />\n      <Icon name=\"dots-horizontal\" padded />\n    </View>\n  );\n});\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback, useState} from 'react';\nimport {Keyboard, View} from 'react-native';\nimport {Icon, TextInput, TouchableOpacity} from '../../../components';\nimport {useColor} from '../../../hooks';\nimport {useRootDispatch, useRootSelector} from '../../../utils';\nimport {config} from '../configs';\nimport {\n  removeItem,\n  setActiveBoard,\n  setActiveItem,\n  setActiveList,\n  updateItem,\n  updateListRemoveItem,\n} from '../models';\n\ntype ListItemProps = {\n  itemId: string;\n  listId: string;\n};\n\nexport const ListItem = memo(function ListItem({\n  itemId,\n  listId,\n}: ListItemProps) {\n  const item = useRootSelector((s) => s.completeItem.items[itemId]);\n  const dispatch = useRootDispatch();\n  const {navigate} = useNavigation();\n  const color = useColor();\n  const [title, setTitle] = useState(item.title);\n  const [showControls, setShowControls] = useState(false);\n\n  const onTextChange = useCallback((value) => {\n    setTitle(value);\n  }, []);\n\n  const onItemTitleClose = useCallback(() => {\n    setTitle(item.title);\n    Keyboard.dismiss();\n  }, [item.title]);\n\n  const onItemTitleSubmit = useCallback(() => {\n    dispatch(updateItem({...item, title}));\n    Keyboard.dismiss();\n  }, [dispatch, item, title]);\n\n  const onFocus = useCallback(() => setShowControls(true), []);\n  const onBlur = useCallback(() => setShowControls(false), []);\n\n  const onItemNav = useCallback(() => {\n    if (!item.board)\n      throw new Error('item does not have a board to navigate to');\n    dispatch(setActiveBoard(item.board));\n    navigate('board');\n  }, [dispatch, item.board, navigate]);\n\n  const onItemDelete = useCallback(() => {\n    dispatch(removeItem(itemId));\n    dispatch(updateListRemoveItem({listId, itemId}));\n  }, [dispatch, itemId, listId]);\n\n  const onItemDetails = useCallback(() => {\n    dispatch(setActiveItem(itemId));\n    dispatch(setActiveList(listId));\n    navigate('item-detail');\n  }, [dispatch, itemId, listId, navigate]);\n\n  const onItemLongPress = useCallback(() => undefined, []);\n\n  return (\n    <TouchableOpacity\n      key={item.id}\n      onLongPress={onItemLongPress}\n      style={{\n        flex: 1,\n        borderRadius: config.borderRadius,\n        margin: config.padding / 2,\n        backgroundColor: color.surface,\n        flexDirection: 'row',\n      }}>\n      <TextInput\n        backgroundColor={color.surface}\n        flex\n        onBlur={onBlur}\n        onChangeText={onTextChange}\n        onFocus={onFocus}\n        onSubmitEditing={onItemTitleSubmit}\n        placeholder=\"Item name...\"\n        returnKeyType=\"done\"\n        value={title}\n      />\n      {showControls ? (\n        <View style={{flexDirection: 'row', alignItems: 'center'}}>\n          <Icon name=\"close\" onPress={onItemTitleClose} padded />\n          <Icon\n            color={color.primary}\n            name=\"send\"\n            onPress={onItemTitleSubmit}\n            padded\n          />\n        </View>\n      ) : (\n        <View style={{flexDirection: 'row', alignItems: 'center'}}>\n          <Icon name=\"trash-can-outline\" onPress={onItemDelete} padded />\n          <Icon name=\"dots-horizontal\" onPress={onItemDetails} padded />\n          {item.board && (\n            <Icon name=\"chevron-right\" onPress={onItemNav} padded />\n          )}\n        </View>\n      )}\n    </TouchableOpacity>\n  );\n});\n","import React, {memo, useCallback, useRef} from 'react';\nimport {FlatList, ListRenderItem} from 'react-native';\nimport {useRootSelector} from '../../../utils';\nimport {ListItem} from './ListItem';\n\ntype ListItemsProps = {\n  listId: string;\n  maxHeight?: number;\n};\n\nexport const ListItems = memo(function ListItems({\n  listId,\n  maxHeight,\n}: ListItemsProps) {\n  const listItems = useRootSelector((s) => s.completeList.items[listId].items);\n  const cardsRef = useRef<FlatList | null>(null);\n  const cardsLength = useRef(listItems.length);\n\n  const onKeyExtractor = useCallback((item) => item, []);\n\n  const onCardSizeChange = useCallback(() => {\n    if (listItems.length > cardsLength.current) {\n      cardsRef.current?.scrollToEnd();\n      cardsLength.current = listItems.length;\n    }\n  }, [listItems.length]);\n\n  const onRenderItem: ListRenderItem<string> = useCallback(\n    ({item}) => {\n      return <ListItem itemId={item} key={item} listId={listId} />;\n    },\n    [listId],\n  );\n\n  return (\n    <FlatList\n      data={listItems}\n      keyExtractor={onKeyExtractor}\n      keyboardShouldPersistTaps=\"handled\"\n      onContentSizeChange={onCardSizeChange}\n      ref={cardsRef}\n      renderItem={onRenderItem}\n      showsVerticalScrollIndicator={false}\n      style={{maxHeight}}\n    />\n  );\n});\n","import React, {memo} from 'react';\nimport {View} from 'react-native';\nimport {AddItem} from './AddItem';\nimport {Card} from './Card';\nimport {ListHeader} from './ListHeader';\nimport {ListItems} from './ListItems';\n\ntype ListProps = {\n  listWidth?: number;\n  listId: string;\n  listMaxHeight: number;\n  orientation?: 'vertical' | 'horizontal';\n  title: string;\n  placeholder: string;\n};\n\nexport const List = memo(function List({\n  listId,\n  orientation,\n  listWidth,\n  listMaxHeight,\n  title,\n  placeholder,\n}: ListProps) {\n  const margin = orientation === 'horizontal' ? 'right' : 'bottom';\n  return (\n    <View>\n      <Card margin={margin} width={listWidth}>\n        <ListHeader listId={listId} />\n        <ListItems listId={listId} maxHeight={listMaxHeight} />\n        <AddItem listId={listId} placeholder={placeholder} title={title} />\n      </Card>\n    </View>\n  );\n});\n","import React, {memo, useCallback} from 'react';\nimport {FlatList} from 'react-native';\nimport {useRootSelector} from '../../../utils';\nimport {config} from '../configs';\nimport {AddList} from './AddList';\nimport {List} from './List';\n\ntype BoardProps = {\n  boardId: string;\n  listMaxHeight: number;\n  listWidth: number;\n};\n\nexport const Board = memo(function Board({\n  boardId,\n  listMaxHeight,\n  listWidth,\n}: BoardProps) {\n  const listSize = listWidth + config.padding;\n  const board = useRootSelector((s) => s.completeBoard.items[boardId]);\n  const getItemId = useCallback((item) => item, []);\n\n  const getItemLayout = useCallback(\n    (_, index) => ({\n      length: listSize,\n      offset: listSize * index,\n      index,\n    }),\n    [listSize],\n  );\n\n  const renderAddList = useCallback(() => {\n    return (\n      <AddList\n        boardId={boardId}\n        placeholder=\"List title...\"\n        title=\"Add list\"\n        width={listWidth}\n      />\n    );\n  }, [boardId, listWidth]);\n\n  const renderList = useCallback(\n    ({item}) => {\n      return (\n        <List\n          key={item}\n          listId={item}\n          listMaxHeight={listMaxHeight}\n          listWidth={listWidth}\n          orientation=\"horizontal\"\n          placeholder=\"List title...\"\n          title=\"Add list\"\n        />\n      );\n    },\n    [listMaxHeight, listWidth],\n  );\n\n  return (\n    <FlatList\n      ListFooterComponent={renderAddList}\n      contentContainerStyle={{padding: config.padding}}\n      data={board.lists}\n      decelerationRate=\"fast\"\n      getItemLayout={getItemLayout}\n      horizontal\n      keyExtractor={getItemId}\n      keyboardShouldPersistTaps=\"handled\"\n      renderItem={renderList}\n      showsHorizontalScrollIndicator={false}\n      snapToAlignment=\"center\"\n      snapToInterval={listSize}\n    />\n  );\n});\n","import React, {memo} from 'react';\nimport {LayoutChangeEvent} from 'react-native';\nimport {Button} from '../../../components';\nimport {useRootSelector} from '../../../utils';\nimport {Card} from '../components/Card';\n\ntype OrganizeButtonProps = {\n  listId: string;\n  onPress: () => void;\n  onLayout: (event: LayoutChangeEvent) => void;\n};\n\nexport const OrganizeButton = memo(function OrganizeButton({\n  listId,\n  onPress,\n  onLayout,\n}: OrganizeButtonProps) {\n  const listItems = useRootSelector(\n    (s) => s.completeList.items[listId].items.length,\n  );\n  return (\n    <Card onLayout={onLayout}>\n      <Button\n        center\n        color=\"primary\"\n        disable={listItems === 0}\n        onPress={onPress}\n        title=\"Organize\"\n      />\n    </Card>\n  );\n});\n","import {v4} from 'uuid';\nimport {Board, Item, List, User} from '../../models';\n\ntype GetDefaultUserTemplate = {\n  user: User;\n  boards: Board[];\n  lists: List[];\n  items: Item[];\n};\n\nconst date = Date.now();\nconst defaults = () => ({\n  id: v4(),\n  active: true,\n  createdAt: date,\n  updatedAt: date,\n});\n\nexport const getDefaultUserTemplate = (): GetDefaultUserTemplate => {\n  // inbox\n  const inboxItems: Item[] = [\n    {...defaults(), title: 'do dishes'},\n    {...defaults(), title: 'schedule meeting with Jim'},\n    {...defaults(), title: 'run 4 miles'},\n    {...defaults(), title: 'change oil'},\n    {...defaults(), title: 'what is the best mediation'},\n    {...defaults(), title: 'record Kelly birthday on Sep 22'},\n    {...defaults(), title: 'drink water'},\n    {...defaults(), title: 'intensity + focus = deep work'},\n    {...defaults(), title: 'put $20 in phone'},\n    {...defaults(), title: 'clear emails'},\n  ];\n  const inboxList: List = {\n    ...defaults(),\n    title: 'Inbox',\n    items: inboxItems.map((item) => item.id),\n  };\n  const inboxBoard: Board = {\n    ...defaults(),\n    title: 'Inbox',\n    lists: [inboxList.id],\n  };\n\n  // sub category\n  const homeItems: Item[] = [\n    {...defaults(), title: 'clean desk'},\n    {...defaults(), title: 'clean room'},\n    {...defaults(), title: 'walk dog'},\n    {...defaults(), title: 'brush teeth'},\n    {...defaults(), title: 'do laundry'},\n    {...defaults(), title: 'fix sink'},\n  ];\n  const homeLists: List[] = [\n    {...defaults(), title: 'Backlog', items: homeItems.map((item) => item.id)},\n    {...defaults(), title: 'Todo', items: []},\n    {...defaults(), title: 'In Progress', items: []},\n    {...defaults(), title: 'Done', items: []},\n  ];\n  const homeBoard: Board = {\n    ...defaults(),\n    title: 'Home',\n    lists: homeLists.map((item) => item.id),\n  };\n\n  // category\n  const projectItems: Item[] = [\n    {...defaults(), title: 'at home', board: homeBoard.id},\n    {...defaults(), title: 'at town'},\n    {...defaults(), title: 'at work'},\n    {...defaults(), title: 'at gym'},\n    {...defaults(), title: 'app release'},\n  ];\n  const projectsList: List = {\n    ...defaults(),\n    title: 'Projects',\n    items: projectItems.map((item) => item.id),\n  };\n  const listsItems: Item[] = [\n    {...defaults(), title: 'meeting notes'},\n    {...defaults(), title: 'book summaries'},\n    {...defaults(), title: 'gift ideas'},\n    {...defaults(), title: 'checklists'},\n    {...defaults(), title: 'code languages'},\n  ];\n  const listsList: List = {\n    ...defaults(),\n    title: 'Lists',\n    items: listsItems.map((item) => item.id),\n  };\n  const categoryBoard: Board = {\n    ...defaults(),\n    title: 'Categories',\n    lists: [projectsList.id, listsList.id],\n  };\n\n  // user\n  const user: User = {\n    ...defaults(),\n    name: 'Bob Smith',\n    boards: [inboxBoard.id, categoryBoard.id],\n  };\n\n  return {\n    user,\n    boards: [homeBoard, inboxBoard, categoryBoard],\n    lists: [inboxList, ...homeLists, projectsList, listsList],\n    items: [...inboxItems, ...homeItems, ...projectItems, ...listsItems],\n  };\n};\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback} from 'react';\nimport {Button, Text} from '../../../../components';\nimport {useColor} from '../../../../hooks';\nimport {Theme, useRootDispatch} from '../../../../utils';\nimport {AlertWrapper, Card} from '../../components';\nimport {\n  createBoard,\n  createItem,\n  createList,\n  createUser,\n  removeUser,\n  setActiveUser,\n} from '../../models';\nimport {getDefaultUserTemplate} from './factory';\n\n// TODO: figure out a place for this\n// TODO: add reminders\n// TODO: add profile information\n// TODO: add payment\n\nexport const Account = memo(function Account() {\n  const color = useColor();\n  const dispatch = useRootDispatch();\n  const {goBack, navigate} = useNavigation();\n  const navBack = useCallback(() => goBack(), [goBack]);\n\n  const onLogin = useCallback(() => {\n    const {user, boards, lists, items} = getDefaultUserTemplate();\n    items.map((item) => dispatch(createItem(item)));\n    lists.map((list) => dispatch(createList(list)));\n    boards.map((board) => dispatch(createBoard(board)));\n    dispatch(createUser(user));\n    goBack();\n  }, [dispatch, goBack]);\n  const onLogout = useCallback(() => {\n    dispatch(removeUser());\n    navigate('main');\n  }, [dispatch, navigate]);\n  const onSetActive = useCallback(() => {\n    dispatch(setActiveUser(true));\n  }, [dispatch]);\n\n  const onNavToAdmin = useCallback(() => navigate('admin'), [navigate]);\n\n  return (\n    <AlertWrapper backgroundColor={color.surface} onBackgroundPress={navBack}>\n      <Card>\n        <Text\n          style={{paddingBottom: Theme.padding.p04}}\n          title=\"Profile\"\n          type=\"h3\"\n        />\n        <Text center emphasis=\"medium\" title=\"...\" type=\"h4\" />\n      </Card>\n      <Card>\n        <Text\n          style={{paddingBottom: Theme.padding.p04}}\n          title=\"Reminders\"\n          type=\"h3\"\n        />\n        <Text center emphasis=\"medium\" title=\"...\" type=\"h4\" />\n      </Card>\n      <Card>\n        <Text\n          style={{paddingBottom: Theme.padding.p04}}\n          title=\"Payment\"\n          type=\"h3\"\n        />\n        <Text center emphasis=\"medium\" title=\"...\" type=\"h4\" />\n      </Card>\n      <Card>\n        <Text\n          style={{paddingBottom: Theme.padding.p04}}\n          title=\"Feedback\"\n          type=\"h3\"\n        />\n        <Text center emphasis=\"medium\" title=\"...\" type=\"h4\" />\n      </Card>\n      <Button onPress={onLogin} title=\"login\" />\n      <Button onPress={onLogout} title=\"logout\" />\n      <Button onPress={onSetActive} title=\"set active\" />\n      <Button onPress={onNavToAdmin} title=\"go to admin\" />\n    </AlertWrapper>\n  );\n});\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback, useState} from 'react';\nimport {LayoutChangeEvent, Platform, View} from 'react-native';\nimport {HandleKeyboard, Screen, Text} from '../../../../components';\nimport {useColor} from '../../../../hooks';\nimport {useRootSelector} from '../../../../utils';\nimport {List, OrganizeButton} from '../../components';\nimport {config} from '../../configs';\nimport {getInboxListId} from '../../models';\n\nexport const Capture = memo(function Capture() {\n  const color = useColor();\n  const {navigate} = useNavigation();\n\n  const keyboardHeight = useRootSelector(\n    (state) => state.device.keyboardHeight,\n  );\n  const [dimensions, setDimensions] = useState({container: 0, button: 0});\n  const android = Platform.OS === 'android';\n\n  const listHeight =\n    keyboardHeight === 0\n      ? dimensions.container -\n        dimensions.button -\n        (android ? config.padding * 8 : config.padding * 13)\n      : dimensions.container -\n        keyboardHeight -\n        (android ? config.padding * 3 : config.padding * 7);\n\n  const listId = useRootSelector(getInboxListId);\n\n  const onOrganize = useCallback(() => undefined, []);\n\n  const onLayout = useCallback(\n    (key: string) => (event: LayoutChangeEvent) => {\n      const {height} = event.nativeEvent.layout;\n      const preventMultipleUpdates =\n        key === 'container' && dimensions.container > 0;\n      if (preventMultipleUpdates) return;\n\n      setDimensions((p) => ({...p, [key]: height}));\n    },\n    [dimensions.container],\n  );\n\n  const navToAccount = useCallback(() => navigate('account'), [navigate]);\n\n  return (\n    <Screen onRightPress={navToAccount} rightIcon=\"account\" title=\"Capture\">\n      <HandleKeyboard\n        backgroundColor={color.surface}\n        onLayout={onLayout('container')}\n        render={dimensions.container > 0}>\n        {listId ? (\n          <View style={{padding: config.padding}}>\n            <List\n              listId={listId}\n              listMaxHeight={listHeight}\n              placeholder=\"Item title...\"\n              title=\"Add item\"\n            />\n            <OrganizeButton\n              listId={listId}\n              onLayout={onLayout('button')}\n              onPress={onOrganize}\n            />\n          </View>\n        ) : (\n          <Text title=\"missing account\" />\n        )}\n      </HandleKeyboard>\n    </Screen>\n  );\n});\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback, useState} from 'react';\nimport {Keyboard, View} from 'react-native';\nimport {Button, Text, TextInput} from '../../../../components';\nimport {useColor} from '../../../../hooks';\nimport {Theme, useRootDispatch, useRootSelector} from '../../../../utils';\nimport {AlertWrapper, Card} from '../../components';\nimport {removeItem, updateItem, updateListRemoveItem} from '../../models';\n\n// TODO: update does not go to previous screen\n// TODO: delete does not go to previous screen\n// TODO: delete needs confirmation alert\n\nexport const ItemDetail = memo(function ItemDetail() {\n  const color = useColor();\n  const dispatch = useRootDispatch();\n  const {goBack} = useNavigation();\n  const navBack = useCallback(() => goBack(), [goBack]);\n  const itemId = useRootSelector((s) => s.completeItem.active);\n  const listId = useRootSelector((s) => s.completeList.active);\n  const item = useRootSelector((s) => s.completeItem.items[itemId || '']);\n\n  const [title, setTitle] = useState(item.title);\n  const [description, setDescription] = useState(item.description || '');\n\n  const onTitleChange = useCallback((v) => setTitle(v), []);\n  const onDescriptionChange = useCallback((v) => setDescription(v), []);\n\n  const onItemSave = useCallback(() => {\n    dispatch(updateItem({...item, title, description}));\n    Keyboard.dismiss();\n  }, [description, dispatch, item, title]);\n\n  const onItemDelete = useCallback(() => {\n    if (!itemId || !listId)\n      throw new Error('missing listId or itemId on item detail screen');\n    dispatch(removeItem(itemId));\n    dispatch(updateListRemoveItem({listId, itemId}));\n  }, [dispatch, itemId, listId]);\n\n  return !item ? null : (\n    <AlertWrapper backgroundColor={color.surface} onBackgroundPress={navBack}>\n      {!item ? (\n        <View>\n          <Text title=\"missing item\" />\n        </View>\n      ) : (\n        <View>\n          <Card>\n            <Text\n              style={{paddingBottom: Theme.padding.p04}}\n              title=\"Title\"\n              type=\"h3\"\n            />\n            <TextInput\n              emphasis=\"medium\"\n              flex\n              onBlur={onItemSave}\n              onChangeText={onTitleChange}\n              placeholder=\"list name...\"\n              returnKeyType=\"done\"\n              type=\"h4\"\n              value={title}\n            />\n          </Card>\n          <Card>\n            <Text\n              style={{paddingBottom: Theme.padding.p04}}\n              title=\"Description\"\n              type=\"h3\"\n            />\n            <TextInput\n              emphasis=\"medium\"\n              flex\n              onBlur={onItemSave}\n              onChangeText={onDescriptionChange}\n              placeholder=\"details...\"\n              returnKeyType=\"done\"\n              type=\"h4\"\n              value={description}\n            />\n          </Card>\n          <Card>\n            <Text\n              style={{paddingBottom: Theme.padding.p04}}\n              title=\"Reminders\"\n              type=\"h3\"\n            />\n          </Card>\n          <Card>\n            <Button center onPress={onItemDelete} title=\"delete\" />\n          </Card>\n        </View>\n      )}\n    </AlertWrapper>\n  );\n});\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback} from 'react';\nimport {Button, Carousel, Screen} from '../../../../components';\nimport {Slide} from '../../../../components/Carousel/types';\nimport {useColor} from '../../../../hooks';\n\nexport const Landing = memo(function Landing() {\n  const {navigate} = useNavigation();\n  const color = useColor();\n  const navPortfolioLogin = useCallback(() => navigate('account'), [navigate]);\n\n  const slides: Slide[] = [\n    {id: '1', text: 'hello', color: color.info},\n    {id: '2', text: 'bob', color: color.warning},\n    {id: '3', text: 'steve', color: color.success},\n    {id: '4', text: 'jill', color: color.brand},\n  ];\n\n  return (\n    <Screen title=\"Landing\">\n      <Carousel slides={slides} />\n      <Button center onPress={navPortfolioLogin} title=\"Login\" />\n    </Screen>\n  );\n});\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback, useState} from 'react';\nimport {LayoutChangeEvent, Platform} from 'react-native';\nimport {HandleKeyboard, Screen, Text} from '../../../../components';\nimport {useColor} from '../../../../hooks';\nimport {getSmallestDimension} from '../../../../models';\nimport {useRootSelector} from '../../../../utils';\nimport {Board} from '../../components';\nimport {config} from '../../configs';\n\n// TODO: figure out centering of list\n\nexport const Project = memo(function Project() {\n  const {goBack} = useNavigation();\n  const color = useColor();\n  const screenWidth = useRootSelector(getSmallestDimension);\n  const boardId = useRootSelector((s) => s.completeBoard.active);\n  const listWidth = screenWidth * 0.7;\n  const [container, setContainer] = useState(0);\n  const android = Platform.OS === 'android';\n  const keyboardHeight = useRootSelector(\n    (state) => state.device.keyboardHeight,\n  );\n\n  const listMaxHeight =\n    keyboardHeight === 0\n      ? container - (android ? config.padding * 8 : config.padding * 12)\n      : container -\n        keyboardHeight -\n        (android ? config.padding * 3 : config.padding * 7);\n\n  const onLayout = useCallback(\n    (event: LayoutChangeEvent) => {\n      const {height} = event.nativeEvent.layout;\n      if (container > 0) return;\n\n      setContainer(height);\n    },\n    [container],\n  );\n\n  const navBack = useCallback(() => {\n    goBack();\n  }, [goBack]);\n\n  return (\n    <Screen onLeftPress={navBack} title=\"Focus\">\n      {!boardId ? (\n        <Text title=\"missing board\" />\n      ) : (\n        <HandleKeyboard\n          backgroundColor={color.surface}\n          onLayout={onLayout}\n          render={container > 0}>\n          <Board\n            boardId={boardId}\n            listMaxHeight={listMaxHeight}\n            listWidth={listWidth}\n          />\n        </HandleKeyboard>\n      )}\n    </Screen>\n  );\n});\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback, useState} from 'react';\nimport {LayoutChangeEvent, View} from 'react-native';\nimport {HandleKeyboard, Screen} from '../../../../components';\nimport {useColor} from '../../../../hooks';\nimport {useRootSelector} from '../../../../utils';\nimport {List} from '../../components';\nimport {config} from '../../configs';\nimport {getCategoryListIds} from '../../models';\n\n// TODO: add journal\n// TODO: add historical data\n// TODO: add purpose\n// TODO: add goals\n\n// TODO: render as <Board />\n\nexport const Projects = memo(function Projects() {\n  const color = useColor();\n  const {navigate} = useNavigation();\n  const listIds = useRootSelector(getCategoryListIds);\n  const [dimensions, setDimensions] = useState(0);\n\n  const onLayout = useCallback(\n    (event: LayoutChangeEvent) => {\n      const {height} = event.nativeEvent.layout;\n      if (dimensions > 0) return;\n\n      setDimensions(height);\n    },\n    [dimensions],\n  );\n\n  const maxHeight = dimensions / 2 - config.padding * 10;\n\n  const navToAccount = useCallback(() => navigate('account'), [navigate]);\n\n  return (\n    <Screen onRightPress={navToAccount} rightIcon=\"account\" title=\"Projects\">\n      <HandleKeyboard\n        backgroundColor={color.surface}\n        onLayout={onLayout}\n        render={dimensions > 0}>\n        <View style={{padding: config.padding}}>\n          {listIds.map((listId) => (\n            <List\n              key={listId}\n              listId={listId}\n              listMaxHeight={maxHeight}\n              placeholder=\"List title...\"\n              title=\"Add list\"\n            />\n          ))}\n        </View>\n      </HandleKeyboard>\n    </Screen>\n  );\n});\n","import {scaleLinear, scaleTime} from 'd3-scale';\nimport * as shape from 'd3-shape';\nimport * as React from 'react';\nimport {StyleSheet, View} from 'react-native';\nimport Svg, {Defs, LinearGradient, Path, Stop} from 'react-native-svg';\n\ninterface DataPoint {\n  date: number;\n  value: number;\n}\n\ninterface GraphProps {\n  data: DataPoint[];\n  width: number;\n  height: number;\n}\n\nconst strokeWidth = 4;\nconst padding = strokeWidth / 2;\nconst getDomain = (domain: number[]) => [\n  Math.min(...domain),\n  Math.max(...domain),\n];\n\nexport const Graph = ({\n  data,\n  width,\n  height,\n}: GraphProps): React.ReactElement => {\n  const scaleX = scaleTime()\n    .domain(getDomain(data.map((d) => d.date)))\n    .range([0, width]);\n  const scaleY = scaleLinear()\n    .domain(getDomain(data.map((d) => d.value)))\n    .range([height - padding, padding]);\n  const d = shape\n    .line<DataPoint>()\n    .x((p) => scaleX(p.date))\n    .y((p) => scaleY(p.value))\n    .curve(shape.curveBasis)(data) as string;\n  return (\n    <View style={{width, height}}>\n      <Svg style={StyleSheet.absoluteFill}>\n        <Defs>\n          <LinearGradient id=\"gradient\" x1=\"50%\" x2=\"50%\" y1=\"0%\" y2=\"100%\">\n            <Stop offset=\"0%\" stopColor=\"#cee3f9\" />\n            <Stop offset=\"80%\" stopColor=\"#ddedfa\" />\n            <Stop offset=\"100%\" stopColor=\"#feffff\" />\n          </LinearGradient>\n        </Defs>\n        <Path\n          d={`${d}L ${width} ${height} L 0 ${height}`}\n          fill=\"url(#gradient)\"\n        />\n        <Path fill=\"transparent\" stroke=\"#3977e3\" {...{d, strokeWidth}} />\n      </Svg>\n    </View>\n  );\n};\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback} from 'react';\nimport {Dimensions, ScrollView, View} from 'react-native';\nimport {Calendar, Screen, Text} from '../../../../components';\nimport {useColor} from '../../../../hooks';\nimport {Theme} from '../../../../utils';\nimport {Card} from '../../components/Card';\nimport {config} from '../../configs';\nimport {Graph} from './Graph';\n\n// TODO: add journal\n// TODO: add historical data\n// TODO: add purpose\n// TODO: add goals\n\ntype TitleProps = {name: string};\n\nconst Title = ({name}: TitleProps) => {\n  return (\n    <Text\n      emphasis=\"high\"\n      style={{paddingBottom: config.padding}}\n      title={name}\n      type=\"h4\"\n    />\n  );\n};\n\nconst data = [\n  {date: new Date(2018, 9, 1).getTime(), value: 0},\n  {date: new Date(2018, 9, 16).getTime(), value: 0},\n  {date: new Date(2018, 9, 17).getTime(), value: 200},\n  {date: new Date(2018, 10, 1).getTime(), value: 200},\n  {date: new Date(2018, 10, 2).getTime(), value: 300},\n  {date: new Date(2018, 10, 5).getTime(), value: 300},\n];\n\nexport const Reflect = memo(function Reflect() {\n  const color = useColor();\n  const {navigate} = useNavigation();\n  const navToAccount = useCallback(() => navigate('account'), [navigate]);\n\n  return (\n    <Screen onRightPress={navToAccount} rightIcon=\"account\" title=\"Reflect\">\n      <ScrollView\n        contentContainerStyle={{\n          padding: Theme.padding.p04,\n          backgroundColor: color.surface,\n        }}\n        style={{backgroundColor: color.surface}}>\n        <Card>\n          <View>\n            <Title name=\"Purpose\" />\n            <Text title=\"Make a significant positive difference in global productivity\" />\n          </View>\n        </Card>\n        <Card>\n          <View>\n            <Title name=\"Goals\" />\n            <Text title=\"Top 3\" />\n            <Text title=\"Deep Focus\" />\n            <Text title=\"Smile\" />\n            <Text title=\"1 More Rep\" />\n          </View>\n        </Card>\n        <Card>\n          <View>\n            <Title name=\"Review (Progress)\" />\n            <View\n              style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>\n              <Graph\n                data={data}\n                height={200}\n                width={Dimensions.get('window').width - config.padding * 4}\n              />\n            </View>\n          </View>\n        </Card>\n        <Card>\n          <View>\n            <Title name=\"Reflect (Journal)\" />\n            <Calendar />\n          </View>\n        </Card>\n      </ScrollView>\n    </Screen>\n  );\n});\n","import {\n  BottomTabBarOptions,\n  createBottomTabNavigator,\n} from '@react-navigation/bottom-tabs';\nimport {Route} from '@react-navigation/native';\nimport {\n  createStackNavigator,\n  StackNavigationOptions,\n} from '@react-navigation/stack';\nimport React, {memo, useCallback} from 'react';\nimport {Alert, Icon, Notification} from '../../components';\nimport {useColor} from '../../hooks';\nimport {rootMode, rootScreenOptions} from '../../providers/Navigation/configs';\nimport {useRootSelector} from '../../utils';\nimport {\n  Account,\n  Capture,\n  ItemDetail,\n  Landing,\n  Project,\n  Projects,\n  Reflect,\n} from './screens';\n\nconst noHeader: StackNavigationOptions = {headerShown: false};\nconst RootTab = createBottomTabNavigator();\nconst RootStack = createStackNavigator();\nconst ProjectsStack = createStackNavigator();\n\ntype Tabs = 'capture' | 'focus' | 'reflect';\ntype TabIcons = {\n  [key in Tabs]: {focused: string; unfocused: string};\n};\n\nconst tabIcons: TabIcons = {\n  capture: {\n    focused: 'pencil-plus-outline',\n    unfocused: 'pencil-plus-outline',\n  },\n  focus: {\n    focused: 'checkbox-multiple-marked-outline',\n    unfocused: 'checkbox-multiple-marked-outline',\n  },\n  reflect: {focused: 'finance', unfocused: 'finance'},\n};\n\ntype ScreenOptionsProps = {\n  route: Route<string, Record<string, unknown> | undefined>;\n};\n\ntype TabBarIconProps = {\n  focused: boolean;\n  size: number;\n};\n\nconst Focus = () => {\n  return (\n    <ProjectsStack.Navigator screenOptions={noHeader}>\n      <ProjectsStack.Screen component={Projects} name=\"boards\" />\n      <ProjectsStack.Screen component={Project} name=\"board\" />\n    </ProjectsStack.Navigator>\n  );\n};\n\nconst Tabs = () => {\n  const color = useColor();\n  const tabBarOptions: BottomTabBarOptions = {\n    keyboardHidesTabBar: true,\n    activeTintColor: color.text,\n    inactiveTintColor: color.secondary,\n    showLabel: false,\n  };\n  const screenOptions = useCallback(\n    ({route}: ScreenOptionsProps) => ({\n      tabBarIcon: function tabBarIcon({focused, size}: TabBarIconProps) {\n        const focus = focused ? 'focused' : 'unfocused';\n        const iconColor = focused ? color.text : color.secondary;\n        const name = (tabIcons as any)[route.name][focus];\n        return <Icon color={iconColor} name={name} size={size} />;\n      },\n    }),\n    [color],\n  );\n\n  return (\n    <RootTab.Navigator\n      screenOptions={screenOptions as any}\n      tabBarOptions={tabBarOptions}>\n      <RootTab.Screen component={Capture} name=\"capture\" />\n      <RootTab.Screen component={Focus} name=\"focus\" />\n      <RootTab.Screen component={Reflect} name=\"reflect\" />\n    </RootTab.Navigator>\n  );\n};\n\nexport default memo(function Complete() {\n  const user = useRootSelector((s) => s.completeUser);\n  const Main = user ? Tabs : Landing;\n  return (\n    <RootStack.Navigator mode={rootMode} screenOptions={rootScreenOptions}>\n      <RootStack.Screen component={Main} name=\"main\" />\n      <RootStack.Screen component={Account} name=\"account\" />\n      <RootStack.Screen component={Notification} name=\"notification\" />\n      <RootStack.Screen component={Alert} name=\"alert\" />\n      <RootStack.Screen component={ItemDetail} name=\"item-detail\" />\n    </RootStack.Navigator>\n  );\n});\n\n/*\n\n# Data\n\n- user\n-> collections [projects, lists]\n-> boards [home, work, town] | [meeting notes, book summaries, checklists]\n-> lists [backlog, todo, in progress, done] | [draft, final]\n-> item [find comb, clear emails, daily standup]\n\n# Screens\n\n## Capture\n\n### Inbox (list -> item -> details)\n- \"add grey list\" -> @app\n- \"find comb\" -> @home\n- \"clear emails\" -> @work\n- \"put $20 in phone\" -> @town\n- \"drink water\" -> @after-waking-up\n- \"intensity + focus = deep work\" -> book summaries\n\n## Organize\n\n### Projects (item -> lists -> item -> details )\n- @home -> (backlog, todo, in progress, done xx, done xx)\n- @town\n- @work\n- @gym\n- @app\n\n### Lists (item -> list -> item -> detail)\n- meeting notes\n - one-on-one\n - daily standup\n- book summaries\n - the one thing\n - getting things done\n - eat that frog\n- gift ideas\n - mom\n - dad\n - girlfriend\n- checklists\n - after waking up\n - after entering bathroom\n\n## Reflect\n\n### Purpose\n\n### Goals\n\n### Review (Progress)\n\n### Reflect (Journal)\n\n## Account\n\n### Profile\n\n### Notifications\n\n### Payment\n*/\n"],"sourceRoot":""}