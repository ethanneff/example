{"version":3,"sources":["apps/Debug/screens/ImageCollection/AsyncImage.tsx","apps/Debug/screens/ImageCollection/index.tsx"],"names":["AsyncImage","styles","StyleSheet","create","indicatorOverlay","justifyContent","position","imageAnimated","Animated","Value","indicatorAnimated","onImageLoad","parallel","timing","toValue","useNativeDriver","start","this","props","uri","height","width","color","size","containerStyle","imageStyle","opacity","indicatorStyle","View","style","Image","source","onLoad","ActivityIndicator","React","PureComponent","Container","data","Math","random","numColumns","infiniteScrollThreshold","columnWidth","Dimensions","get","imageUrl","nav","to","navigate","fetchMore","push","renderImage","onLeftPress","FlatList","keyExtractor","toString","onEndReached","onEndReachedThreshold","renderItem","mapDispatchToProps","connect"],"mappings":"qPAWaA,EAAb,2MACUC,OAASC,IAAWC,OAAO,CACjCC,iBAAkB,CAChBC,eAAgB,SAChBC,SAAU,cAJhB,EAOUC,cAAgB,IAAIC,IAASC,MAAM,GAP7C,EAQUC,kBAAoB,IAAIF,IAASC,MAAM,GARjD,EAiCUE,YAAc,WACpBH,IAASI,SAAS,CAChBJ,IAASK,OAAO,EAAKH,kBAAmB,CACtCI,QAAS,EACTC,iBAAiB,IAEnBP,IAASK,OAAO,EAAKN,cAAe,CAClCO,QAAS,EACTC,iBAAiB,MAElBC,SA3CP,wEAUmB,IAAD,EACkDC,KAAKC,MAA7DC,EADM,EACNA,IAAKC,EADC,EACDA,OAAQC,EADP,EACOA,MADP,IACcC,aADd,MACsB,QADtB,MAC+BC,YAD/B,MACsC,QADtC,EAERC,EAAiB,CAAEH,QAAOD,UAC1BK,EAAa,CAACD,EAAgB,CAAEE,QAAST,KAAKV,gBAC9CoB,EAAiB,CACrBH,EACA,CAAEE,QAAST,KAAKP,mBAChBO,KAAKhB,OAAOG,kBAEd,OACE,kBAACwB,EAAA,EAAD,CAAMC,MAAOL,GACX,kBAAChB,EAAA,EAASsB,MAAV,CACEC,OAAQ,CAAEZ,OACVU,MAAOJ,EACPO,OAAQf,KAAKN,cAEf,kBAACH,EAAA,EAASoB,KAAV,CAAeC,MAAOF,GACpB,kBAACM,EAAA,EAAD,CAAmBV,KAAMA,EAAMD,MAAOA,UA3BhD,GAAgCY,IAAMC,eCEhCC,E,2MACIC,KAAiB,CACvBC,KAAKC,SACLD,KAAKC,SACLD,KAAKC,SACLD,KAAKC,SACLD,KAAKC,SACLD,KAAKC,SACLD,KAAKC,SACLD,KAAKC,U,EAECC,WAAa,E,EACbC,wBAA0B,G,EAC1BC,YAAcC,IAAWC,IAAI,UAAUvB,MAAQ,EAAKmB,W,EACpDK,S,gCAAoC,EAAKH,Y,YAAe,EAAKA,a,EAgB7DI,IAAM,SAACC,GAAD,OAA0B,kBAAM,EAAK7B,MAAM8B,SAASD,K,EAE1DE,UAAY,WAClB,EAAKZ,KAAKa,KAAKZ,KAAKC,UACpB,EAAKF,KAAKa,KAAKZ,KAAKC,UACpB,EAAKF,KAAKa,KAAKZ,KAAKC,UACpB,EAAKF,KAAKa,KAAKZ,KAAKC,UACpB,EAAKF,KAAKa,KAAKZ,KAAKC,W,EAGdY,YAAc,kBACpB,kBAAC,EAAD,CACEhC,IAAK,EAAK0B,SACVxB,MAAO,EAAKqB,YACZtB,OAAQ,EAAKsB,e,wEA5Bf,OACE,kBAAC,IAAD,CAAQU,YAAanC,KAAK6B,IAAI,UAC5B,kBAACO,EAAA,EAAD,CACEC,aAAc,SAAAjB,GAAI,OAAIA,EAAKkB,YAC3BlB,KAAMpB,KAAKoB,KACXmB,aAAcvC,KAAKgC,UACnBQ,sBAAuBxC,KAAKwB,wBAC5BD,WAAYvB,KAAKuB,WACjBkB,WAAYzC,KAAKkC,mB,GAxBHjB,IAAMC,eAiDxBwB,EAAoC,CAAEX,cAE7BY,sBACb,KACAD,EAFaC,CAGbxB","file":"static/js/20.fd97a8f0.chunk.js","sourcesContent":["import React from \"react\";\nimport { ActivityIndicator, Animated, StyleSheet, View } from \"react-native\";\n\ninterface Props {\n  uri: string;\n  height: number;\n  width: number;\n  color?: string;\n  size?: number | \"small\" | \"large\";\n}\n\nexport class AsyncImage extends React.PureComponent<Props> {\n  private styles = StyleSheet.create({\n    indicatorOverlay: {\n      justifyContent: \"center\",\n      position: \"absolute\"\n    }\n  });\n  private imageAnimated = new Animated.Value(0);\n  private indicatorAnimated = new Animated.Value(1);\n\n  public render() {\n    const { uri, height, width, color = \"black\", size = \"small\" } = this.props;\n    const containerStyle = { width, height };\n    const imageStyle = [containerStyle, { opacity: this.imageAnimated }];\n    const indicatorStyle = [\n      containerStyle,\n      { opacity: this.indicatorAnimated },\n      this.styles.indicatorOverlay\n    ];\n    return (\n      <View style={containerStyle}>\n        <Animated.Image\n          source={{ uri }}\n          style={imageStyle}\n          onLoad={this.onImageLoad}\n        />\n        <Animated.View style={indicatorStyle}>\n          <ActivityIndicator size={size} color={color} />\n        </Animated.View>\n      </View>\n    );\n  }\n\n  private onImageLoad = () => {\n    Animated.parallel([\n      Animated.timing(this.indicatorAnimated, {\n        toValue: 0,\n        useNativeDriver: true\n      }),\n      Animated.timing(this.imageAnimated, {\n        toValue: 1,\n        useNativeDriver: true\n      })\n    ]).start();\n  };\n}\n","import React from \"react\";\nimport { Dimensions, FlatList } from \"react-native\";\nimport { connect } from \"react-redux\";\nimport { Screen } from \"../../../../components\";\nimport { navigate, NavigationScreen } from \"../../../../models\";\nimport { AsyncImage } from \"./AsyncImage\";\n\ninterface DispatchProps {\n  navigate: typeof navigate;\n}\n\ntype Props = DispatchProps;\n\nclass Container extends React.PureComponent<Props> {\n  private data: number[] = [\n    Math.random(),\n    Math.random(),\n    Math.random(),\n    Math.random(),\n    Math.random(),\n    Math.random(),\n    Math.random(),\n    Math.random()\n  ];\n  private numColumns = 3;\n  private infiniteScrollThreshold = 0.3;\n  private columnWidth = Dimensions.get(\"window\").width / this.numColumns;\n  private imageUrl = `http://lorempixel.com/${this.columnWidth}/${this.columnWidth}`;\n  public render() {\n    return (\n      <Screen onLeftPress={this.nav(\"debug\")}>\n        <FlatList\n          keyExtractor={data => data.toString()}\n          data={this.data}\n          onEndReached={this.fetchMore}\n          onEndReachedThreshold={this.infiniteScrollThreshold}\n          numColumns={this.numColumns}\n          renderItem={this.renderImage}\n        />\n      </Screen>\n    );\n  }\n\n  private nav = (to: NavigationScreen) => () => this.props.navigate(to);\n\n  private fetchMore = () => {\n    this.data.push(Math.random());\n    this.data.push(Math.random());\n    this.data.push(Math.random());\n    this.data.push(Math.random());\n    this.data.push(Math.random());\n  };\n\n  private renderImage = () => (\n    <AsyncImage\n      uri={this.imageUrl}\n      width={this.columnWidth}\n      height={this.columnWidth}\n    />\n  );\n}\n\nconst mapDispatchToProps: DispatchProps = { navigate };\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(Container);\n"],"sourceRoot":""}