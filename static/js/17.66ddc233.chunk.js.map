{"version":3,"sources":["apps/Checklists/screens/List/index.tsx"],"names":["memo","nav","useNav","color","useColor","dispatch","useRootDispatch","items","useRootSelector","getCurrentActiveChecklistItemsOrderByCreatedAt","handleRemove","useCallback","id","removeChecklistItem","handleToggle","toggleChecklistItemComplete","handleEdit","setActiveChecklistItem","navigate","renderItem","item","style","flexDirection","label","icon","iconColor","success","danger","onPress","warning","primary","active","lowercase","title","name","textStyle","completed","text","keyExtractor","onLeftPress","to","gutter","data","fab","right","contained","background"],"mappings":"qGAAA,mFAaeA,0BAAK,WAClB,IAAMC,EAAMC,cACNC,EAAQC,cACRC,EAAWC,cACXC,EAAQC,YAAgBC,KAExBC,EAAeC,uBACnB,SAACC,GAAD,OAAgB,kBAAMP,EAASQ,YAAoBD,OACnD,CAACP,IAEGS,EAAeH,uBACnB,SAACC,GAAD,OAAgB,kBAAMP,EAASU,YAA4BH,OAC3D,CAACP,IAEGW,EAAaL,uBACjB,SAACC,GAAD,OAAgB,WACdP,EAASY,YAAuBL,IAChCP,EAASa,YAAS,4BAEpB,CAACb,IAGGc,EAAaR,uBACjB,gBAAGS,EAAH,EAAGA,KAAH,OACE,kBAAC,IAAD,CAAMC,MAAO,CAAEC,cAAe,QAC5B,kBAAC,IAAD,CAAQC,OAAK,EAACC,KAAK,yBAAyBC,UAAWtB,EAAMuB,UAC7D,kBAAC,IAAD,CACEH,OAAK,EACLC,KAAK,eACLC,UAAWtB,EAAMwB,OACjBC,QAASlB,EAAaU,EAAKR,MAE7B,kBAAC,IAAD,CACEW,OAAK,EACLE,UAAWtB,EAAM0B,QACjBL,KAAK,QACLI,QAASd,EAAaM,EAAKR,MAE7B,kBAAC,IAAD,CACEW,OAAK,EACLO,QAASV,EAAKW,OACdC,WAAS,EACTC,MAAOb,EAAKc,KACZC,UAAW,CACThC,MAAOiB,EAAKgB,UAAYjC,EAAMwB,OAASxB,EAAMkC,MAE/CT,QAASZ,EAAWI,EAAKR,SAI/B,CACET,EAAMwB,OACNxB,EAAMuB,QACNvB,EAAMkC,KACNlC,EAAM0B,QACNb,EACAN,EACAI,IAGEwB,EAAe3B,uBAAY,SAAAS,GAAI,OAAIA,EAAKR,KAAI,IAElD,OACE,kBAAC,IAAD,CAAQ2B,YAAatC,EAAIuC,GAAG,cAAeP,MAAM,YAAYQ,QAAM,GACjE,kBAAC,IAAD,CACEH,aAAcA,EACdI,KAAMnC,EACNY,WAAYA,IAEd,kBAAC,IAAD,CACEwB,KAAG,EACHC,OAAK,EACLC,WAAS,EACTrB,KAAK,OACLC,UAAWtB,EAAM2C,WACjBlB,QAAS3B,EAAIuC,GAAG","file":"static/js/17.66ddc233.chunk.js","sourcesContent":["import React, { memo, useCallback } from \"react\";\nimport { FlatList, View } from \"react-native\";\nimport { Button, Screen } from \"../../../../components\";\nimport { useRootDispatch, useRootSelector } from \"../../../../utils\";\nimport {\n  removeChecklistItem,\n  toggleChecklistItemComplete,\n  getCurrentActiveChecklistItemsOrderByCreatedAt,\n  setActiveChecklistItem\n} from \"../../models\";\nimport { useNav, useColor } from \"../../../../hooks\";\nimport { navigate } from \"../../../../models\";\n\nexport default memo(function Checklist() {\n  const nav = useNav();\n  const color = useColor();\n  const dispatch = useRootDispatch();\n  const items = useRootSelector(getCurrentActiveChecklistItemsOrderByCreatedAt);\n\n  const handleRemove = useCallback(\n    (id: string) => () => dispatch(removeChecklistItem(id)),\n    [dispatch]\n  );\n  const handleToggle = useCallback(\n    (id: string) => () => dispatch(toggleChecklistItemComplete(id)),\n    [dispatch]\n  );\n  const handleEdit = useCallback(\n    (id: string) => () => {\n      dispatch(setActiveChecklistItem(id));\n      dispatch(navigate(\"checklistsItemUpdate\"));\n    },\n    [dispatch]\n  );\n\n  const renderItem = useCallback(\n    ({ item }) => \n      <View style={{ flexDirection: \"row\" }}>\n        <Button label icon=\"checkbox-marked-circle\" iconColor={color.success} />\n        <Button\n          label\n          icon=\"close-circle\"\n          iconColor={color.danger}\n          onPress={handleRemove(item.id)}\n        />\n        <Button\n          label\n          iconColor={color.warning}\n          icon=\"clock\"\n          onPress={handleToggle(item.id)}\n        />\n        <Button\n          label\n          primary={item.active}\n          lowercase\n          title={item.name}\n          textStyle={{\n            color: item.completed ? color.danger : color.text\n          }}\n          onPress={handleEdit(item.id)}\n        />\n      </View>\n    ,\n    [\n      color.danger,\n      color.success,\n      color.text,\n      color.warning,\n      handleEdit,\n      handleRemove,\n      handleToggle\n    ]\n  );\n  const keyExtractor = useCallback(item => item.id, []);\n\n  return (\n    <Screen onLeftPress={nav.to(\"checklists\")} title=\"Checklist\" gutter>\n      <FlatList\n        keyExtractor={keyExtractor}\n        data={items}\n        renderItem={renderItem}\n      />\n      <Button\n        fab\n        right\n        contained\n        icon=\"plus\"\n        iconColor={color.background}\n        onPress={nav.to(\"checklistsItemCreate\")}\n      />\n    </Screen>\n  );\n});\n"],"sourceRoot":""}