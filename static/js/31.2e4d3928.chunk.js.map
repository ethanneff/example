{"version":3,"sources":["apps/Playground/Bejeweled/index.tsx"],"names":["getInitialState","size","gems","Array","fill","map","max","length","Math","floor","random","initialSelected","x","y","memo","nav","useNav","dimension","useRootSelector","getSmallestDimension","color","useColor","styles","StyleSheet","create","container","backgroundColor","background","key","primary","brand","success","info","warning","danger","useState","board","setBoard","selected","setSelected","onPress","sum","abs","prev","temp","onLeftPress","to","title","style","col","flexDirection","gem","width","height","flex","borderColor","text","borderWidth"],"mappings":"gMAWMA,EAAkB,SAACC,EAAcC,GACrC,OAAOC,MAAMF,GACVG,KAAK,GACLC,KAAI,kBACHF,MAAMF,GACHG,KAAK,GACLC,KAAI,kBAAMH,GAVAI,EAUeJ,EAAKK,OAT9BC,KAAKC,MAAMD,KAAKE,SAAWJ,KADlB,IAACA,SAqBbK,EAAkB,CAACC,GAAI,GAAIC,GAAI,IACtBC,0BAAK,WAClB,IAAMC,EAAMC,cACNC,EAAYC,YAAgBC,KAE5BC,EAAQC,cACRC,EAASC,IAAWC,OAAO,CAC/BC,UAAW,CACTC,gBAAiBN,EAAMO,cAKrB1B,EAAOgB,EAAY,EACnBf,EAAc,CAClB,CAAC0B,IAAK,UAAWR,MAAOA,EAAMS,SAC9B,CAACD,IAAK,QAASR,MAAOA,EAAMU,OAC5B,CAACF,IAAK,UAAWR,MAAOA,EAAMW,SAC9B,CAACH,IAAK,OAAQR,MAAOA,EAAMY,MAC3B,CAACJ,IAAK,UAAWR,MAAOA,EAAMa,SAC9B,CAACL,IAAK,SAAUR,MAAOA,EAAMc,SAnBkB,EAsBvBC,oBAAS,kBAAMnC,EAX3B,EAWkDE,MAtBf,mBAsB1CkC,EAtB0C,KAsBnCC,EAtBmC,OAuBjBF,mBAASxB,GAvBQ,mBAuB1C2B,EAvB0C,KAuBhCC,EAvBgC,KAyB3CC,EAAU,SAAC5B,EAAWC,GAAZ,OAA0B,WACxC,IAAM4B,EAAMjC,KAAKkC,IAAI9B,EAAI0B,EAAS1B,GAAKJ,KAAKkC,IAAI7B,EAAIyB,EAASzB,GACjD,IAAR4B,EACFF,EAAY5B,GACK,IAAR8B,GACTJ,GAAS,SAACM,GACR,IAAMC,EAAOD,EAAK/B,GAAGC,GAGrB,OAFA8B,EAAK/B,GAAGC,GAAK8B,EAAKL,EAAS1B,GAAG0B,EAASzB,GACvC8B,EAAKL,EAAS1B,GAAG0B,EAASzB,GAAK+B,EACxB,YAAID,MAEbJ,EAAY5B,IAEZ4B,EAAY,CAAC3B,IAAGC,QAIpB,OACE,kBAAC,IAAD,CAAQgC,YAAa9B,EAAI+B,GAAG,cAAeC,MAAM,aAC/C,kBAAC,IAAD,CAAMC,MAAO1B,EAAOG,WACjBW,EAAM/B,KAAI,SAAC4C,EAAKrC,GAAN,OACT,kBAAC,IAAD,CAAMgB,IAAG,UAAKhB,GAAL,OAASqC,EAAI,GAAGrB,KAAOoB,MAAO,CAACE,cAAe,QACpDD,EAAI5C,KAAI,SAAC8C,EAAKtC,GAAN,OACP,kBAAC,IAAD,CACEe,IAAG,UAAKhB,GAAL,OAASC,GAAT,OAAasC,EAAIvB,KACpBoB,MAAO,CACLI,MAAOnD,EACPoD,OAAQpD,IAEV,kBAAC,IAAD,CACEuC,QAASA,EAAQ5B,EAAGC,GACpBmC,MAAO,CACLM,KAAM,EACNC,YACEjB,EAAS1B,IAAMA,GAAK0B,EAASzB,IAAMA,EAC/BO,EAAMoC,KACNpC,EAAMO,WACZ8B,YAAa,EACb/B,gBAAiByB,EAAI/B","file":"static/js/31.2e4d3928.chunk.js","sourcesContent":["import React, {memo, useState} from 'react';\nimport {StyleSheet, View} from 'react-native';\nimport {Screen, TouchableOpacity} from '../../../components';\nimport {useColor, useNav} from '../../../hooks';\nimport {useRootSelector} from '../../../utils';\nimport {getSmallestDimension} from '../../../models';\n\nconst getRandom = (max: number) => {\n  return Math.floor(Math.random() * max);\n};\n\nconst getInitialState = (size: number, gems: Gem[]) => {\n  return Array(size)\n    .fill(0)\n    .map(() =>\n      Array(size)\n        .fill(0)\n        .map(() => gems[getRandom(gems.length)]),\n    );\n};\n\ntype Gem = {\n  key: string;\n  color: string;\n};\n\nexport type States = 'idle' | 'swap' | 'validate' | 'swap back' | 'fill gems';\n\nconst initialSelected = {x: -10, y: -10};\nexport default memo(function PlaygroundBejeweled() {\n  const nav = useNav();\n  const dimension = useRootSelector(getSmallestDimension);\n\n  const color = useColor();\n  const styles = StyleSheet.create({\n    container: {\n      backgroundColor: color.background,\n    },\n  });\n\n  const count = 8;\n  const size = dimension / 8;\n  const gems: Gem[] = [\n    {key: 'primary', color: color.primary},\n    {key: 'brand', color: color.brand},\n    {key: 'success', color: color.success},\n    {key: 'info', color: color.info},\n    {key: 'warning', color: color.warning},\n    {key: 'danger', color: color.danger},\n  ];\n\n  const [board, setBoard] = useState(() => getInitialState(count, gems));\n  const [selected, setSelected] = useState(initialSelected);\n\n  const onPress = (x: number, y: number) => () => {\n    const sum = Math.abs(x - selected.x) + Math.abs(y - selected.y);\n    if (sum === 0) {\n      setSelected(initialSelected);\n    } else if (sum === 1) {\n      setBoard((prev) => {\n        const temp = prev[x][y];\n        prev[x][y] = prev[selected.x][selected.y];\n        prev[selected.x][selected.y] = temp;\n        return [...prev];\n      });\n      setSelected(initialSelected);\n    } else {\n      setSelected({x, y});\n    }\n  };\n\n  return (\n    <Screen onLeftPress={nav.to('playground')} title=\"Bejeweled\">\n      <View style={styles.container}>\n        {board.map((col, x) => (\n          <View key={`${x}${col[0].key}`} style={{flexDirection: 'row'}}>\n            {col.map((gem, y) => (\n              <View\n                key={`${x}${y}${gem.key}`}\n                style={{\n                  width: size,\n                  height: size,\n                }}>\n                <TouchableOpacity\n                  onPress={onPress(x, y)}\n                  style={{\n                    flex: 1,\n                    borderColor:\n                      selected.x === x && selected.y === y\n                        ? color.text\n                        : color.background,\n                    borderWidth: 4,\n                    backgroundColor: gem.color,\n                  }}\n                />\n              </View>\n            ))}\n          </View>\n        ))}\n      </View>\n    </Screen>\n  );\n});\n"],"sourceRoot":""}