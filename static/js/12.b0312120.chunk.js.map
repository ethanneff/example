{"version":3,"sources":["assets/placeholder.png","apps/Playground/screens/DarkMode/index.tsx"],"names":["module","exports","image","require","cards","title","value","target","chart","button","memo","dispatch","useRootDispatch","themes","Object","values","ColorTheme","color","useColor","nav","useNav","currentTheme","useRootSelector","state","theme","currentColor","useState","elevation","setElevation","columns","getLandscapeOrientation","onPress","useCallback","renderItem","item","index","key","type","style","marginTop","Theme","padding","p02","source","height","resizeMode","width","emphasis","buttonStyle","onLeftPress","to","p04","flexDirection","alignItems","map","changeTheme","minimumTrackTintColor","primary","onValueChange","step","maximumValue","minimumValue","center","data","numColumns"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,yC,qHC2BrCC,EAAQC,EAAQ,KAChBC,EAAgB,CACpB,CACEC,MAAO,YACPC,MAAO,UAET,CACEC,OAAQ,iBACRF,MAAO,aACPC,MAAO,OAET,CACEE,MAAON,EACPK,OAAQ,kBACRF,MAAO,aACPC,MAAO,UAET,CACEC,OAAQ,gBACRF,MAAO,QACPC,MAAO,SACPE,MAAON,GAET,CACEO,OAAQ,OACRJ,MAAO,QACPC,MAAO,UAET,CACEC,OAAQ,mBACRF,MAAO,cACPC,MAAO,UAET,CACED,MAAO,WACPC,MAAO,UAET,CACED,MAAO,cACPC,MAAO,QAIII,0BAAK,WAClB,IAAMC,EAAWC,cACXC,EAASC,OAAOC,OAAOC,KACvBC,EAAQC,cACRC,EAAMC,cACNC,EAAeC,aAAgB,SAACC,GAAD,OAAWA,EAAMC,MAAMC,gBALtB,EAOJC,mBAAS,GAPL,mBAO/BC,EAP+B,KAOpBC,EAPoB,KAUhCC,EADYP,YAAgBQ,KACN,EAAI,EAC1BC,EAAUC,uBAAY,cAAiB,IAEvCC,EAAaD,uBACjB,gBAAEE,EAAF,EAAEA,KAAMC,EAAR,EAAQA,MAAR,OACE,kBAAC,IAAD,CAAMR,UAAWA,EAAWI,QAASA,EAASK,IAAKD,GACjD,kBAAC,IAAD,CAAM9B,MAAO6B,EAAK7B,MAAOgC,KAAK,aAC9B,kBAAC,IAAD,CACEhC,MAAO6B,EAAK5B,MACZ+B,KAAK,KACLC,MAAO,CAACC,UAAWC,IAAMC,QAAQC,OAElCR,EAAK3B,QACJ,kBAAC,IAAD,CACEF,MAAO6B,EAAK3B,OACZ8B,KAAK,QACLC,MAAO,CAACC,UAAWC,IAAMC,QAAQC,OAGpCR,EAAK1B,OACJ,kBAAC,IAAD,CACEmC,OAAQT,EAAK1B,MACb8B,MAAO,CACLM,OAAQ,GACRL,UAAWC,IAAMC,QAAQC,IACzBG,WAAY,QACZC,MAAO,UAIZZ,EAAKzB,QACJ,kBAAC,IAAD,CACEQ,MAAM,UACN8B,SAAS,OACT1C,MAAO6B,EAAKzB,OACZuC,YAAa,CAACT,UAAWC,IAAMC,QAAQC,WAK/C,CAACf,EAAWI,IAGd,OACE,kBAAC,IAAD,CAAQkB,YAAa9B,EAAI+B,GAAG,cAAe7C,MAAM,aAC/C,kBAAC,IAAD,CAAMiC,MAAO,CAACG,QAASD,IAAMC,QAAQU,MACnC,kBAAC,IAAD,CACEb,MAAO,CACLc,cAAe,MACfC,WAAY,WAEd,kBAAC,IAAD,CAAMhD,MAAM,YACXQ,EAAOyC,KAAI,SAACpB,GAAD,OACV,kBAAC,IAAD,CACEE,IAAKF,EACL7B,MAAO6B,EACPH,SA5DQP,EA4DYU,EA5DU,kBAAMvB,EAAS4C,YAAY/B,MA6DzDuB,SAAS,OACT9B,MAAOI,IAAiBa,EAAO,UAAY,SA9DpC,IAACV,MAkEd,kBAAC,IAAD,CAAMnB,MAAK,qBAAgBsB,KAC3B,kBAAC,IAAD,CACE6B,sBAAuBvC,EAAMwC,QAC7BnD,MAAOqB,EACP+B,cApEa,SAACpD,GAAD,OAAmBsB,EAAatB,IAqE7CqD,KAAM,EACNC,aAAc,GACdC,aAAc,KAGlB,kBAAC,IAAD,CAAMxD,MAAM,eAAegC,KAAK,KAAKyB,QAAM,IAC3C,kBAAC,IAAD,CAASC,KAAM3D,EAAO4D,WAAYnC,EAASI,WAAYA","file":"static/js/12.b0312120.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/placeholder.d1d6991d.png\";","// TODO: slider on web\nimport React, {memo, useCallback, useState} from 'react';\nimport {Image, ImageSourcePropType, View} from 'react-native';\nimport {\n  Button,\n  Card,\n  Masonry,\n  Screen,\n  Slider,\n  Text,\n} from '../../../../components';\nimport {\n  ColorTheme,\n  changeTheme,\n  getLandscapeOrientation,\n} from '../../../../models';\nimport {Theme, useRootDispatch, useRootSelector} from '../../../../utils';\nimport {useColor, useNav} from '../../../../hooks';\n\ninterface Card {\n  title: string;\n  value: string;\n  target?: string;\n  chart?: ImageSourcePropType;\n  button?: string;\n}\n\nconst image = require('../../../../assets/placeholder.png');\nconst cards: Card[] = [\n  {\n    title: 'Marketing',\n    value: '12.4 M',\n  },\n  {\n    target: '+22% of target',\n    title: 'Conversion',\n    value: '537',\n  },\n  {\n    chart: image,\n    target: '+12.3 of target',\n    title: 'Conversion',\n    value: '42.1 M',\n  },\n  {\n    target: '11% of target',\n    title: 'Sales',\n    value: '35.8 M',\n    chart: image,\n  },\n  {\n    button: 'save',\n    title: 'Users',\n    value: '45.5 M',\n  },\n  {\n    target: '+56.6% of target',\n    title: 'Avg session',\n    value: '4:53 H',\n  },\n  {\n    title: 'Sessions',\n    value: '23.242',\n  },\n  {\n    title: 'Bounce rate',\n    value: '12%',\n  },\n];\n\nexport default memo(function DarkMode() {\n  const dispatch = useRootDispatch();\n  const themes = Object.values(ColorTheme);\n  const color = useColor();\n  const nav = useNav();\n  const currentTheme = useRootSelector((state) => state.theme.currentColor);\n  const themePress = (theme: ColorTheme) => () => dispatch(changeTheme(theme));\n  const [elevation, setElevation] = useState(2);\n  const handleSlider = (value: number) => setElevation(value);\n  const landscape = useRootSelector(getLandscapeOrientation);\n  const columns = landscape ? 5 : 3;\n  const onPress = useCallback(() => undefined, []);\n\n  const renderItem = useCallback(\n    ({item, index}) => (\n      <Card elevation={elevation} onPress={onPress} key={index}>\n        <Text title={item.title} type=\"overline\" />\n        <Text\n          title={item.value}\n          type=\"h3\"\n          style={{marginTop: Theme.padding.p02}}\n        />\n        {item.target && (\n          <Text\n            title={item.target}\n            type=\"body2\"\n            style={{marginTop: Theme.padding.p02}}\n          />\n        )}\n        {item.chart && (\n          <Image\n            source={item.chart}\n            style={{\n              height: 80,\n              marginTop: Theme.padding.p02,\n              resizeMode: 'cover',\n              width: '100%',\n            }}\n          />\n        )}\n        {item.button && (\n          <Button\n            color=\"primary\"\n            emphasis=\"high\"\n            title={item.button}\n            buttonStyle={{marginTop: Theme.padding.p02}}\n          />\n        )}\n      </Card>\n    ),\n    [elevation, onPress],\n  );\n\n  return (\n    <Screen onLeftPress={nav.to('playground')} title=\"Dark mode\">\n      <View style={{padding: Theme.padding.p04}}>\n        <View\n          style={{\n            flexDirection: 'row',\n            alignItems: 'center',\n          }}>\n          <Text title=\"theme: \" />\n          {themes.map((item) => (\n            <Button\n              key={item}\n              title={item}\n              onPress={themePress(item)}\n              emphasis=\"high\"\n              color={currentTheme === item ? 'primary' : 'text'}\n            />\n          ))}\n        </View>\n        <Text title={`elevation: ${elevation}`} />\n        <Slider\n          minimumTrackTintColor={color.primary}\n          value={elevation}\n          onValueChange={handleSlider}\n          step={1}\n          maximumValue={10}\n          minimumValue={0}\n        />\n      </View>\n      <Text title=\"Weekly Stats\" type=\"h2\" center />\n      <Masonry data={cards} numColumns={columns} renderItem={renderItem} />\n    </Screen>\n  );\n});\n"],"sourceRoot":""}