{"version":3,"sources":["apps/Playground/Bejeweled/index.tsx"],"names":["initialSelected","x","y","memo","nav","useNav","dimension","useRootSelector","getSmallestDimension","color","useColor","styles","StyleSheet","create","container","backgroundColor","surface","size","gems","key","primary","brand","success","info","warning","danger","useState","rows","cols","max","col","i","row","j","push","length","Math","floor","random","getInitialState","board","setBoard","matches","mid","left","undefined","right","up","down","vertical","horizontal","getMatches","selected","setSelected","onPress","sum","abs","prev","temp","navBack","useCallback","onLeftPress","title","style","map","flexDirection","gem","width","height","flex","borderColor","text","background","borderWidth"],"mappings":"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","file":"static/js/34.dbb12f7f.chunk.js","sourcesContent":["import React, {memo, useCallback, useState} from 'react';\nimport {StyleSheet, View} from 'react-native';\nimport {Screen, TouchableOpacity} from '../../../components';\nimport {useColor, useNav} from '../../../hooks';\nimport {useRootSelector} from '../../../utils';\nimport {getSmallestDimension} from '../../../models';\n\nconst getRandom = (max: number) => {\n  return Math.floor(Math.random() * max);\n};\n\nconst getInitialState = (rows: number, cols: number, gems: Gem[]): Board => {\n  const col = [];\n  for (let i = 0; i < cols; i++) {\n    const row = [];\n    for (let j = 0; j < rows; j++) {\n      row.push(gems[getRandom(gems.length)]);\n    }\n    col.push(row);\n  }\n  return col;\n};\n\ntype Vector = {x: number; y: number};\ntype Gem = {key: string; color: string};\ntype Board = Gem[][];\ntype Matches = {[key: string]: Vector};\n\nconst getMatches = (board: Board): Matches => {\n  const matches: Matches = {};\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      const mid = board[i][j];\n      const left = i - 1 < 0 ? undefined : board[i - 1][j];\n      const right = i + 1 >= board.length ? undefined : board[i + 1][j];\n      const up = j - 1 < 0 ? undefined : board[i][j - 1];\n      const down = j + 1 >= board[i].length ? undefined : board[i][j + 1];\n      const vertical = up?.key === mid.key && down?.key === mid.key;\n      const horizontal = left?.key === mid.key && right?.key === mid.key;\n      if (vertical) {\n        matches[`${i}${j - 1}`] = {x: i, y: j - 1};\n        matches[`${i}${j}`] = {x: i, y: j};\n        matches[`${i}${j + 1}`] = {x: i, y: j + 1};\n      }\n      if (horizontal) {\n        matches[`${i - 1}${j}`] = {x: i - 1, y: j};\n        matches[`${i}${j}`] = {x: i, y: j};\n        matches[`${i + 1}${j}`] = {x: i + 1, y: j};\n      }\n    }\n  }\n  return matches;\n};\n\nexport type States = 'idle' | 'swap' | 'validate' | 'swap back' | 'fill gems';\n\nconst initialSelected = {x: -10, y: -10};\nexport default memo(function PlaygroundBejeweled() {\n  const nav = useNav();\n  const dimension = useRootSelector(getSmallestDimension);\n\n  const color = useColor();\n  const styles = StyleSheet.create({\n    container: {backgroundColor: color.surface},\n  });\n\n  const width = 6;\n  const height = 6;\n  const size = dimension / width;\n  const gems: Gem[] = [\n    {key: 'primary', color: color.primary},\n    {key: 'brand', color: color.brand},\n    {key: 'success', color: color.success},\n    {key: 'info', color: color.info},\n    {key: 'warning', color: color.warning},\n    {key: 'danger', color: color.danger},\n  ];\n\n  const [board, setBoard] = useState<Board>(() =>\n    getInitialState(width, height, gems),\n  );\n  getMatches(board);\n  const [selected, setSelected] = useState(initialSelected);\n\n  const onPress = (x: number, y: number) => () => {\n    const sum = Math.abs(x - selected.x) + Math.abs(y - selected.y);\n    if (sum === 0) {\n      setSelected(initialSelected);\n    } else if (sum === 1) {\n      setBoard((prev) => {\n        const temp = prev[x][y];\n        prev[x][y] = prev[selected.x][selected.y];\n        prev[selected.x][selected.y] = temp;\n        return [...prev];\n      });\n      setSelected(initialSelected);\n    } else {\n      setSelected({x, y});\n    }\n  };\n  const navBack = useCallback(nav('playground'), [nav]);\n\n  return (\n    <Screen onLeftPress={navBack} title=\"Bejeweled\">\n      <View style={styles.container}>\n        {board.map((col, x) => (\n          <View key={`${x}${col[0].key}`} style={{flexDirection: 'row'}}>\n            {col.map((gem, y) => (\n              <View\n                key={`${x}${y}${gem.key}`}\n                style={{\n                  width: size,\n                  height: size,\n                }}>\n                <TouchableOpacity\n                  onPress={onPress(x, y)}\n                  style={{\n                    flex: 1,\n                    borderColor:\n                      selected.x === x && selected.y === y\n                        ? color.text\n                        : color.background,\n                    borderWidth: 4,\n                    backgroundColor: gem.color,\n                  }}\n                />\n              </View>\n            ))}\n          </View>\n        ))}\n      </View>\n    </Screen>\n  );\n});\n"],"sourceRoot":""}