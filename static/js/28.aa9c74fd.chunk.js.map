{"version":3,"sources":["apps/Debug/screens/ImageCollection/AsyncImage.tsx","apps/Debug/screens/ImageCollection/index.tsx"],"names":["AsyncImage","props","nativeDriver","useNativeDriver","imageAnimated","Animated","Value","indicatorAnimated","styles","StyleSheet","create","indicatorOverlay","justifyContent","position","uri","height","width","color","size","containerStyle","imageStyle","opacity","indicatorStyle","View","style","Image","source","onLoad","parallel","timing","toValue","start","ActivityIndicator","Container","data","Math","random","numColumns","infiniteScrollThreshold","columnWidth","Dimensions","get","imageUrl","nav","to","navigate","fetchMore","push","renderImage","onLeftPress","this","FlatList","keyExtractor","toString","onEndReached","onEndReachedThreshold","renderItem","React","PureComponent","mapDispatchToProps","connect"],"mappings":"0PAWO,SAASA,EAAWC,GACzB,IAAMC,EAAeC,cACfC,EAAgB,IAAIC,IAASC,MAAM,GACnCC,EAAoB,IAAIF,IAASC,MAAM,GACvCE,EAASC,IAAWC,OAAO,CAC/BC,iBAAkB,CAAEC,eAAgB,SAAUC,SAAU,cAclDC,EAAwDb,EAAxDa,IAAKC,EAAmDd,EAAnDc,OAAQC,EAA2Cf,EAA3Ce,MAnBkB,EAmByBf,EAApCgB,aAnBW,MAmBH,QAnBG,IAmByBhB,EAAnBiB,YAnBN,MAmBa,QAnBb,EAoBjCC,EAAiB,CAAEH,QAAOD,UAC1BK,EAAa,CAACD,EAAgB,CAAEE,QAASjB,IACzCkB,EAAiB,CACrBH,EACA,CAAEE,QAASd,GACXC,EAAOG,kBAET,OACE,kBAACY,EAAA,EAAD,CAAMC,MAAOL,GACX,kBAACd,EAAA,EAASoB,MAAV,CACEC,OAAQ,CAAEZ,OACVU,MAAOJ,EACPO,OAzBc,WAClBtB,IAASuB,SAAS,CAChBvB,IAASwB,OAAOtB,EAAmB,CACjCuB,QAAS,EACT3B,gBAAiBD,IAEnBG,IAASwB,OAAOzB,EAAe,CAC7B0B,QAAS,EACT3B,gBAAiBD,MAElB6B,WAiBD,kBAAC1B,EAAA,EAASkB,KAAV,CAAeC,MAAOF,GACpB,kBAACU,EAAA,EAAD,CAAmBd,KAAMA,EAAMD,MAAOA,M,ICjCxCgB,E,2MACIC,KAAiB,CACvBC,KAAKC,SACLD,KAAKC,SACLD,KAAKC,SACLD,KAAKC,SACLD,KAAKC,SACLD,KAAKC,SACLD,KAAKC,SACLD,KAAKC,U,EAECC,WAAa,E,EACbC,wBAA0B,G,EAC1BC,YAAcC,IAAWC,IAAI,UAAUzB,MAAQ,EAAKqB,W,EACpDK,S,gCAAoC,EAAKH,Y,YAAe,EAAKA,a,EAgB7DI,IAAM,SAACC,GAAD,OAA0B,kBAAM,EAAK3C,MAAM4C,SAASD,K,EAE1DE,UAAY,WAClB,EAAKZ,KAAKa,KAAKZ,KAAKC,UACpB,EAAKF,KAAKa,KAAKZ,KAAKC,UACpB,EAAKF,KAAKa,KAAKZ,KAAKC,UACpB,EAAKF,KAAKa,KAAKZ,KAAKC,UACpB,EAAKF,KAAKa,KAAKZ,KAAKC,W,EAGdY,YAAc,kBACpB,kBAAChD,EAAD,CACEc,IAAK,EAAK4B,SACV1B,MAAO,EAAKuB,YACZxB,OAAQ,EAAKwB,e,wEA5Bf,OACE,kBAAC,IAAD,CAAQU,YAAaC,KAAKP,IAAI,UAC5B,kBAACQ,EAAA,EAAD,CACEC,aAAc,SAAAlB,GAAI,OAAIA,EAAKmB,YAC3BnB,KAAMgB,KAAKhB,KACXoB,aAAcJ,KAAKJ,UACnBS,sBAAuBL,KAAKZ,wBAC5BD,WAAYa,KAAKb,WACjBmB,WAAYN,KAAKF,mB,GAxBHS,IAAMC,eAiDxBC,EAAoC,CAAEd,cAE7Be,sBAAQ,KAAMD,EAAdC,CAAkC3B","file":"static/js/28.aa9c74fd.chunk.js","sourcesContent":["import React from \"react\";\nimport { ActivityIndicator, Animated, StyleSheet, View } from \"react-native\";\nimport { useNativeDriver } from \"../../../../hooks\";\ninterface Props {\n  uri: string;\n  height: number;\n  width: number;\n  color?: string;\n  size?: number | \"small\" | \"large\";\n}\n\nexport function AsyncImage(props: Props) {\n  const nativeDriver = useNativeDriver();\n  const imageAnimated = new Animated.Value(0);\n  const indicatorAnimated = new Animated.Value(1);\n  const styles = StyleSheet.create({\n    indicatorOverlay: { justifyContent: \"center\", position: \"absolute\" }\n  });\n  const onImageLoad = () => {\n    Animated.parallel([\n      Animated.timing(indicatorAnimated, {\n        toValue: 0,\n        useNativeDriver: nativeDriver\n      }),\n      Animated.timing(imageAnimated, {\n        toValue: 1,\n        useNativeDriver: nativeDriver\n      })\n    ]).start();\n  };\n  const { uri, height, width, color = \"black\", size = \"small\" } = props;\n  const containerStyle = { width, height };\n  const imageStyle = [containerStyle, { opacity: imageAnimated }];\n  const indicatorStyle = [\n    containerStyle,\n    { opacity: indicatorAnimated },\n    styles.indicatorOverlay\n  ];\n  return (\n    <View style={containerStyle}>\n      <Animated.Image\n        source={{ uri }}\n        style={imageStyle}\n        onLoad={onImageLoad}\n      />\n      <Animated.View style={indicatorStyle}>\n        <ActivityIndicator size={size} color={color} />\n      </Animated.View>\n    </View>\n  );\n}\n","import React from \"react\";\nimport { Dimensions, FlatList } from \"react-native\";\nimport { connect } from \"react-redux\";\nimport { Screen } from \"../../../../components\";\nimport { NavigationScreen, navigate } from \"../../../../models\";\nimport { AsyncImage } from \"./AsyncImage\";\n\ninterface DispatchProps {\n  navigate: typeof navigate;\n}\n\ntype Props = DispatchProps;\n\nclass Container extends React.PureComponent<Props> {\n  private data: number[] = [\n    Math.random(),\n    Math.random(),\n    Math.random(),\n    Math.random(),\n    Math.random(),\n    Math.random(),\n    Math.random(),\n    Math.random()\n  ];\n  private numColumns = 3;\n  private infiniteScrollThreshold = 0.3;\n  private columnWidth = Dimensions.get(\"window\").width / this.numColumns;\n  private imageUrl = `http://lorempixel.com/${this.columnWidth}/${this.columnWidth}`;\n  public render() {\n    return (\n      <Screen onLeftPress={this.nav(\"debug\")}>\n        <FlatList\n          keyExtractor={data => data.toString()}\n          data={this.data}\n          onEndReached={this.fetchMore}\n          onEndReachedThreshold={this.infiniteScrollThreshold}\n          numColumns={this.numColumns}\n          renderItem={this.renderImage}\n        />\n      </Screen>\n    );\n  }\n\n  private nav = (to: NavigationScreen) => () => this.props.navigate(to);\n\n  private fetchMore = () => {\n    this.data.push(Math.random());\n    this.data.push(Math.random());\n    this.data.push(Math.random());\n    this.data.push(Math.random());\n    this.data.push(Math.random());\n  };\n\n  private renderImage = () => \n    <AsyncImage\n      uri={this.imageUrl}\n      width={this.columnWidth}\n      height={this.columnWidth}\n    />\n  ;\n}\n\nconst mapDispatchToProps: DispatchProps = { navigate };\n\nexport default connect(null, mapDispatchToProps)(Container);\n"],"sourceRoot":""}