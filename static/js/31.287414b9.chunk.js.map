{"version":3,"sources":["apps/Playground/BouncingBalls/Canvas.tsx","apps/Playground/BouncingBalls/utils.tsx","apps/Playground/BouncingBalls/BouncingBall.tsx","apps/Playground/BouncingBalls/index.tsx"],"names":["Canvas","memo","children","onLayout","color","useColor","styles","StyleSheet","create","container","backgroundColor","surface","flex","View","style","getRandomNumber","min","max","Math","random","BouncingBall","speed","canvas","diameter","pulse","useState","starting","x","width","y","height","growing","floor","position","Animated","ValueXY","xSpeed","ySpeed","getInitialState","state","setState","ball","primary","borderRadius","getLayout","move","useCallback","s","dMax","dMin","d","xMin","xMax","yMin","yMax","xLarger","xSmaller","yLarger","ySmaller","getSpeed","useEffect","interval","setInterval","clearInterval","items","Array","fill","nav","useNav","setCanvas","event","nativeEvent","layout","onLeftPress","to","title","map","_","index","key","center","inverse","String","type"],"mappings":"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","file":"static/js/31.287414b9.chunk.js","sourcesContent":["import React, {ReactNode, memo} from 'react';\nimport {LayoutChangeEvent, StyleSheet, View} from 'react-native';\nimport {useColor} from '../../../hooks';\n\ninterface Props {\n  onLayout: (event: LayoutChangeEvent) => void;\n  children: ReactNode;\n}\n\nexport type CanvasDimensions = {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n};\n\nexport const Canvas = memo(function Canvas({children, onLayout}: Props) {\n  const color = useColor();\n  const styles = StyleSheet.create({\n    container: {\n      backgroundColor: color.surface,\n      flex: 1,\n    },\n  });\n\n  return (\n    <View onLayout={onLayout} style={styles.container}>\n      {children}\n    </View>\n  );\n});\n","import {Animated} from 'react-native';\nimport {State} from './BouncingBall';\nimport {CanvasDimensions} from './Canvas';\n\nconst getRandomNumber = (min: number, max: number): number =>\n  Math.random() * (max - min) + min;\n\ntype GetSpeedProps = {\n  state: State;\n  canvas: CanvasDimensions;\n  diameter: number;\n  pulse: boolean;\n};\n\nexport const getSpeed = ({state, canvas, diameter, pulse}: GetSpeedProps) => {\n  const dMax = state.diameter >= diameter * 1.1;\n  const dMin = state.diameter <= diameter * 0.9;\n  // TODO: recenter so pulsing happens from middle\n  const growing = dMax || dMin ? !state.growing : state.growing;\n  const d = state.diameter + (!pulse ? 0 : growing ? 1 : -1);\n  const xMin = canvas.x;\n  const xMax = canvas.x + canvas.width;\n  const yMin = canvas.y;\n  const yMax = canvas.y + canvas.height;\n  const xLarger = state.x + d >= xMax;\n  const xSmaller = state.x <= xMin;\n  const yLarger = state.y + d >= yMax;\n  const ySmaller = state.y <= yMin;\n  // TODO: add collision\n  const xSpeed = xLarger || xSmaller ? -state.xSpeed : state.xSpeed;\n  const ySpeed = yLarger || ySmaller ? -state.ySpeed : state.ySpeed;\n  const x = xLarger ? xMax - d : xSmaller ? xMin : state.x + xSpeed;\n  const y = yLarger ? yMax - d : ySmaller ? yMin : state.y + ySpeed;\n  const dx = x + xSpeed;\n  const dy = y + ySpeed;\n  return {xSpeed, ySpeed, x: dx, y: dy, d, growing};\n};\n\ntype GetInitialStateProps = {\n  canvas: CanvasDimensions;\n  diameter: number;\n  speed: number;\n};\n\nexport const getInitialState = ({\n  canvas,\n  diameter,\n  speed,\n}: GetInitialStateProps): State => {\n  const starting = {\n    x: getRandomNumber(canvas.x, canvas.x + canvas.width - diameter),\n    y: getRandomNumber(canvas.y, canvas.y + canvas.height - diameter),\n  };\n  const growing = !!Math.floor(Math.random());\n  return {\n    ...starting,\n    position: new Animated.ValueXY(starting),\n    xSpeed: getRandomNumber(-speed, speed),\n    ySpeed: getRandomNumber(-speed, speed),\n    diameter,\n    growing,\n  };\n};\n","import React, {ReactNode, memo, useCallback, useEffect, useState} from 'react';\nimport {Animated, StyleSheet} from 'react-native';\nimport {useColor} from '../../../hooks';\nimport {CanvasDimensions} from './Canvas';\nimport {getInitialState, getSpeed} from './utils';\n\nexport type State = {\n  position: Animated.ValueXY;\n  xSpeed: number;\n  ySpeed: number;\n  x: number;\n  y: number;\n  diameter: number;\n  growing: boolean;\n};\n\n// TODO: add min and max speed, min and max size, explosion handler\ntype Props = {\n  speed?: number;\n  canvas: CanvasDimensions;\n  diameter?: number;\n  children?: ReactNode;\n  pulse?: boolean;\n};\n\nexport const BouncingBall = memo(function BouncingBall({\n  speed = 3,\n  canvas,\n  diameter = 30,\n  children,\n  pulse = false,\n}: Props) {\n  const color = useColor();\n  const [state, setState] = useState<State>(\n    getInitialState({canvas, diameter, speed}),\n  );\n  const styles = StyleSheet.create({\n    ball: {\n      backgroundColor: color.primary,\n      borderRadius: state.diameter,\n      height: state.diameter,\n      position: 'absolute',\n      width: state.diameter,\n    },\n  });\n  const style = [styles.ball, state.position.getLayout()];\n\n  const move = useCallback(() => {\n    setState((s) => {\n      const {xSpeed, ySpeed, x, y, d, growing} = getSpeed({\n        state: s,\n        canvas,\n        diameter,\n        pulse,\n      });\n      return {\n        xSpeed,\n        ySpeed,\n        x,\n        y,\n        diameter: d,\n        growing,\n        position: new Animated.ValueXY({x, y}),\n      };\n    });\n  }, [canvas, diameter, pulse]);\n\n  useEffect(() => {\n    const interval = setInterval(() => move(), 16);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [move]);\n\n  return <Animated.View style={style}>{children}</Animated.View>;\n});\n","import React, {memo, useCallback, useState} from 'react';\nimport {LayoutChangeEvent} from 'react-native';\nimport {Screen, Text, TouchableOpacity} from '../../../components';\nimport {useNav} from '../../../hooks';\nimport {Canvas, CanvasDimensions} from './Canvas';\nimport {BouncingBall} from './BouncingBall';\n\nconst items = Array(10).fill(0);\n\nexport default memo(function PlaygroundBouncingBalls() {\n  const nav = useNav();\n  const [canvas, setCanvas] = useState<CanvasDimensions | null>(null);\n\n  // TODO: make into hook\n  const onLayout = useCallback((event: LayoutChangeEvent) => {\n    const {x, y, height, width} = event.nativeEvent.layout;\n    setCanvas({x, y, height, width});\n  }, []);\n\n  return (\n    <Screen onLeftPress={nav.to('playground')} title=\"BouncingBalls\">\n      <Canvas onLayout={onLayout}>\n        {canvas &&\n          items.map((_, index) => (\n            <TouchableOpacity key={index} style={{position: 'absolute'}}>\n              <BouncingBall canvas={canvas} diameter={100} speed={3}>\n                {/* TODO: center */}\n                <Text center inverse title={String(index)} type=\"h1\" />\n              </BouncingBall>\n            </TouchableOpacity>\n          ))}\n      </Canvas>\n    </Screen>\n  );\n});\n"],"sourceRoot":""}