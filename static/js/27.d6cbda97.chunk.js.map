{"version":3,"sources":["apps/Debug/screens/Drift/Dpad.tsx","apps/Debug/screens/Drift/Tracks.tsx","apps/Debug/screens/Drift/Character.tsx","apps/Debug/screens/Drift/utils.ts","apps/Debug/screens/Drift/Canvas.tsx","apps/Debug/screens/Drift/index.tsx"],"names":["Dpad","memo","onColor","useShadow","useDropShadow","box","width","height","onPress","useCallback","color","View","style","position","bottom","right","transform","rotate","flexDirection","TouchableOpacity","backgroundColor","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","Track","track","size","styles","StyleSheet","create","tracks","opacity","borderRadius","top","y","left","x","map","index","key","Character","canvas","onTrack","initialPositionRef","useRef","Animated","ValueXY","current","animate","dx","dy","toValue","change","getPosition","spring","start","useEffect","setUpdateIntervalForType","SensorTypes","accelerometer","acc","subscribe","unsubscribe","getLayout","elevation","shadowColor","shadowOffset","shadowOpacity","shadowRadius","zIndex","Canvas","children","onLayout","flex","nav","useNav","useState","setCanvas","setTracks","onCanvasLayout","event","nativeEvent","layout","value","onReset","onNavBack","to","border","onLeftPress","title","DeviceInfo","isEmulatorSync","center"],"mappings":"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","file":"static/js/27.d6cbda97.chunk.js","sourcesContent":["import React, { memo, useCallback } from \"react\";\nimport { View, TouchableOpacity } from \"react-native\";\nimport { useDropShadow } from \"../../../../hooks\";\n\nexport type ColorChoice =\n  | \"slateblue\"\n  | \"orange\"\n  | \"mediumseagreen\"\n  | \"violet\"\n  | \"lightgrey\";\n\ntype DpadProps = {\n  onColor: (color: ColorChoice) => void;\n};\n\nexport const Dpad = memo(function Dpad({ onColor }: DpadProps) {\n  const useShadow = useDropShadow(10);\n  const size = 50;\n  const box = {\n    width: size,\n    height: size\n  };\n\n  const onPress = useCallback((color: ColorChoice) => () => onColor(color), [\n    onColor\n  ]);\n\n  return (\n    <View\n      style={{\n        position: \"absolute\",\n        bottom: size,\n        right: size,\n        transform: [{ rotate: \"45deg\" }]\n      }}\n    >\n      <View style={{ flexDirection: \"row\" }}>\n        <TouchableOpacity\n          onPress={onPress(\"violet\")}\n          style={{\n            ...box,\n            backgroundColor: \"violet\",\n            borderTopLeftRadius: size,\n            ...useShadow\n          }}\n        />\n        <TouchableOpacity\n          onPress={onPress(\"mediumseagreen\")}\n          style={{\n            ...box,\n            backgroundColor: \"mediumseagreen\",\n            borderTopRightRadius: size,\n            ...useShadow\n          }}\n        />\n      </View>\n      <View style={{ flexDirection: \"row\" }}>\n        <TouchableOpacity\n          onPress={onPress(\"slateblue\")}\n          style={{\n            ...box,\n            backgroundColor: \"slateblue\",\n            borderBottomLeftRadius: size,\n            ...useShadow\n          }}\n        />\n        <TouchableOpacity\n          onPress={onPress(\"orange\")}\n          style={{\n            ...box,\n            backgroundColor: \"orange\",\n            borderBottomRightRadius: size,\n            ...useShadow\n          }}\n        />\n      </View>\n    </View>\n  );\n});\n","import React, { memo } from \"react\";\nimport { View, StyleSheet } from \"react-native\";\nimport { ColorChoice } from \"./Dpad\";\n\nexport type TrackPosition = { x: number; y: number; size: number };\nexport type TrackPositionWithColor = TrackPosition & { color: ColorChoice };\n\ninterface TracksProps {\n  tracks: TrackPositionWithColor[];\n}\ninterface TrackProps {\n  track: TrackPositionWithColor;\n}\n\nconst Track = memo(function TrackMemo({ track }: TrackProps) {\n  const size = track.size / 4;\n  const styles = StyleSheet.create({\n    tracks: {\n      opacity: 0.4,\n      borderRadius: track.size,\n      position: \"absolute\",\n      width: size,\n      height: size,\n      backgroundColor: track.color\n    }\n  });\n  return (\n    <View>\n      <View\n        style={{\n          ...styles.tracks,\n          top: track.y - track.size / 2 - size / 2,\n          left: track.x + track.size / 2 - track.size / 2\n        }}\n      />\n      <View\n        style={{\n          ...styles.tracks,\n          top: track.y - track.size / 2 - size / 2,\n          left: track.x + track.size / 2 + track.size / 2 - size\n        }}\n      />\n    </View>\n  );\n});\n\nexport const Tracks = memo(function TracksMemo({ tracks }: TracksProps) {\n  return (\n    <View>\n      {tracks.map((track, index) => \n        <Track key={`${track.x}${track.y}${index}`} track={track} />\n      )}\n    </View>\n  );\n});\n","import React, { memo, useEffect, useRef, useCallback } from \"react\";\nimport { Animated } from \"react-native\";\nimport {\n  accelerometer,\n  setUpdateIntervalForType,\n  SensorTypes\n} from \"react-native-sensors\";\nimport { getPosition } from \"./utils\";\nimport { CanvasDimensions } from \".\";\n\ntype TrackPosition = { x: number; y: number; size: number };\ntype CharacterProps = {\n  canvas: CanvasDimensions;\n  onTrack: (position: TrackPosition) => void;\n};\n\nexport const Character = memo(function Character({\n  canvas,\n  onTrack\n}: CharacterProps) {\n  const elevation = 5;\n  const size = 30;\n  const speed = 5;\n  const rate = 16;\n  const shadowOpacity = elevation * 0.036 + 0.12;\n  const shadowRadius = elevation * 0.36 + 1.2;\n  const initialPositionRef = useRef({\n    x: canvas.width / 2 - size,\n    y: canvas.height / 2 - size\n  });\n  const position = new Animated.ValueXY(initialPositionRef.current);\n\n  const animate = useCallback(\n    (dx: number, dy: number) => {\n      const toValue = getPosition({\n        canvas,\n        change: { dx: dx * speed, dy: dy * speed },\n        current: initialPositionRef.current,\n        size\n      });\n      initialPositionRef.current = toValue;\n      onTrack({ ...toValue, size });\n      Animated.spring(position, { toValue }).start();\n    },\n    [onTrack, initialPositionRef, canvas, size, position]\n  );\n\n  useEffect(() => {\n    setUpdateIntervalForType(SensorTypes.accelerometer, rate);\n    const acc = accelerometer.subscribe(({ x, y }) => animate(x, y));\n    return () => {\n      acc.unsubscribe();\n    };\n  }, [rate, animate]);\n\n  return (\n    <Animated.View\n      style={[\n        position.getLayout(),\n        {\n          width: size,\n          height: size,\n          borderRadius: size,\n          elevation,\n          shadowColor: \"black\",\n          shadowOffset: {\n            height: 2,\n            width: 0\n          },\n          shadowOpacity,\n          shadowRadius,\n          zIndex: elevation,\n          backgroundColor: \"coral\"\n        }\n      ]}\n    />\n  );\n});\n","type Position = {\n  change: { dx: number; dy: number };\n  canvas: { x: number; y: number; width: number; height: number };\n  current: { x: number; y: number };\n  size: number;\n};\n\nexport const getPosition = (position: Position) => {\n  const dx = position.current.x - position.change.dx;\n  const dy = position.current.y + position.change.dy;\n  const y =\n    dy < 0\n      ? 0\n      : dy + position.size > position.canvas.height\n      ? position.canvas.height - position.size\n      : dy;\n  const x =\n    dx < 0\n      ? 0\n      : dx + position.size > position.canvas.width\n      ? position.canvas.width - position.size\n      : dx;\n  return { x, y };\n};\n","import React, { memo } from \"react\";\nimport { View, LayoutChangeEvent } from \"react-native\";\n\ninterface CanvasProps {\n  onLayout: (event: LayoutChangeEvent) => void;\n}\n\nexport const Canvas: React.FC<CanvasProps> = memo(function Canvas({\n  children,\n  onLayout\n}) {\n  return (\n    <View onLayout={onLayout} style={{ flex: 1, backgroundColor: \"#f5f5f5\" }}>\n      {children}\n    </View>\n  );\n});\n","import DeviceInfo from \"react-native-device-info\";\nimport React, { memo, useRef, useCallback, useState } from \"react\";\nimport { View, LayoutChangeEvent } from \"react-native\";\nimport { Screen, Button, Text } from \"../../../../components\";\nimport { useNav } from \"../../../../hooks\";\nimport { ColorChoice, Dpad } from \"./Dpad\";\nimport { TrackPositionWithColor, TrackPosition, Tracks } from \"./Tracks\";\nimport { Character } from \"./Character\";\nimport { Canvas } from \"./Canvas\";\n\nexport type CanvasDimensions = {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n};\n\nexport default memo(function DebugDrift() {\n  const nav = useNav();\n  const tracking = false;\n  const [canvas, setCanvas] = useState<CanvasDimensions | null>(null);\n  const [tracks, setTracks] = useState<TrackPositionWithColor[]>([]);\n  const color = useRef<ColorChoice>(\"lightgrey\");\n\n  const onCanvasLayout = useCallback((event: LayoutChangeEvent) => {\n    const { x, y, height, width } = event.nativeEvent.layout;\n    setCanvas({ x, y, height, width });\n  }, []);\n\n  const onTrack = useCallback(\n    (position: TrackPosition) => {\n      if (!tracking) {return;}\n      setTracks(prev => {\n        if (prev.length > 10) {\n          prev.pop();\n        }\n        return [{ ...position, color: color.current }, ...prev];\n      });\n    },\n    [color, tracking]\n  );\n\n  const onColor = useCallback(\n    (value: ColorChoice) => {\n      color.current = value;\n    },\n    [color]\n  );\n\n  const onReset = useCallback(() => {\n    setTracks([]);\n    color.current = \"lightgrey\";\n  }, []);\n\n  const onNavBack = useCallback(() => nav.to(\"debug\"), [nav]);\n\n  return (\n    <Screen border onLeftPress={onNavBack} title=\"Drift\">\n      {DeviceInfo.isEmulatorSync() ? \n        <Text title=\"not supported on simulators\" center />\n       : \n        <View style={{ flex: 1 }}>\n          <Button title=\"reset\" onPress={onReset} center />\n          <Canvas onLayout={onCanvasLayout}>\n            {canvas && <Character canvas={canvas} onTrack={onTrack} />}\n            {tracking && <Tracks tracks={tracks} />}\n          </Canvas>\n          <Dpad onColor={onColor} />\n        </View>\n      }\n    </Screen>\n  );\n});\n"],"sourceRoot":""}