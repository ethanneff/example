{"version":3,"sources":["apps/Complete/screens/Account/factory.ts","apps/Complete/screens/Account/index.tsx","apps/Complete/components/AddItem.tsx","apps/Complete/configs.tsx","apps/Complete/components/Card.tsx","apps/Complete/components/HandleKeyboard.tsx","apps/Complete/components/Item.tsx","apps/Complete/components/ListHeader.tsx","apps/Complete/components/List.tsx","apps/Complete/components/ListAdd.tsx","apps/Complete/components/ListContainer.tsx","apps/Complete/components/ListHeaderInput.tsx","apps/Complete/components/ListHeader2.tsx","apps/Complete/components/ListItem.tsx","apps/Complete/components/ListItems.tsx","apps/Complete/components/OrganizeButton.tsx","apps/Complete/screens/Capture/index.tsx","apps/Complete/screens/Project/index.tsx","apps/Complete/screens/Projects/index.tsx","apps/Complete/screens/Reflect/Graph.tsx","apps/Complete/screens/Reflect/index.tsx","apps/Complete/index.tsx"],"names":["date","Date","now","defaults","id","v4","active","createdAt","updatedAt","Account","memo","color","useColor","dispatch","useRootDispatch","goBack","useNavigation","navBack","useCallback","onLogin","inboxItems","title","inboxList","items","map","item","inboxBoard","lists","homeItems","homeLists","homeBoard","projectItems","board","projectsList","listsItems","listsList","categoryBoard","user","name","boards","getDefaultUserTemplate","createItem","list","createList","createBoard","createUser","onLogout","removeUser","onSetActive","setActiveUser","onLeftPress","ScrollView","contentContainerStyle","padding","Theme","p04","style","flex","backgroundColor","surface","paddingBottom","type","center","emphasis","onPress","AddItem","itemWidth","borderRadius","inputPlaceholder","buttonTitle","inputType","onAdd","useState","showInput","setShowInput","itemTitle","setItemTitle","onItemTitleChange","v","onAddItemPress","p","onItemTitleClose","onItemTitleSubmit","formatted","trim","length","View","width","height","p12","justifyContent","flexDirection","alignItems","focusOnLoad","onChangeText","onSubmitEditing","placeholder","returnKeyType","value","padded","primary","config","p02","Card","children","onLayout","background","marginBottom","HandleKeyboard","render","onDismissKeyboard","Keyboard","dismiss","TouchableWithoutFeedback","Item","setTitle","showControls","setShowControls","onTextChange","onFocus","onBlur","ListHeader","input","setInput","List","listWidth","listColor","itemColor","maxHeight","orientation","addButtonTitle","addButtonPlaceholder","cards","setCards","cardsRef","useRef","cardsLength","horizontal","onKeyExtractor","onCardSizeChange","current","scrollToEnd","onAddCard","String","onRenderItem","marginRight","FlatList","data","keyExtractor","keyboardShouldPersistTaps","onContentSizeChange","ref","renderItem","showsVerticalScrollIndicator","ListAdd","listId","textInputRef","itemId","updateListAddItem","focus","onRef","ListContainer","ListHeaderInput","listTitle","useRootSelector","s","completeList","onSave","updateListTitle","ListHeader2","ListItem","completeItem","onItemNav","onItemDelete","removeItem","updateListRemoveItem","onItemDetails","onItemLongPress","onLongPress","margin","ListItems","listItems","OrganizeButton","disable","Capture","navigate","keyboardHeight","state","device","container","button","dimensions","setDimensions","android","Platform","OS","listHeight","getInboxListId","onOrganize","key","event","nativeEvent","layout","navToAccount","onRightPress","rightIcon","Project","setLists","getSmallestDimension","listSize","listsRef","listsCount","setContainer","listMaxHeight","getItemId","addList","renderList","renderAddList","getItemLayout","_","index","offset","onListSizeChange","scrollToIndex","viewPosition","ListFooterComponent","decelerationRate","showsHorizontalScrollIndicator","snapToAlignment","snapToInterval","Projects","listIds","getCategoryListIds","navNext","getDomain","domain","Math","min","max","Graph","scaleX","scaleTime","d","range","scaleY","scaleLinear","strokeWidth","shape","x","y","curve","StyleSheet","absoluteFill","x1","x2","y1","y2","stopColor","fill","stroke","Title","getTime","Reflect","Dimensions","get","noHeader","headerShown","RootTab","createBottomTabNavigator","RootStack","createStackNavigator","ProjectsStack","tabIcons","focused","unfocused","Focus","Navigator","screenOptions","Screen","component","Tabs","tabBarOptions","keyboardHidesTabBar","activeTintColor","inactiveTintColor","text","showLabel","route","tabBarIcon","size","iconColor"],"mappings":"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","file":"static/js/12.a1be8848.chunk.js","sourcesContent":["import {v4} from 'uuid';\nimport {Board, Item, List, User} from '../../models';\n\ntype GetDefaultUserTemplate = {\n  user: User;\n  boards: Board[];\n  lists: List[];\n  items: Item[];\n};\n\nconst date = Date.now();\nconst defaults = () => ({\n  id: v4(),\n  active: true,\n  createdAt: date,\n  updatedAt: date,\n});\n\nexport const getDefaultUserTemplate = (): GetDefaultUserTemplate => {\n  // inbox\n  const inboxItems: Item[] = [\n    {...defaults(), title: 'do dishes'},\n    {...defaults(), title: 'schedule meeting with Jim'},\n    {...defaults(), title: 'run 4 miles'},\n    {...defaults(), title: 'change oil'},\n    {...defaults(), title: 'what is the best mediation'},\n    {...defaults(), title: 'record Kelly birthday on Sep 22'},\n    {...defaults(), title: 'drink water'},\n    {...defaults(), title: 'intensity + focus = deep work'},\n    {...defaults(), title: 'put $20 in phone'},\n    {...defaults(), title: 'clear emails'},\n  ];\n  const inboxList: List = {\n    ...defaults(),\n    title: 'Inbox',\n    items: inboxItems.map((item) => item.id),\n  };\n  const inboxBoard: Board = {\n    ...defaults(),\n    title: 'Inbox',\n    lists: [inboxList.id],\n  };\n\n  // sub category\n  const homeItems: Item[] = [\n    {...defaults(), title: 'clean desk'},\n    {...defaults(), title: 'clean room'},\n    {...defaults(), title: 'walk dog'},\n    {...defaults(), title: 'brush teeth'},\n    {...defaults(), title: 'do laundry'},\n    {...defaults(), title: 'fix sink'},\n  ];\n  const homeLists: List[] = [\n    {...defaults(), title: 'Backlog', items: homeItems.map((item) => item.id)},\n    {...defaults(), title: 'Todo', items: []},\n    {...defaults(), title: 'In Progress', items: []},\n    {...defaults(), title: 'Done', items: []},\n  ];\n  const homeBoard: Board = {\n    ...defaults(),\n    title: 'Home',\n    lists: homeLists.map((item) => item.id),\n  };\n\n  // category\n  const projectItems: Item[] = [\n    {...defaults(), title: 'at home', board: homeBoard.id},\n    {...defaults(), title: 'at town'},\n    {...defaults(), title: 'at work'},\n    {...defaults(), title: 'at gym'},\n    {...defaults(), title: 'app release'},\n  ];\n  const projectsList: List = {\n    ...defaults(),\n    title: 'Projects',\n    items: projectItems.map((item) => item.id),\n  };\n  const listsItems: Item[] = [\n    {...defaults(), title: 'meeting notes'},\n    {...defaults(), title: 'book summaries'},\n    {...defaults(), title: 'gift ideas'},\n    {...defaults(), title: 'checklists'},\n    {...defaults(), title: 'code languages'},\n  ];\n  const listsList: List = {\n    ...defaults(),\n    title: 'Lists',\n    items: listsItems.map((item) => item.id),\n  };\n  const categoryBoard: Board = {\n    ...defaults(),\n    title: 'Categories',\n    lists: [projectsList.id, listsList.id],\n  };\n\n  // user\n  const user: User = {\n    ...defaults(),\n    name: 'Bob Smith',\n    boards: [inboxBoard.id, categoryBoard.id],\n  };\n\n  return {\n    user,\n    boards: [homeBoard, inboxBoard, categoryBoard],\n    lists: [inboxList, ...homeLists, projectsList, listsList],\n    items: [...inboxItems, ...homeItems, ...projectItems, ...listsItems],\n  };\n};\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback} from 'react';\nimport {ScrollView} from 'react-native';\nimport {Button, Card, Screen, Text} from '../../../../components';\nimport {useColor} from '../../../../hooks';\nimport {Theme, useRootDispatch} from '../../../../utils';\nimport {\n  createBoard,\n  createItem,\n  createList,\n  createUser,\n  removeUser,\n  setActiveUser,\n} from '../../models';\nimport {getDefaultUserTemplate} from './factory';\n\n// TODO: figure out a place for this\n// TODO: add reminders\n// TODO: add profile information\n// TODO: add payment\n\nexport const Account = memo(function Account() {\n  const color = useColor();\n  const dispatch = useRootDispatch();\n\n  const {goBack} = useNavigation();\n  const navBack = useCallback(() => goBack(), [goBack]);\n\n  const onLogin = useCallback(() => {\n    const {user, boards, lists, items} = getDefaultUserTemplate();\n    items.map((item) => dispatch(createItem(item)));\n    lists.map((list) => dispatch(createList(list)));\n    boards.map((board) => dispatch(createBoard(board)));\n    dispatch(createUser(user));\n  }, [dispatch]);\n  const onLogout = useCallback(() => dispatch(removeUser()), [dispatch]);\n  const onSetActive = useCallback(() => {\n    dispatch(setActiveUser(true));\n  }, [dispatch]);\n\n  return (\n    <Screen onLeftPress={navBack} title=\"Account\">\n      <ScrollView\n        contentContainerStyle={{\n          padding: Theme.padding.p04,\n        }}\n        style={{flex: 1, backgroundColor: color.surface}}>\n        <Card>\n          <Text\n            style={{paddingBottom: Theme.padding.p04}}\n            title=\"Profile\"\n            type=\"h3\"\n          />\n          <Text\n            center\n            emphasis=\"medium\"\n            title=\"Break comfort barriers to be more creative, better at dealing with change, and better a improving the future\"\n            type=\"h4\"\n          />\n        </Card>\n        <Card>\n          <Text\n            style={{paddingBottom: Theme.padding.p04}}\n            title=\"Reminders\"\n            type=\"h3\"\n          />\n          <Text\n            center\n            emphasis=\"medium\"\n            title=\"Break comfort barriers to be more creative, better at dealing with change, and better a improving the future\"\n            type=\"h4\"\n          />\n        </Card>\n        <Card>\n          <Text\n            style={{paddingBottom: Theme.padding.p04}}\n            title=\"Payment\"\n            type=\"h3\"\n          />\n          <Text\n            center\n            emphasis=\"medium\"\n            title=\"Break comfort barriers to be more creative, better at dealing with change, and better a improving the future\"\n            type=\"h4\"\n          />\n        </Card>\n        <Button onPress={onLogin} title=\"login\" />\n        <Button onPress={onLogout} title=\"logout\" />\n        <Button onPress={onSetActive} title=\"set active\" />\n      </ScrollView>\n    </Screen>\n  );\n});\n","import React, {memo, useCallback, useState} from 'react';\nimport {View} from 'react-native';\nimport {Button, Icon, TextInput} from '../../../components';\nimport {useColor} from '../../../hooks';\nimport {FontType, Theme} from '../../../utils';\n\ntype AddItemProps = {\n  itemWidth?: number;\n  borderRadius: number;\n  backgroundColor: string;\n  inputPlaceholder: string;\n  inputType: FontType;\n  buttonTitle: string;\n  onAdd: (value: string) => void;\n};\n\nexport const AddItem = memo(function AddItem({\n  itemWidth,\n  borderRadius,\n  inputPlaceholder,\n  buttonTitle,\n  inputType,\n  backgroundColor,\n  onAdd,\n}: AddItemProps) {\n  const color = useColor();\n  const [showInput, setShowInput] = useState(false);\n  const [itemTitle, setItemTitle] = useState('');\n  const onItemTitleChange = useCallback((v: string) => setItemTitle(v), []);\n  const onAddItemPress = useCallback(() => setShowInput((p) => !p), []);\n  const onItemTitleClose = useCallback(() => {\n    setShowInput(false);\n    setItemTitle('');\n  }, []);\n  const onItemTitleSubmit = useCallback(() => {\n    const formatted = itemTitle.trim();\n    if (formatted.length === 0) {\n      return;\n    }\n    onItemTitleClose();\n    onAdd(formatted);\n  }, [itemTitle, onAdd, onItemTitleClose]);\n  return (\n    <View\n      style={{\n        width: itemWidth,\n        height: Theme.padding.p12, // TODO pass down\n        borderRadius,\n        backgroundColor,\n        justifyContent: 'center',\n      }}>\n      {showInput ? (\n        <View style={{flexDirection: 'row', alignItems: 'center'}}>\n          <TextInput\n            emphasis=\"high\"\n            flex\n            focusOnLoad\n            onChangeText={onItemTitleChange}\n            onSubmitEditing={onItemTitleSubmit}\n            placeholder={inputPlaceholder}\n            returnKeyType=\"done\"\n            type={inputType}\n            value={itemTitle}\n          />\n          <Icon name=\"close\" onPress={onItemTitleClose} padded />\n          <Icon\n            color={color.primary}\n            name=\"send\"\n            onPress={onItemTitleSubmit}\n            padded\n          />\n        </View>\n      ) : (\n        <Button\n          center\n          color=\"primary\"\n          onPress={onAddItemPress}\n          title={buttonTitle}\n        />\n      )}\n    </View>\n  );\n});\n","import {Theme} from '../../utils';\n\nexport const config = {\n  borderRadius: Theme.padding.p02,\n  padding: Theme.padding.p04,\n};\n","import React, {memo, ReactElement} from 'react';\nimport {LayoutChangeEvent, View} from 'react-native';\nimport {useColor} from '../../../hooks';\nimport {config} from '../configs';\n\ntype CardProps = {\n  onLayout?: (event: LayoutChangeEvent) => void;\n  children: ReactElement | ReactElement[];\n};\n\nexport const Card = memo(function Card({children, onLayout}: CardProps) {\n  const color = useColor();\n  return (\n    <View\n      onLayout={onLayout}\n      style={{\n        borderRadius: config.borderRadius,\n        backgroundColor: color.background,\n        padding: config.padding / 2,\n        marginBottom: config.padding,\n      }}>\n      {children}\n    </View>\n  );\n});\n","import React, {memo, ReactElement, useCallback} from 'react';\nimport {\n  Keyboard,\n  LayoutChangeEvent,\n  TouchableWithoutFeedback,\n  View,\n} from 'react-native';\nimport {config} from '../configs';\n\ntype HandleKeyboardProps = {\n  onLayout: (event: LayoutChangeEvent) => void;\n  render: boolean;\n  backgroundColor: string;\n  children: ReactElement | ReactElement[];\n};\n\nexport const HandleKeyboard = memo(function HandleKeyboard({\n  onLayout,\n  render,\n  backgroundColor,\n  children,\n}: HandleKeyboardProps) {\n  const onDismissKeyboard = useCallback(() => Keyboard.dismiss(), []);\n  return (\n    <TouchableWithoutFeedback\n      onLayout={onLayout}\n      onPress={onDismissKeyboard}\n      style={{flex: 1}}>\n      <View\n        style={{\n          flex: 1,\n          backgroundColor,\n          padding: config.padding,\n        }}>\n        {render ? children : null}\n      </View>\n    </TouchableWithoutFeedback>\n  );\n});\n","import React, {memo, useCallback, useState} from 'react';\nimport {Keyboard, View} from 'react-native';\nimport {Icon, TextInput, TouchableOpacity} from '../../../components';\nimport {useColor} from '../../../hooks';\nimport {ItemObject} from '../types';\n\ntype ItemProps = {\n  item: ItemObject;\n  padding: number;\n  borderRadius: number;\n  backgroundColor: string;\n};\n\nexport const Item = memo(function Item({\n  item,\n  padding,\n  borderRadius,\n  backgroundColor,\n}: ItemProps) {\n  const color = useColor();\n  const [title, setTitle] = useState(item.title);\n  const [showControls, setShowControls] = useState(false);\n\n  const onTextChange = useCallback((value) => {\n    setTitle(value);\n  }, []);\n\n  const onItemTitleClose = useCallback(() => {\n    setTitle(item.title);\n    Keyboard.dismiss();\n  }, [item.title]);\n  const onItemTitleSubmit = useCallback(() => {\n    Keyboard.dismiss();\n  }, []);\n\n  const onFocus = useCallback(() => setShowControls(true), []);\n  const onBlur = useCallback(() => setShowControls(false), []);\n\n  return (\n    <TouchableOpacity\n      key={item.id}\n      style={{\n        flex: 1,\n        borderRadius,\n        marginBottom: padding,\n        backgroundColor: backgroundColor,\n        flexDirection: 'row',\n      }}>\n      <TextInput\n        backgroundColor={backgroundColor}\n        flex\n        onBlur={onBlur}\n        onChangeText={onTextChange}\n        onFocus={onFocus}\n        onSubmitEditing={onItemTitleSubmit}\n        placeholder=\"Item name...\"\n        returnKeyType=\"done\"\n        value={title}\n      />\n      {showControls ? (\n        <View style={{flexDirection: 'row', alignItems: 'center'}}>\n          <Icon name=\"close\" onPress={onItemTitleClose} padded />\n          <Icon\n            color={color.primary}\n            name=\"send\"\n            onPress={onItemTitleSubmit}\n            padded\n          />\n        </View>\n      ) : (\n        <View style={{flexDirection: 'row', alignItems: 'center'}}>\n          <Icon name=\"dots-horizontal\" onPress={onItemTitleClose} padded />\n          <Icon name=\"chevron-right\" onPress={onItemTitleSubmit} padded />\n        </View>\n      )}\n    </TouchableOpacity>\n  );\n});\n","import React, {memo, useCallback, useState} from 'react';\nimport {View} from 'react-native';\nimport {Icon, TextInput} from '../../../components';\n\ntype ListHeaderProps = {\n  name: string;\n  padding: number;\n};\n\nexport const ListHeader = memo(function ListHeader({\n  name,\n  padding,\n}: ListHeaderProps) {\n  const [input, setInput] = useState(name);\n\n  const onChangeText = useCallback((value: string) => {\n    setInput(value);\n  }, []);\n\n  return (\n    <View\n      style={{\n        flexDirection: 'row',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n        paddingBottom: padding,\n      }}>\n      <TextInput\n        emphasis=\"high\"\n        flex\n        onChangeText={onChangeText}\n        placeholder=\"list name...\"\n        type=\"h4\"\n        value={input}\n      />\n      <Icon name=\"dots-horizontal\" padded />\n    </View>\n  );\n});\n","import React, {memo, useCallback, useRef, useState} from 'react';\nimport {FlatList, View} from 'react-native';\nimport {ItemObject, ListObject} from '../types';\nimport {AddItem} from './AddItem';\nimport {Item} from './Item';\nimport {ListHeader} from './ListHeader';\n\ntype ListProps = {\n  list: ListObject;\n  listColor: string;\n  itemColor: string;\n  borderRadius: number;\n  listWidth?: number;\n  padding: number;\n  maxHeight?: number;\n  orientation?: 'vertical' | 'horizontal';\n  addButtonTitle: string;\n  addButtonPlaceholder: string;\n};\n\nexport const List = memo(function List({\n  list,\n  borderRadius,\n  listWidth,\n  listColor,\n  itemColor,\n  padding,\n  maxHeight,\n  orientation = 'vertical',\n  addButtonTitle,\n  addButtonPlaceholder,\n}: ListProps) {\n  const [cards, setCards] = useState<ItemObject[]>(list.items);\n  const cardsRef = useRef<FlatList | null>(null);\n  const cardsLength = useRef(cards.length);\n  const horizontal = orientation === 'horizontal';\n\n  const onKeyExtractor = useCallback((item) => item.id, []);\n\n  const onCardSizeChange = useCallback(() => {\n    if (cards.length > cardsLength.current) {\n      cardsRef.current?.scrollToEnd();\n      cardsLength.current = cards.length;\n    }\n  }, [cards.length]);\n\n  const onAddCard = useCallback((title: string) => {\n    const date = String(Date.now());\n    setCards((p) => [...p, {id: date, title}]);\n  }, []);\n\n  const onRenderItem = useCallback(\n    ({item}) => {\n      return (\n        <Item\n          backgroundColor={itemColor}\n          borderRadius={borderRadius}\n          item={item}\n          key={item.id}\n          padding={padding}\n        />\n      );\n    },\n    [borderRadius, itemColor, padding],\n  );\n\n  return (\n    <View>\n      <View\n        style={{\n          borderRadius,\n          width: listWidth,\n          backgroundColor: listColor,\n          padding: padding / 2,\n          marginRight: horizontal ? padding : 0,\n          marginBottom: horizontal ? 0 : padding,\n        }}>\n        <ListHeader name={list.title} padding={padding} />\n        <FlatList\n          data={cards}\n          keyExtractor={onKeyExtractor}\n          keyboardShouldPersistTaps=\"handled\"\n          onContentSizeChange={onCardSizeChange}\n          ref={cardsRef}\n          renderItem={onRenderItem}\n          showsVerticalScrollIndicator={false}\n          style={{maxHeight}}\n        />\n        <AddItem\n          backgroundColor={listColor}\n          borderRadius={borderRadius}\n          buttonTitle={addButtonTitle}\n          inputPlaceholder={addButtonPlaceholder}\n          inputType=\"body2\"\n          onAdd={onAddCard}\n        />\n      </View>\n    </View>\n  );\n});\n","import React, {memo, useCallback, useRef, useState} from 'react';\nimport {TextInput as OriginalTextInput, View} from 'react-native';\nimport {v4} from 'uuid';\nimport {Button, Icon, TextInput} from '../../../components';\nimport {useColor} from '../../../hooks';\nimport {Theme, useRootDispatch} from '../../../utils';\nimport {config} from '../configs';\nimport {createItem, Item, updateListAddItem} from '../models';\n\ntype ListAddProps = {\n  listId: string;\n  itemWidth?: number;\n  inputPlaceholder: string;\n  buttonTitle: string;\n};\n\nexport const ListAdd = memo(function ListAdd({\n  itemWidth,\n  inputPlaceholder,\n  buttonTitle,\n  listId,\n}: ListAddProps) {\n  const color = useColor();\n  const dispatch = useRootDispatch();\n  const textInputRef = useRef<OriginalTextInput | null>(null);\n  const [showInput, setShowInput] = useState(false);\n  const [itemTitle, setItemTitle] = useState('');\n  const onItemTitleChange = useCallback((v: string) => setItemTitle(v), []);\n  const onAddItemPress = useCallback(() => setShowInput((p) => !p), []);\n\n  const onItemTitleClose = useCallback(() => {\n    setShowInput(false);\n    setItemTitle('');\n  }, []);\n\n  const onItemTitleSubmit = useCallback(() => {\n    const formatted = itemTitle.trim();\n    if (formatted.length === 0) {\n      return;\n    }\n    setItemTitle('');\n    const itemId = v4();\n    const date = Date.now();\n    const item: Item = {\n      id: itemId,\n      active: true,\n      title: formatted,\n      createdAt: date,\n      updatedAt: date,\n    };\n    dispatch(createItem(item));\n    dispatch(updateListAddItem({listId, itemId}));\n    textInputRef.current?.focus();\n  }, [dispatch, itemTitle, listId]);\n\n  const onBlur = useCallback(() => {\n    setShowInput(false);\n    setItemTitle('');\n  }, []);\n\n  return (\n    <View\n      style={{\n        width: itemWidth,\n        height: Theme.padding.p12,\n        borderRadius: config.borderRadius,\n        backgroundColor: color.background,\n        justifyContent: 'center',\n      }}>\n      {showInput ? (\n        <View style={{flexDirection: 'row', alignItems: 'center'}}>\n          <TextInput\n            emphasis=\"high\"\n            flex\n            focusOnLoad\n            onBlur={onBlur}\n            onChangeText={onItemTitleChange}\n            onRef={textInputRef}\n            onSubmitEditing={onItemTitleSubmit}\n            placeholder={inputPlaceholder}\n            returnKeyType=\"done\"\n            value={itemTitle}\n          />\n          <Icon name=\"close\" onPress={onItemTitleClose} padded />\n          <Icon\n            color={color.primary}\n            name=\"send\"\n            onPress={onItemTitleSubmit}\n            padded\n          />\n        </View>\n      ) : (\n        <Button\n          center\n          color=\"primary\"\n          onPress={onAddItemPress}\n          title={buttonTitle}\n        />\n      )}\n    </View>\n  );\n});\n","import React, {memo, ReactElement} from 'react';\nimport {View} from 'react-native';\nimport {useColor} from '../../../hooks';\nimport {config} from '../configs';\n\ntype ListContainerProps = {\n  width?: number;\n  children: ReactElement | ReactElement[];\n  orientation?: 'vertical' | 'horizontal';\n};\n\nexport const ListContainer = memo(function ListContainer({\n  width,\n  children,\n  orientation = 'vertical',\n}: ListContainerProps) {\n  const color = useColor();\n  const padding = config.padding;\n  const borderRadius = config.borderRadius;\n  const horizontal = orientation === 'horizontal';\n  return (\n    <View\n      style={{\n        borderRadius,\n        width: width,\n        backgroundColor: color.background,\n        padding: padding / 2,\n        marginRight: horizontal ? padding : 0,\n        marginBottom: horizontal ? 0 : padding,\n      }}>\n      {children}\n    </View>\n  );\n});\n","import React, {memo, useCallback, useState} from 'react';\nimport {TextInput} from '../../../components';\nimport {useRootDispatch, useRootSelector} from '../../../utils';\nimport {updateListTitle} from '../models';\n\ntype ListHeaderInputProps = {\n  listId: string;\n};\n\nexport const ListHeaderInput = memo(function ListHeaderInput({\n  listId,\n}: ListHeaderInputProps) {\n  const dispatch = useRootDispatch();\n  const listTitle = useRootSelector((s) => s.completeList.items[listId].title);\n  const [title, setTitle] = useState(listTitle);\n  const onChangeText = useCallback((value: string) => {\n    setTitle(value);\n  }, []);\n\n  const onSave = useCallback(() => {\n    dispatch(updateListTitle({listId, title}));\n  }, [dispatch, listId, title]);\n\n  return (\n    <TextInput\n      emphasis=\"high\"\n      flex\n      onBlur={onSave}\n      onChangeText={onChangeText}\n      placeholder=\"list name...\"\n      returnKeyType=\"done\"\n      type=\"h4\"\n      value={title}\n    />\n  );\n});\n","import React, {memo} from 'react';\nimport {View} from 'react-native';\nimport {Icon} from '../../../components';\nimport {ListHeaderInput} from './ListHeaderInput';\n\ntype ListHeaderProps = {\n  listId: string;\n};\n\nexport const ListHeader2 = memo(function ListHeader({listId}: ListHeaderProps) {\n  return (\n    <View\n      style={{\n        flexDirection: 'row',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n      }}>\n      <ListHeaderInput listId={listId} />\n      <Icon name=\"dots-horizontal\" padded />\n    </View>\n  );\n});\n","import React, {memo, useCallback, useState} from 'react';\nimport {Keyboard, View} from 'react-native';\nimport {Icon, TextInput, TouchableOpacity} from '../../../components';\nimport {useColor} from '../../../hooks';\nimport {useRootDispatch, useRootSelector} from '../../../utils';\nimport {config} from '../configs';\nimport {removeItem, updateListRemoveItem} from '../models';\n\ntype ListItemProps = {\n  itemId: string;\n  listId: string;\n};\n\nexport const ListItem = memo(function ListItem({\n  itemId,\n  listId,\n}: ListItemProps) {\n  const item = useRootSelector((s) => s.completeItem.items[itemId]);\n  const dispatch = useRootDispatch();\n  const color = useColor();\n  const [title, setTitle] = useState(item.title);\n  const [showControls, setShowControls] = useState(false);\n\n  const onTextChange = useCallback((value) => {\n    setTitle(value);\n  }, []);\n\n  const onItemTitleClose = useCallback(() => {\n    setTitle(item.title);\n    Keyboard.dismiss();\n  }, [item.title]);\n  const onItemTitleSubmit = useCallback(() => {\n    Keyboard.dismiss();\n  }, []);\n\n  const onFocus = useCallback(() => setShowControls(true), []);\n  const onBlur = useCallback(() => setShowControls(false), []);\n\n  const onItemNav = useCallback(() => undefined, []);\n  const onItemDelete = useCallback(() => {\n    dispatch(removeItem(itemId));\n    dispatch(updateListRemoveItem({listId, itemId}));\n  }, [dispatch, itemId, listId]);\n  const onItemDetails = useCallback(() => undefined, []);\n  const onItemLongPress = useCallback(() => undefined, []);\n\n  return (\n    <TouchableOpacity\n      key={item.id}\n      onLongPress={onItemLongPress}\n      style={{\n        flex: 1,\n        borderRadius: config.borderRadius,\n        margin: config.padding / 2,\n        backgroundColor: color.surface,\n        flexDirection: 'row',\n      }}>\n      <TextInput\n        backgroundColor={color.surface}\n        flex\n        onBlur={onBlur}\n        onChangeText={onTextChange}\n        onFocus={onFocus}\n        onSubmitEditing={onItemTitleSubmit}\n        placeholder=\"Item name...\"\n        returnKeyType=\"done\"\n        value={title}\n      />\n      {showControls ? (\n        <View style={{flexDirection: 'row', alignItems: 'center'}}>\n          <Icon name=\"close\" onPress={onItemTitleClose} padded />\n          <Icon\n            color={color.primary}\n            name=\"send\"\n            onPress={onItemTitleSubmit}\n            padded\n          />\n        </View>\n      ) : (\n        <View style={{flexDirection: 'row', alignItems: 'center'}}>\n          <Icon name=\"trash-can-outline\" onPress={onItemDelete} padded />\n          <Icon name=\"dots-horizontal\" onPress={onItemDetails} padded />\n          <Icon name=\"chevron-right\" onPress={onItemNav} padded />\n        </View>\n      )}\n    </TouchableOpacity>\n  );\n});\n","import React, {memo, useCallback, useRef} from 'react';\nimport {FlatList, ListRenderItem} from 'react-native';\nimport {useRootSelector} from '../../../utils';\nimport {ListItem} from './ListItem';\n\ntype ListItemsProps = {\n  listId: string;\n  maxHeight?: number;\n};\n\nexport const ListItems = memo(function ListItems({\n  listId,\n  maxHeight,\n}: ListItemsProps) {\n  const listItems = useRootSelector((s) => s.completeList.items[listId].items);\n  const cardsRef = useRef<FlatList | null>(null);\n  const cardsLength = useRef(listItems.length);\n\n  const onKeyExtractor = useCallback((item) => item, []);\n\n  const onCardSizeChange = useCallback(() => {\n    if (listItems.length > cardsLength.current) {\n      cardsRef.current?.scrollToEnd();\n      cardsLength.current = listItems.length;\n    }\n  }, [listItems.length]);\n\n  const onRenderItem: ListRenderItem<string> = useCallback(\n    ({item}) => {\n      return <ListItem itemId={item} key={item} listId={listId} />;\n    },\n    [listId],\n  );\n\n  return (\n    <FlatList\n      data={listItems}\n      keyExtractor={onKeyExtractor}\n      keyboardShouldPersistTaps=\"handled\"\n      onContentSizeChange={onCardSizeChange}\n      ref={cardsRef}\n      renderItem={onRenderItem}\n      showsVerticalScrollIndicator={false}\n      style={{maxHeight}}\n    />\n  );\n});\n","import React, {memo} from 'react';\nimport {LayoutChangeEvent} from 'react-native';\nimport {Button} from '../../../components';\nimport {useRootSelector} from '../../../utils';\nimport {Card} from '../components/Card';\n\ntype OrganizeButtonProps = {\n  listId: string;\n  onPress: () => void;\n  onLayout: (event: LayoutChangeEvent) => void;\n};\n\nexport const OrganizeButton = memo(function OrganizeButton({\n  listId,\n  onPress,\n  onLayout,\n}: OrganizeButtonProps) {\n  const listItems = useRootSelector(\n    (s) => s.completeList.items[listId].items.length,\n  );\n  return (\n    <Card onLayout={onLayout}>\n      <Button\n        center\n        color=\"primary\"\n        disable={listItems === 0}\n        onPress={onPress}\n        title=\"Organize\"\n      />\n    </Card>\n  );\n});\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback, useState} from 'react';\nimport {LayoutChangeEvent, Platform, View} from 'react-native';\nimport {Screen, Text} from '../../../../components';\nimport {useColor} from '../../../../hooks';\nimport {useRootSelector} from '../../../../utils';\nimport {\n  HandleKeyboard,\n  ListAdd,\n  ListContainer,\n  ListHeader2,\n  ListItems,\n  OrganizeButton,\n} from '../../components';\nimport {config} from '../../configs';\nimport {getInboxListId} from '../../models';\n\nexport const Capture = memo(function Capture() {\n  const color = useColor();\n  const {navigate} = useNavigation();\n  const navBack = useCallback(() => navigate('admin'), [navigate]);\n  const keyboardHeight = useRootSelector(\n    (state) => state.device.keyboardHeight,\n  );\n  const [dimensions, setDimensions] = useState({container: 0, button: 0});\n  const android = Platform.OS === 'android';\n\n  const listHeight =\n    keyboardHeight === 0\n      ? dimensions.container -\n        dimensions.button -\n        (android ? config.padding * 8 : config.padding * 13)\n      : dimensions.container -\n        keyboardHeight -\n        (android ? config.padding * 3 : config.padding * 8);\n\n  const listId = useRootSelector(getInboxListId);\n\n  const onOrganize = useCallback(() => undefined, []);\n\n  const onLayout = useCallback(\n    (key: string) => (event: LayoutChangeEvent) => {\n      const {height} = event.nativeEvent.layout;\n      const preventMultipleUpdates =\n        key === 'container' && dimensions.container > 0;\n      if (preventMultipleUpdates) {\n        return;\n      }\n      setDimensions((p) => ({...p, [key]: height}));\n    },\n    [dimensions.container],\n  );\n\n  const navToAccount = useCallback(() => navigate('account'), [navigate]);\n\n  return (\n    <Screen\n      onLeftPress={navBack}\n      onRightPress={navToAccount}\n      rightIcon=\"account\"\n      title=\"Capture\">\n      <HandleKeyboard\n        backgroundColor={color.surface}\n        onLayout={onLayout('container')}\n        render={dimensions.container > 0}>\n        {listId ? (\n          <View>\n            <ListContainer>\n              <ListHeader2 listId={listId} />\n              <ListItems listId={listId} maxHeight={listHeight} />\n              <ListAdd\n                buttonTitle=\"Add item\"\n                inputPlaceholder=\"Item title...\"\n                listId={listId}\n              />\n            </ListContainer>\n            <OrganizeButton\n              listId={listId}\n              onLayout={onLayout('button')}\n              onPress={onOrganize}\n            />\n          </View>\n        ) : (\n          <Text title=\"missing account\" />\n        )}\n      </HandleKeyboard>\n    </Screen>\n  );\n});\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback, useRef, useState} from 'react';\nimport {FlatList, LayoutChangeEvent, View} from 'react-native';\nimport {Screen} from '../../../../components';\nimport {useColor} from '../../../../hooks';\nimport {getSmallestDimension} from '../../../../models';\nimport {useRootSelector} from '../../../../utils';\nimport {AddItem} from '../../components/AddItem';\nimport {List} from '../../components/List';\nimport {config} from '../../configs';\nimport {ListObject} from '../../types';\n\n// TODO: add landing page (actionables + record)\n// TODO: create data layer\n\n// TODO: fix keyboard scrolling (keyboard aware + recycler view)\n\n// TODO: figure out centering of list\n\nexport const Project = memo(function Project() {\n  const [lists, setLists] = useState<ListObject[]>([\n    {\n      id: '1',\n      title: 'Backlog',\n      items: [\n        {\n          id: '11',\n          title: 'clean desk',\n        },\n        {\n          id: '22',\n          title: 'clean room',\n        },\n        {\n          id: '33',\n          title: 'brush teeth',\n        },\n      ],\n    },\n    {\n      id: '2',\n      title: 'Todo',\n      items: [],\n    },\n    {\n      id: '3',\n      title: 'In Progress',\n      items: [],\n    },\n    {\n      id: '4',\n      title: 'Done',\n      items: [],\n    },\n  ]);\n  const {goBack} = useNavigation();\n  const color = useColor();\n  const screenWidth = useRootSelector(getSmallestDimension);\n  const listWidth = screenWidth * 0.7;\n  const listSize = listWidth + config.padding; // TODO: deal with marginRight and FlatList padding\n  const listsRef = useRef<FlatList | null>(null);\n  const listsCount = useRef(lists.length);\n  const keyboardHeight = useRootSelector(\n    (state) => state.device.keyboardHeight,\n  );\n  const [container, setContainer] = useState(0);\n  const keyboardPadding = keyboardHeight\n    ? config.padding * 8\n    : config.padding * 13;\n  const listMaxHeight = container - keyboardPadding - keyboardHeight;\n  const getItemId = useCallback((item) => item.id, []);\n\n  const addList = useCallback((title: string) => {\n    const date = String(Date.now());\n    setLists((p) => [...p, {id: date, title, items: []}]);\n  }, []);\n\n  const onLayout = useCallback(\n    (event: LayoutChangeEvent) => {\n      const {height} = event.nativeEvent.layout;\n      if (container > 0) {\n        return;\n      }\n      setContainer(height);\n    },\n    [container],\n  );\n\n  const renderList = useCallback(\n    ({item}) => {\n      return (\n        <List\n          addButtonPlaceholder=\"Card title...\"\n          addButtonTitle=\"Add card\"\n          borderRadius={config.borderRadius}\n          itemColor={color.surface}\n          key={item.id}\n          list={item}\n          listColor={color.background}\n          listWidth={listWidth}\n          maxHeight={listMaxHeight}\n          orientation=\"horizontal\"\n          padding={config.padding}\n        />\n      );\n    },\n    [color.surface, color.background, listWidth, listMaxHeight],\n  );\n\n  const renderAddList = useCallback(() => {\n    return (\n      <AddItem\n        backgroundColor={color.background}\n        borderRadius={config.borderRadius}\n        buttonTitle=\"Add List\"\n        inputPlaceholder=\"List title...\"\n        inputType=\"h4\"\n        itemWidth={listWidth}\n        onAdd={addList}\n      />\n    );\n  }, [addList, color.background, listWidth]);\n\n  const getItemLayout = useCallback(\n    (_, index) => ({\n      length: listSize,\n      offset: listSize * index,\n      index,\n    }),\n    [listSize],\n  );\n\n  const onListSizeChange = useCallback(() => {\n    if (lists.length > listsCount.current) {\n      listsRef.current?.scrollToIndex({\n        index: lists.length - 1,\n        viewPosition: 0.5,\n      });\n      listsCount.current = lists.length;\n    }\n  }, [lists.length]);\n\n  const navBack = useCallback(() => {\n    goBack();\n  }, [goBack]);\n\n  return (\n    <Screen onLeftPress={navBack} title=\"Focus\">\n      <View\n        onLayout={onLayout}\n        style={{flex: 1, backgroundColor: color.surface}}>\n        {!container ? null : (\n          <FlatList\n            ListFooterComponent={renderAddList} // TODO: make default FlatList with this setting\n            contentContainerStyle={{padding: config.padding}}\n            data={lists}\n            decelerationRate=\"fast\"\n            getItemLayout={getItemLayout}\n            horizontal\n            keyExtractor={getItemId}\n            keyboardShouldPersistTaps=\"handled\"\n            onContentSizeChange={onListSizeChange}\n            ref={listsRef}\n            renderItem={renderList}\n            showsHorizontalScrollIndicator={false}\n            snapToAlignment=\"center\"\n            snapToInterval={listSize}\n          />\n        )}\n      </View>\n    </Screen>\n  );\n});\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback, useState} from 'react';\nimport {LayoutChangeEvent} from 'react-native';\nimport {Screen} from '../../../../components';\nimport {useColor} from '../../../../hooks';\nimport {useRootSelector} from '../../../../utils';\nimport {\n  HandleKeyboard,\n  ListAdd,\n  ListContainer,\n  ListHeader2,\n  ListItems,\n} from '../../components';\nimport {config} from '../../configs';\nimport {getCategoryListIds} from '../../models';\n\n// TODO: add journal\n// TODO: add historical data\n// TODO: add purpose\n// TODO: add goals\n\nexport const Projects = memo(function Projects() {\n  const color = useColor();\n  const {navigate} = useNavigation();\n\n  const listIds = useRootSelector(getCategoryListIds);\n\n  const navNext = useCallback(() => {\n    navigate('Project');\n  }, [navigate]);\n\n  const [dimensions, setDimensions] = useState(0);\n\n  const onLayout = useCallback(\n    (event: LayoutChangeEvent) => {\n      const {height} = event.nativeEvent.layout;\n      if (dimensions > 0) {\n        return;\n      }\n      setDimensions(height);\n    },\n    [dimensions],\n  );\n\n  const maxHeight = dimensions / 2 - config.padding * 10;\n\n  return (\n    <Screen onRightPress={navNext} title=\"Projects\">\n      <HandleKeyboard\n        backgroundColor={color.surface}\n        onLayout={onLayout}\n        render={dimensions > 0}>\n        {listIds.map((listId) => (\n          <ListContainer key={listId}>\n            <ListHeader2 listId={listId} />\n            <ListItems listId={listId} maxHeight={maxHeight} />\n            <ListAdd\n              buttonTitle=\"Add project\"\n              inputPlaceholder=\"Project title...\"\n              listId={listId}\n            />\n          </ListContainer>\n        ))}\n      </HandleKeyboard>\n    </Screen>\n  );\n});\n","import {scaleLinear, scaleTime} from 'd3-scale';\nimport * as shape from 'd3-shape';\nimport * as React from 'react';\nimport {StyleSheet, View} from 'react-native';\nimport Svg, {Defs, LinearGradient, Path, Stop} from 'react-native-svg';\n\ninterface DataPoint {\n  date: number;\n  value: number;\n}\n\ninterface GraphProps {\n  data: DataPoint[];\n  width: number;\n  height: number;\n}\n\nconst strokeWidth = 4;\nconst padding = strokeWidth / 2;\nconst getDomain = (domain: number[]) => [\n  Math.min(...domain),\n  Math.max(...domain),\n];\n\nexport const Graph = ({\n  data,\n  width,\n  height,\n}: GraphProps): React.ReactElement => {\n  const scaleX = scaleTime()\n    .domain(getDomain(data.map((d) => d.date)))\n    .range([0, width]);\n  const scaleY = scaleLinear()\n    .domain(getDomain(data.map((d) => d.value)))\n    .range([height - padding, padding]);\n  const d = shape\n    .line<DataPoint>()\n    .x((p) => scaleX(p.date))\n    .y((p) => scaleY(p.value))\n    .curve(shape.curveBasis)(data) as string;\n  return (\n    <View style={{width, height}}>\n      <Svg style={StyleSheet.absoluteFill}>\n        <Defs>\n          <LinearGradient id=\"gradient\" x1=\"50%\" x2=\"50%\" y1=\"0%\" y2=\"100%\">\n            <Stop offset=\"0%\" stopColor=\"#cee3f9\" />\n            <Stop offset=\"80%\" stopColor=\"#ddedfa\" />\n            <Stop offset=\"100%\" stopColor=\"#feffff\" />\n          </LinearGradient>\n        </Defs>\n        <Path\n          d={`${d}L ${width} ${height} L 0 ${height}`}\n          fill=\"url(#gradient)\"\n        />\n        <Path fill=\"transparent\" stroke=\"#3977e3\" {...{d, strokeWidth}} />\n      </Svg>\n    </View>\n  );\n};\n","import React, {memo} from 'react';\nimport {Dimensions, ScrollView, View} from 'react-native';\nimport {Calendar, Screen, Text} from '../../../../components';\nimport {useColor} from '../../../../hooks';\nimport {Theme} from '../../../../utils';\nimport {Card} from '../../components/Card';\nimport {config} from '../../configs';\nimport {Graph} from './Graph';\n\n// TODO: add journal\n// TODO: add historical data\n// TODO: add purpose\n// TODO: add goals\n\ntype TitleProps = {name: string};\n\nconst Title = ({name}: TitleProps) => {\n  return (\n    <Text\n      emphasis=\"high\"\n      style={{paddingBottom: config.padding}}\n      title={name}\n      type=\"h4\"\n    />\n  );\n};\n\nconst data = [\n  {date: new Date(2018, 9, 1).getTime(), value: 0},\n  {date: new Date(2018, 9, 16).getTime(), value: 0},\n  {date: new Date(2018, 9, 17).getTime(), value: 200},\n  {date: new Date(2018, 10, 1).getTime(), value: 200},\n  {date: new Date(2018, 10, 2).getTime(), value: 300},\n  {date: new Date(2018, 10, 5).getTime(), value: 300},\n];\n\nexport const Reflect = memo(function Reflect() {\n  const color = useColor();\n\n  return (\n    <Screen title=\"Reflect\">\n      <ScrollView\n        contentContainerStyle={{\n          padding: Theme.padding.p04,\n          backgroundColor: color.surface,\n        }}\n        style={{backgroundColor: color.surface}}>\n        <Card>\n          <View>\n            <Title name=\"Purpose\" />\n            <Text title=\"Make a significant positive difference in global productivity\" />\n          </View>\n        </Card>\n        <Card>\n          <View>\n            <Title name=\"Goals\" />\n            <Text title=\"Top 3\" />\n            <Text title=\"Deep Focus\" />\n            <Text title=\"Smile\" />\n            <Text title=\"1 More Rep\" />\n          </View>\n        </Card>\n        <Card>\n          <View>\n            <Title name=\"Review (Progress)\" />\n            <View\n              style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>\n              <Graph\n                data={data}\n                height={200}\n                width={Dimensions.get('window').width - config.padding * 4}\n              />\n            </View>\n          </View>\n        </Card>\n        <Card>\n          <View>\n            <Title name=\"Reflect (Journal)\" />\n            <Calendar />\n          </View>\n        </Card>\n      </ScrollView>\n    </Screen>\n  );\n});\n","import {\n  BottomTabBarOptions,\n  createBottomTabNavigator,\n} from '@react-navigation/bottom-tabs';\nimport {Route} from '@react-navigation/native';\nimport {\n  createStackNavigator,\n  StackNavigationOptions,\n} from '@react-navigation/stack';\nimport React, {memo, useCallback} from 'react';\nimport {Icon} from '../../components';\nimport {useColor} from '../../hooks';\nimport {Account, Capture, Project, Projects, Reflect} from './screens';\n\nconst noHeader: StackNavigationOptions = {headerShown: false};\nconst RootTab = createBottomTabNavigator();\nconst RootStack = createStackNavigator();\nconst ProjectsStack = createStackNavigator();\n\ntype Tabs = 'Capture' | 'Focus' | 'Reflect' | 'Account';\ntype TabIcons = {\n  [key in Tabs]: {focused: string; unfocused: string};\n};\n\nconst tabIcons: TabIcons = {\n  Capture: {\n    focused: 'pencil-plus-outline',\n    unfocused: 'pencil-plus-outline',\n  },\n  Focus: {\n    focused: 'checkbox-multiple-marked-outline',\n    unfocused: 'checkbox-multiple-marked-outline',\n  },\n  Reflect: {focused: 'finance', unfocused: 'finance'},\n  Account: {focused: 'account', unfocused: 'account-outline'},\n};\n\ntype ScreenOptionsProps = {\n  route: Route<string, Record<string, unknown> | undefined>;\n};\n\ntype TabBarIconProps = {\n  focused: boolean;\n  size: number;\n};\n\nconst Focus = () => {\n  return (\n    <ProjectsStack.Navigator screenOptions={noHeader}>\n      <ProjectsStack.Screen component={Projects} name=\"Projects\" />\n      <ProjectsStack.Screen component={Project} name=\"Project\" />\n    </ProjectsStack.Navigator>\n  );\n};\n\nconst Tabs = () => {\n  const color = useColor();\n  const tabBarOptions: BottomTabBarOptions = {\n    keyboardHidesTabBar: true,\n    activeTintColor: color.primary,\n    inactiveTintColor: color.text,\n    showLabel: false,\n  };\n  const screenOptions = useCallback(\n    ({route}: ScreenOptionsProps) => ({\n      tabBarIcon: function tabBarIcon({focused, size}: TabBarIconProps) {\n        const focus = focused ? 'focused' : 'unfocused';\n        const iconColor = focused ? color.primary : color.text;\n        const name = (tabIcons as any)[route.name][focus];\n        return <Icon color={iconColor} name={name} size={size} />;\n      },\n    }),\n    [color],\n  );\n\n  return (\n    <RootTab.Navigator\n      screenOptions={screenOptions as any}\n      tabBarOptions={tabBarOptions}>\n      <RootTab.Screen component={Capture} name=\"Capture\" />\n      <RootTab.Screen component={Focus} name=\"Focus\" />\n      <RootTab.Screen component={Reflect} name=\"Reflect\" />\n    </RootTab.Navigator>\n  );\n};\n\nexport default memo(function Complete() {\n  return (\n    <RootStack.Navigator screenOptions={noHeader}>\n      <RootStack.Screen component={Tabs} name=\"main\" />\n      <RootStack.Screen component={Account} name=\"account\" />\n    </RootStack.Navigator>\n  );\n});\n\n/*\n\n# Data\n\n- user\n-> collections [projects, lists]\n-> boards [home, work, town] | [meeting notes, book summaries, checklists]\n-> lists [backlog, todo, in progress, done] | [draft, final]\n-> item [find comb, clear emails, daily standup]\n\n# Screens\n\n## Capture\n\n### Inbox (list -> item -> details)\n- \"add grey list\" -> @app\n- \"find comb\" -> @home\n- \"clear emails\" -> @work\n- \"put $20 in phone\" -> @town\n- \"drink water\" -> @after-waking-up\n- \"intensity + focus = deep work\" -> book summaries\n\n## Organize\n\n### Projects (item -> lists -> item -> details )\n- @home -> (backlog, todo, in progress, done xx, done xx)\n- @town\n- @work\n- @gym\n- @app\n\n### Lists (item -> list -> item -> detail)\n- meeting notes\n - one-on-one\n - daily standup\n- book summaries\n - the one thing\n - getting things done\n - eat that frog\n- gift ideas\n - mom\n - dad\n - girlfriend\n- checklists\n - after waking up\n - after entering bathroom\n\n## Reflect\n\n### Purpose\n\n### Goals\n\n### Review (Progress)\n\n### Reflect (Journal)\n\n## Account\n\n### Profile\n\n### Notifications\n\n### Payment\n*/\n"],"sourceRoot":""}