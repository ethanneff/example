{"version":3,"sources":["../node_modules/react-native-web/dist/exports/Button/index.js","../node_modules/react-native-web/dist/vendor/react-native/TouchHistoryMath/index.js","../node_modules/react-native-web/dist/vendor/react-native/PanResponder/index.js","../node_modules/react-native-web/dist/exports/PanResponder/index.js","apps/Arcade/PapiJump/index.tsx","apps/Arcade/Archero/index.tsx","apps/Arcade/Landing/index.tsx","apps/Arcade/Snake/index.web.tsx","apps/Arcade/FlappyBird/index.tsx","apps/Arcade/index.tsx"],"names":["Button","props","accessibilityLabel","color","disabled","onPress","testID","title","React","createElement","TouchableOpacity","accessibilityRole","style","styles","button","backgroundColor","buttonDisabled","Text","text","textDisabled","StyleSheet","create","borderRadius","fontWeight","padding","textAlign","textTransform","TouchHistoryMath","centroidDimension","touchHistory","touchesChangedAfter","isXAxis","ofCurrent","touchBank","total","count","oneTouchData","numberActiveTouches","indexOfSingleActiveTouch","touchActive","currentTimeStamp","currentPageX","currentPageY","previousPageX","previousPageY","i","length","touchTrack","undefined","noCentroid","currentCentroidXOfTouchesChangedAfter","currentCentroidYOfTouchesChangedAfter","previousCentroidXOfTouchesChangedAfter","previousCentroidYOfTouchesChangedAfter","currentCentroidX","currentCentroidY","PanResponder","_initializeGestureState","gestureState","moveX","moveY","x0","y0","dx","dy","vx","vy","_accountsForMovesUpTo","_updateGestureStateOnMove","movedAfter","prevX","x","prevY","y","nextDX","nextDY","dt","mostRecentTimeStamp","config","interactionState","handle","stateID","Math","random","panHandlers","onStartShouldSetResponder","event","onStartShouldSetPanResponder","onMoveShouldSetResponder","onMoveShouldSetPanResponder","onStartShouldSetResponderCapture","nativeEvent","touches","onStartShouldSetPanResponderCapture","onMoveShouldSetResponderCapture","onMoveShouldSetPanResponderCapture","onResponderGrant","InteractionManager","createInteractionHandle","onPanResponderGrant","onShouldBlockNativeResponder","onResponderReject","clearInteractionHandle","onPanResponderReject","onResponderRelease","onPanResponderRelease","onResponderStart","onPanResponderStart","onResponderMove","onPanResponderMove","onResponderEnd","onPanResponderEnd","onResponderTerminate","onPanResponderTerminate","onResponderTerminationRequest","onPanResponderTerminationRequest","getInteractionHandle","callback","Papi","memo","size","dropShadow","useDropShadow","useDriver","useNativeDriver","location","Animated","ValueXY","useEffect","timing","toValue","duration","easing","Easing","bounce","start","View","getLayout","height","width","PapiJump","useColor","goBack","useNavigation","container","surface","flex","navBack","useCallback","onLeftPress","primary","getLimit","value","limit","getBounds","Archero","timer","useRef","interval","gesture","window","useRootSelector","state","dimension","useState","dimensions","setDimensions","joystickSize","joystickCenter","thumbSize","initialJoystickLoc","initialCharLoc","charSize","initialThumbLoc","characterValueXY","joystick","thumb","character","addListener","panGesture","_","g","current","onUpdate","setInterval","clearInterval","spring","offset","offset2","moveJoystick","moveCharacter","angle","atan2","dz","sqrt","pow","z","sin","cos","moveThumb","onLayout","layout","success","brand","justifyContent","alignItems","Theme","overlay","colorWithOpacity","screens","Landing","navigate","screen","map","key","Snake","FlappyBird","background","noHeader","headerShown","Stack","createStackNavigator","Navigator","screenOptions","Screen","component","name"],"mappings":"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","file":"static/js/5.0ff23982.chunk.js","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport StyleSheet from '../StyleSheet';\nimport TouchableOpacity from '../TouchableOpacity';\nimport Text from '../Text';\nimport React from 'react';\nexport default function Button(props) {\n  var accessibilityLabel = props.accessibilityLabel,\n      color = props.color,\n      disabled = props.disabled,\n      onPress = props.onPress,\n      testID = props.testID,\n      title = props.title;\n  return React.createElement(TouchableOpacity, {\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: \"button\",\n    disabled: disabled,\n    onPress: onPress,\n    style: [styles.button, color && {\n      backgroundColor: color\n    }, disabled && styles.buttonDisabled],\n    testID: testID\n  }, React.createElement(Text, {\n    style: [styles.text, disabled && styles.textDisabled]\n  }, title));\n}\nvar styles = StyleSheet.create({\n  button: {\n    backgroundColor: '#2196F3',\n    borderRadius: 2\n  },\n  text: {\n    color: '#fff',\n    fontWeight: '500',\n    padding: 8,\n    textAlign: 'center',\n    textTransform: 'uppercase'\n  },\n  buttonDisabled: {\n    backgroundColor: '#dfdfdf'\n  },\n  textDisabled: {\n    color: '#a1a1a1'\n  }\n});","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\nvar TouchHistoryMath = {\n  /**\n   * This code is optimized and not intended to look beautiful. This allows\n   * computing of touch centroids that have moved after `touchesChangedAfter`\n   * timeStamp. You can compute the current centroid involving all touches\n   * moves after `touchesChangedAfter`, or you can compute the previous\n   * centroid of all touches that were moved after `touchesChangedAfter`.\n   *\n   * @param {TouchHistoryMath} touchHistory Standard Responder touch track\n   * data.\n   * @param {number} touchesChangedAfter timeStamp after which moved touches\n   * are considered \"actively moving\" - not just \"active\".\n   * @param {boolean} isXAxis Consider `x` dimension vs. `y` dimension.\n   * @param {boolean} ofCurrent Compute current centroid for actively moving\n   * touches vs. previous centroid of now actively moving touches.\n   * @return {number} value of centroid in specified dimension.\n   */\n  centroidDimension: function centroidDimension(touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {\n    var touchBank = touchHistory.touchBank;\n    var total = 0;\n    var count = 0;\n    var oneTouchData = touchHistory.numberActiveTouches === 1 ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;\n\n    if (oneTouchData !== null) {\n      if (oneTouchData.touchActive && oneTouchData.currentTimeStamp > touchesChangedAfter) {\n        total += ofCurrent && isXAxis ? oneTouchData.currentPageX : ofCurrent && !isXAxis ? oneTouchData.currentPageY : !ofCurrent && isXAxis ? oneTouchData.previousPageX : oneTouchData.previousPageY;\n        count = 1;\n      }\n    } else {\n      for (var i = 0; i < touchBank.length; i++) {\n        var touchTrack = touchBank[i];\n\n        if (touchTrack !== null && touchTrack !== undefined && touchTrack.touchActive && touchTrack.currentTimeStamp >= touchesChangedAfter) {\n          var toAdd = void 0; // Yuck, program temporarily in invalid state.\n\n          if (ofCurrent && isXAxis) {\n            toAdd = touchTrack.currentPageX;\n          } else if (ofCurrent && !isXAxis) {\n            toAdd = touchTrack.currentPageY;\n          } else if (!ofCurrent && isXAxis) {\n            toAdd = touchTrack.previousPageX;\n          } else {\n            toAdd = touchTrack.previousPageY;\n          }\n\n          total += toAdd;\n          count++;\n        }\n      }\n    }\n\n    return count > 0 ? total / count : TouchHistoryMath.noCentroid;\n  },\n  currentCentroidXOfTouchesChangedAfter: function currentCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, // isXAxis\n    true // ofCurrent\n    );\n  },\n  currentCentroidYOfTouchesChangedAfter: function currentCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, // isXAxis\n    true // ofCurrent\n    );\n  },\n  previousCentroidXOfTouchesChangedAfter: function previousCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, // isXAxis\n    false // ofCurrent\n    );\n  },\n  previousCentroidYOfTouchesChangedAfter: function previousCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, // isXAxis\n    false // ofCurrent\n    );\n  },\n  currentCentroidX: function currentCentroidX(touchHistory) {\n    return TouchHistoryMath.centroidDimension(touchHistory, 0, // touchesChangedAfter\n    true, // isXAxis\n    true // ofCurrent\n    );\n  },\n  currentCentroidY: function currentCentroidY(touchHistory) {\n    return TouchHistoryMath.centroidDimension(touchHistory, 0, // touchesChangedAfter\n    false, // isXAxis\n    true // ofCurrent\n    );\n  },\n  noCentroid: -1\n};\nexport default TouchHistoryMath;","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport InteractionManager from '../../../exports/InteractionManager';\nimport TouchHistoryMath from '../TouchHistoryMath';\nvar currentCentroidXOfTouchesChangedAfter = TouchHistoryMath.currentCentroidXOfTouchesChangedAfter;\nvar currentCentroidYOfTouchesChangedAfter = TouchHistoryMath.currentCentroidYOfTouchesChangedAfter;\nvar previousCentroidXOfTouchesChangedAfter = TouchHistoryMath.previousCentroidXOfTouchesChangedAfter;\nvar previousCentroidYOfTouchesChangedAfter = TouchHistoryMath.previousCentroidYOfTouchesChangedAfter;\nvar currentCentroidX = TouchHistoryMath.currentCentroidX;\nvar currentCentroidY = TouchHistoryMath.currentCentroidY;\n/**\n * `PanResponder` reconciles several touches into a single gesture. It makes\n * single-touch gestures resilient to extra touches, and can be used to\n * recognize simple multi-touch gestures.\n *\n * By default, `PanResponder` holds an `InteractionManager` handle to block\n * long-running JS events from interrupting active gestures.\n *\n * It provides a predictable wrapper of the responder handlers provided by the\n * [gesture responder system](docs/gesture-responder-system.html).\n * For each handler, it provides a new `gestureState` object alongside the\n * native event object:\n *\n * ```\n * onPanResponderMove: (event, gestureState) => {}\n * ```\n *\n * A native event is a synthetic touch event with the following form:\n *\n *  - `nativeEvent`\n *      + `changedTouches` - Array of all touch events that have changed since the last event\n *      + `identifier` - The ID of the touch\n *      + `locationX` - The X position of the touch, relative to the element\n *      + `locationY` - The Y position of the touch, relative to the element\n *      + `pageX` - The X position of the touch, relative to the root element\n *      + `pageY` - The Y position of the touch, relative to the root element\n *      + `target` - The node id of the element receiving the touch event\n *      + `timestamp` - A time identifier for the touch, useful for velocity calculation\n *      + `touches` - Array of all current touches on the screen\n *\n * A `gestureState` object has the following:\n *\n *  - `stateID` - ID of the gestureState- persisted as long as there at least\n *     one touch on screen\n *  - `moveX` - the latest screen coordinates of the recently-moved touch\n *  - `moveY` - the latest screen coordinates of the recently-moved touch\n *  - `x0` - the screen coordinates of the responder grant\n *  - `y0` - the screen coordinates of the responder grant\n *  - `dx` - accumulated distance of the gesture since the touch started\n *  - `dy` - accumulated distance of the gesture since the touch started\n *  - `vx` - current velocity of the gesture\n *  - `vy` - current velocity of the gesture\n *  - `numberActiveTouches` - Number of touches currently on screen\n *\n * ### Basic Usage\n *\n * ```\n *   componentWillMount: function() {\n *     this._panResponder = PanResponder.create({\n *       // Ask to be the responder:\n *       onStartShouldSetPanResponder: (evt, gestureState) => true,\n *       onStartShouldSetPanResponderCapture: (evt, gestureState) => true,\n *       onMoveShouldSetPanResponder: (evt, gestureState) => true,\n *       onMoveShouldSetPanResponderCapture: (evt, gestureState) => true,\n *\n *       onPanResponderGrant: (evt, gestureState) => {\n *         // The gesture has started. Show visual feedback so the user knows\n *         // what is happening!\n *\n *         // gestureState.d{x,y} will be set to zero now\n *       },\n *       onPanResponderMove: (evt, gestureState) => {\n *         // The most recent move distance is gestureState.move{X,Y}\n *\n *         // The accumulated gesture distance since becoming responder is\n *         // gestureState.d{x,y}\n *       },\n *       onPanResponderTerminationRequest: (evt, gestureState) => true,\n *       onPanResponderRelease: (evt, gestureState) => {\n *         // The user has released all touches while this view is the\n *         // responder. This typically means a gesture has succeeded\n *       },\n *       onPanResponderTerminate: (evt, gestureState) => {\n *         // Another component has become the responder, so this gesture\n *         // should be cancelled\n *       },\n *       onShouldBlockNativeResponder: (evt, gestureState) => {\n *         // Returns whether this component should block native components from becoming the JS\n *         // responder. Returns true by default. Is currently only supported on android.\n *         return true;\n *       },\n *     });\n *   },\n *\n *   render: function() {\n *     return (\n *       <View {...this._panResponder.panHandlers} />\n *     );\n *   },\n *\n * ```\n *\n * ### Working Example\n *\n * To see it in action, try the\n * [PanResponder example in RNTester](https://github.com/facebook/react-native/blob/master/RNTester/js/PanResponderExample.js)\n */\n\nvar PanResponder = {\n  /**\n   *\n   * A graphical explanation of the touch data flow:\n   *\n   * +----------------------------+             +--------------------------------+\n   * | ResponderTouchHistoryStore |             |TouchHistoryMath                |\n   * +----------------------------+             +----------+---------------------+\n   * |Global store of touchHistory|             |Allocation-less math util       |\n   * |including activeness, start |             |on touch history (centroids     |\n   * |position, prev/cur position.|             |and multitouch movement etc)    |\n   * |                            |             |                                |\n   * +----^-----------------------+             +----^---------------------------+\n   *      |                                          |\n   *      | (records relevant history                |\n   *      |  of touches relevant for                 |\n   *      |  implementing higher level               |\n   *      |  gestures)                               |\n   *      |                                          |\n   * +----+-----------------------+             +----|---------------------------+\n   * | ResponderEventPlugin       |             |    |   Your App/Component      |\n   * +----------------------------+             +----|---------------------------+\n   * |Negotiates which view gets  | Low level   |    |             High level    |\n   * |onResponderMove events.     | events w/   |  +-+-------+     events w/     |\n   * |Also records history into   | touchHistory|  |   Pan   |     multitouch +  |\n   * |ResponderTouchHistoryStore. +---------------->Responder+-----> accumulative|\n   * +----------------------------+ attached to |  |         |     distance and  |\n   *                                 each event |  +---------+     velocity.     |\n   *                                            |                                |\n   *                                            |                                |\n   *                                            +--------------------------------+\n   *\n   *\n   *\n   * Gesture that calculates cumulative movement over time in a way that just\n   * \"does the right thing\" for multiple touches. The \"right thing\" is very\n   * nuanced. When moving two touches in opposite directions, the cumulative\n   * distance is zero in each dimension. When two touches move in parallel five\n   * pixels in the same direction, the cumulative distance is five, not ten. If\n   * two touches start, one moves five in a direction, then stops and the other\n   * touch moves fives in the same direction, the cumulative distance is ten.\n   *\n   * This logic requires a kind of processing of time \"clusters\" of touch events\n   * so that two touch moves that essentially occur in parallel but move every\n   * other frame respectively, are considered part of the same movement.\n   *\n   * Explanation of some of the non-obvious fields:\n   *\n   * - moveX/moveY: If no move event has been observed, then `(moveX, moveY)` is\n   *   invalid. If a move event has been observed, `(moveX, moveY)` is the\n   *   centroid of the most recently moved \"cluster\" of active touches.\n   *   (Currently all move have the same timeStamp, but later we should add some\n   *   threshold for what is considered to be \"moving\"). If a palm is\n   *   accidentally counted as a touch, but a finger is moving greatly, the palm\n   *   will move slightly, but we only want to count the single moving touch.\n   * - x0/y0: Centroid location (non-cumulative) at the time of becoming\n   *   responder.\n   * - dx/dy: Cumulative touch distance - not the same thing as sum of each touch\n   *   distance. Accounts for touch moves that are clustered together in time,\n   *   moving the same direction. Only valid when currently responder (otherwise,\n   *   it only represents the drag distance below the threshold).\n   * - vx/vy: Velocity.\n   */\n  _initializeGestureState: function _initializeGestureState(gestureState) {\n    gestureState.moveX = 0;\n    gestureState.moveY = 0;\n    gestureState.x0 = 0;\n    gestureState.y0 = 0;\n    gestureState.dx = 0;\n    gestureState.dy = 0;\n    gestureState.vx = 0;\n    gestureState.vy = 0;\n    gestureState.numberActiveTouches = 0; // All `gestureState` accounts for timeStamps up until:\n\n    gestureState._accountsForMovesUpTo = 0;\n  },\n\n  /**\n   * This is nuanced and is necessary. It is incorrect to continuously take all\n   * active *and* recently moved touches, find the centroid, and track how that\n   * result changes over time. Instead, we must take all recently moved\n   * touches, and calculate how the centroid has changed just for those\n   * recently moved touches, and append that change to an accumulator. This is\n   * to (at least) handle the case where the user is moving three fingers, and\n   * then one of the fingers stops but the other two continue.\n   *\n   * This is very different than taking all of the recently moved touches and\n   * storing their centroid as `dx/dy`. For correctness, we must *accumulate\n   * changes* in the centroid of recently moved touches.\n   *\n   * There is also some nuance with how we handle multiple moved touches in a\n   * single event. With the way `ReactNativeEventEmitter` dispatches touches as\n   * individual events, multiple touches generate two 'move' events, each of\n   * them triggering `onResponderMove`. But with the way `PanResponder` works,\n   * all of the gesture inference is performed on the first dispatch, since it\n   * looks at all of the touches (even the ones for which there hasn't been a\n   * native dispatch yet). Therefore, `PanResponder` does not call\n   * `onResponderMove` passed the first dispatch. This diverges from the\n   * typical responder callback pattern (without using `PanResponder`), but\n   * avoids more dispatches than necessary.\n   */\n  _updateGestureStateOnMove: function _updateGestureStateOnMove(gestureState, touchHistory) {\n    gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n    gestureState.moveX = currentCentroidXOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);\n    gestureState.moveY = currentCentroidYOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);\n    var movedAfter = gestureState._accountsForMovesUpTo;\n    var prevX = previousCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n    var x = currentCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n    var prevY = previousCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n    var y = currentCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n    var nextDX = gestureState.dx + (x - prevX);\n    var nextDY = gestureState.dy + (y - prevY); // TODO: This must be filtered intelligently.\n\n    var dt = touchHistory.mostRecentTimeStamp - gestureState._accountsForMovesUpTo;\n    gestureState.vx = (nextDX - gestureState.dx) / dt;\n    gestureState.vy = (nextDY - gestureState.dy) / dt;\n    gestureState.dx = nextDX;\n    gestureState.dy = nextDY;\n    gestureState._accountsForMovesUpTo = touchHistory.mostRecentTimeStamp;\n  },\n\n  /**\n   * @param {object} config Enhanced versions of all of the responder callbacks\n   * that provide not only the typical `ResponderSyntheticEvent`, but also the\n   * `PanResponder` gesture state.  Simply replace the word `Responder` with\n   * `PanResponder` in each of the typical `onResponder*` callbacks. For\n   * example, the `config` object would look like:\n   *\n   *  - `onMoveShouldSetPanResponder: (e, gestureState) => {...}`\n   *  - `onMoveShouldSetPanResponderCapture: (e, gestureState) => {...}`\n   *  - `onStartShouldSetPanResponder: (e, gestureState) => {...}`\n   *  - `onStartShouldSetPanResponderCapture: (e, gestureState) => {...}`\n   *  - `onPanResponderReject: (e, gestureState) => {...}`\n   *  - `onPanResponderGrant: (e, gestureState) => {...}`\n   *  - `onPanResponderStart: (e, gestureState) => {...}`\n   *  - `onPanResponderEnd: (e, gestureState) => {...}`\n   *  - `onPanResponderRelease: (e, gestureState) => {...}`\n   *  - `onPanResponderMove: (e, gestureState) => {...}`\n   *  - `onPanResponderTerminate: (e, gestureState) => {...}`\n   *  - `onPanResponderTerminationRequest: (e, gestureState) => {...}`\n   *  - `onShouldBlockNativeResponder: (e, gestureState) => {...}`\n   *\n   *  In general, for events that have capture equivalents, we update the\n   *  gestureState once in the capture phase and can use it in the bubble phase\n   *  as well.\n   *\n   *  Be careful with onStartShould* callbacks. They only reflect updated\n   *  `gestureState` for start/end events that bubble/capture to the Node.\n   *  Once the node is the responder, you can rely on every start/end event\n   *  being processed by the gesture and `gestureState` being updated\n   *  accordingly. (numberActiveTouches) may not be totally accurate unless you\n   *  are the responder.\n   */\n  create: function create(config) {\n    var interactionState = {\n      handle: null\n    };\n    var gestureState = {\n      // Useful for debugging\n      stateID: Math.random(),\n      moveX: 0,\n      moveY: 0,\n      x0: 0,\n      y0: 0,\n      dx: 0,\n      dy: 0,\n      vx: 0,\n      vy: 0,\n      numberActiveTouches: 0,\n      _accountsForMovesUpTo: 0\n    };\n    var panHandlers = {\n      onStartShouldSetResponder: function onStartShouldSetResponder(event) {\n        return config.onStartShouldSetPanResponder == null ? false : config.onStartShouldSetPanResponder(event, gestureState);\n      },\n      onMoveShouldSetResponder: function onMoveShouldSetResponder(event) {\n        return config.onMoveShouldSetPanResponder == null ? false : config.onMoveShouldSetPanResponder(event, gestureState);\n      },\n      onStartShouldSetResponderCapture: function onStartShouldSetResponderCapture(event) {\n        // TODO: Actually, we should reinitialize the state any time\n        // touches.length increases from 0 active to > 0 active.\n        if (event.nativeEvent.touches.length === 1) {\n          PanResponder._initializeGestureState(gestureState);\n        }\n\n        gestureState.numberActiveTouches = event.touchHistory.numberActiveTouches;\n        return config.onStartShouldSetPanResponderCapture != null ? config.onStartShouldSetPanResponderCapture(event, gestureState) : false;\n      },\n      onMoveShouldSetResponderCapture: function onMoveShouldSetResponderCapture(event) {\n        var touchHistory = event.touchHistory; // Responder system incorrectly dispatches should* to current responder\n        // Filter out any touch moves past the first one - we would have\n        // already processed multi-touch geometry during the first event.\n\n        if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {\n          return false;\n        }\n\n        PanResponder._updateGestureStateOnMove(gestureState, touchHistory);\n\n        return config.onMoveShouldSetPanResponderCapture ? config.onMoveShouldSetPanResponderCapture(event, gestureState) : false;\n      },\n      onResponderGrant: function onResponderGrant(event) {\n        if (!interactionState.handle) {\n          interactionState.handle = InteractionManager.createInteractionHandle();\n        }\n\n        gestureState.x0 = currentCentroidX(event.touchHistory);\n        gestureState.y0 = currentCentroidY(event.touchHistory);\n        gestureState.dx = 0;\n        gestureState.dy = 0;\n\n        if (config.onPanResponderGrant) {\n          config.onPanResponderGrant(event, gestureState);\n        } // TODO: t7467124 investigate if this can be removed\n\n\n        return config.onShouldBlockNativeResponder == null ? true : config.onShouldBlockNativeResponder(event, gestureState);\n      },\n      onResponderReject: function onResponderReject(event) {\n        clearInteractionHandle(interactionState, config.onPanResponderReject, event, gestureState);\n      },\n      onResponderRelease: function onResponderRelease(event) {\n        clearInteractionHandle(interactionState, config.onPanResponderRelease, event, gestureState);\n\n        PanResponder._initializeGestureState(gestureState);\n      },\n      onResponderStart: function onResponderStart(event) {\n        var touchHistory = event.touchHistory;\n        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n\n        if (config.onPanResponderStart) {\n          config.onPanResponderStart(event, gestureState);\n        }\n      },\n      onResponderMove: function onResponderMove(event) {\n        var touchHistory = event.touchHistory; // Guard against the dispatch of two touch moves when there are two\n        // simultaneously changed touches.\n\n        if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {\n          return;\n        } // Filter out any touch moves past the first one - we would have\n        // already processed multi-touch geometry during the first event.\n\n\n        PanResponder._updateGestureStateOnMove(gestureState, touchHistory);\n\n        if (config.onPanResponderMove) {\n          config.onPanResponderMove(event, gestureState);\n        }\n      },\n      onResponderEnd: function onResponderEnd(event) {\n        var touchHistory = event.touchHistory;\n        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n        clearInteractionHandle(interactionState, config.onPanResponderEnd, event, gestureState);\n      },\n      onResponderTerminate: function onResponderTerminate(event) {\n        clearInteractionHandle(interactionState, config.onPanResponderTerminate, event, gestureState);\n\n        PanResponder._initializeGestureState(gestureState);\n      },\n      onResponderTerminationRequest: function onResponderTerminationRequest(event) {\n        return config.onPanResponderTerminationRequest == null ? true : config.onPanResponderTerminationRequest(event, gestureState);\n      }\n    };\n    return {\n      panHandlers: panHandlers,\n      getInteractionHandle: function getInteractionHandle() {\n        return interactionState.handle;\n      }\n    };\n  }\n};\n\nfunction clearInteractionHandle(interactionState, callback, event, gestureState) {\n  if (interactionState.handle) {\n    InteractionManager.clearInteractionHandle(interactionState.handle);\n    interactionState.handle = null;\n  }\n\n  if (callback) {\n    callback(event, gestureState);\n  }\n}\n\nexport default PanResponder;","import PanResponder from '../../vendor/react-native/PanResponder';\nexport default PanResponder;","import React, {memo, useCallback, useEffect} from 'react';\nimport {Animated, Easing, StyleSheet, View} from 'react-native';\nimport {useNavigation} from '@react-navigation/native';\nimport {Screen} from '../../../components';\nimport {useColor, useDropShadow, useNativeDriver} from '../../../hooks';\n\ntype PapiProps = {size: number; color: string};\n\nconst Papi = memo(({size, color}: PapiProps) => {\n  const dropShadow = useDropShadow();\n  const useDriver = useNativeDriver();\n  const location = new Animated.ValueXY({x: 0, y: 0});\n\n  useEffect(() => {\n    const toValue = {x: 300, y: 600};\n    Animated.timing(location, {\n      toValue,\n      duration: 3000,\n      easing: Easing.bounce,\n      useNativeDriver: useDriver,\n    }).start();\n  }, [location, useDriver]);\n\n  return (\n    <Animated.View\n      style={[\n        location.getLayout(),\n        {\n          height: size,\n          width: size,\n          borderRadius: size,\n          backgroundColor: color,\n          ...dropShadow(10),\n        },\n      ]}\n    />\n  );\n});\n\nexport const PapiJump = memo(function PapiJump() {\n  const color = useColor();\n  const {goBack} = useNavigation();\n  const styles = StyleSheet.create({\n    container: {\n      backgroundColor: color.surface,\n      flex: 1,\n    },\n  });\n  const navBack = useCallback(() => goBack(), [goBack]);\n  return (\n    <Screen onLeftPress={navBack} title=\"Papi Jump\">\n      <View style={styles.container}>\n        <Papi color={color.primary} size={50} />\n      </View>\n    </Screen>\n  );\n});\n","import React, {memo, useCallback, useRef, useState} from 'react';\nimport {\n  Animated,\n  LayoutChangeEvent,\n  PanResponder,\n  PanResponderInstance,\n  View,\n} from 'react-native';\nimport {useNavigation} from '@react-navigation/native';\nimport {useColor, useNativeDriver} from '../../../hooks';\nimport {Theme, colorWithOpacity, useRootSelector} from '../../../utils';\nimport {Screen} from '../../../components';\n\nconst charSize = 50;\nconst charSpeed = 40;\nconst fps = 1000 / 60;\n\nconst getLimit = (value: number, limit: number) =>\n  value > limit ? limit : value < -limit ? -limit : value;\nconst getBounds = (value: number, limit: number, size: number) =>\n  value > limit - size ? limit - size : value < 0 ? 0 : value;\n\nexport const Archero = memo(function Archero() {\n  const color = useColor();\n  const {goBack} = useNavigation();\n  const useDriver = useNativeDriver();\n  const timer = useRef(false);\n  const interval = useRef<NodeJS.Timeout | null>(null);\n  const gesture = useRef({x0: 0, y0: 0, dx: 0, dy: 0});\n  const window = useRootSelector((state) => state.dimension.window);\n  const [dimensions, setDimensions] = useState({width: 1000, height: 1000});\n  const {width, height} = dimensions;\n  const smallest = width > height ? height : width;\n  const joystickSize = smallest / 3;\n  const joystickCenter = joystickSize / 2;\n  const thumbSize = joystickSize / 3;\n  const initialJoystickLoc = {\n    x: width / 2 - joystickCenter,\n    y: height - joystickSize - 75,\n  };\n  const initialCharLoc = {\n    x: width / 2 - charSize / 2,\n    y: height / 2 - charSize / 2,\n  };\n  const initialThumbLoc = {x: 0, y: 0};\n  let characterValueXY = initialCharLoc;\n  const joystick: Animated.ValueXY = new Animated.ValueXY(initialJoystickLoc);\n  const thumb: Animated.ValueXY = new Animated.ValueXY(initialThumbLoc);\n  const character: Animated.ValueXY = new Animated.ValueXY(initialCharLoc);\n  character.addListener(({x, y}) => {\n    characterValueXY = {x, y};\n  });\n\n  const moveCharacter = () => {\n    const {dx, dy} = gesture.current;\n    const vx = getLimit(dx, charSpeed);\n    const vy = getLimit(dy, charSpeed);\n    const x = getBounds(characterValueXY.x + vx, width, charSize);\n    const y = getBounds(characterValueXY.y + vy, height, charSize);\n    Animated.spring(character, {\n      toValue: {x, y},\n      useNativeDriver: useDriver,\n    }).start();\n  };\n\n  const moveThumb = () => {\n    const {dx, dy} = gesture.current;\n    const angle = Math.atan2(dx, dy);\n    const dz = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));\n    const z = getLimit(dz, thumbSize);\n    const x = z * Math.sin(angle);\n    const y = z * Math.cos(angle);\n    Animated.spring(thumb, {\n      toValue: {x, y},\n      useNativeDriver: useDriver,\n    }).start();\n  };\n\n  const moveJoystick = () => {\n    const {x0, y0} = gesture.current;\n    const offset = window.height - dimensions.height;\n    const offset2 = window.width - dimensions.width;\n    // TODO: handle joystick location better in landscape\n    const toValue = {\n      x: x0 - joystickCenter - offset2 / 2,\n      y: y0 - joystickCenter - offset / 2 - joystickSize / 1.5,\n    };\n    Animated.spring(joystick, {toValue, useNativeDriver: useDriver}).start();\n  };\n\n  const resetJoystick = () => {\n    Animated.spring(joystick, {\n      toValue: initialJoystickLoc,\n      useNativeDriver: useDriver,\n    }).start();\n    Animated.spring(thumb, {\n      toValue: initialThumbLoc,\n      useNativeDriver: useDriver,\n    }).start();\n  };\n\n  const panGesture: PanResponderInstance = PanResponder.create({\n    onStartShouldSetPanResponder: () => true,\n    onMoveShouldSetPanResponderCapture: () => true,\n    onPanResponderStart: (_, g) => {\n      timer.current = true;\n      gesture.current = {x0: g.x0, y0: g.y0, dx: g.dx, dy: g.dy};\n      onUpdate();\n    },\n    onPanResponderMove: (_, g) => {\n      gesture.current = {x0: g.x0, y0: g.y0, dx: g.dx, dy: g.dy};\n    },\n    onPanResponderRelease: () => {\n      timer.current = false;\n    },\n  });\n\n  const onUpdate = () => {\n    interval.current = setInterval(() => {\n      if (!timer.current) {\n        if (interval.current) {\n          clearInterval(interval.current);\n        }\n        resetJoystick();\n        return;\n      }\n      moveJoystick();\n      moveCharacter();\n      moveThumb();\n    }, fps);\n  };\n\n  const onLayout = (event: LayoutChangeEvent) => {\n    const layout = event.nativeEvent.layout;\n    setDimensions({width: layout.width, height: layout.height});\n  };\n\n  const navBack = useCallback(() => goBack(), [goBack]);\n\n  return (\n    <Screen onLeftPress={navBack} title=\"Archero\">\n      <View\n        onLayout={onLayout}\n        style={{flex: 1, backgroundColor: color.success}}\n        {...panGesture.panHandlers}>\n        <Animated.View\n          style={[\n            character.getLayout(),\n            {\n              width: charSize,\n              height: charSize,\n              backgroundColor: color.brand,\n            },\n          ]}\n        />\n        <Animated.View\n          style={[\n            joystick.getLayout(),\n            {\n              justifyContent: 'center',\n              alignItems: 'center',\n              borderRadius: 500,\n              width: joystickSize,\n              height: joystickSize,\n              backgroundColor: Theme.color.overlay,\n            },\n          ]}>\n          <View\n            style={{\n              justifyContent: 'center',\n              alignItems: 'center',\n              borderRadius: 500,\n              width: thumbSize,\n              height: thumbSize,\n              backgroundColor: Theme.color.overlay,\n            }}>\n            <Animated.View\n              style={[\n                thumb.getLayout(),\n                {\n                  borderRadius: 500,\n                  width: thumbSize,\n                  height: thumbSize,\n                  backgroundColor: colorWithOpacity(color.brand, 0.8),\n                },\n              ]}\n            />\n          </View>\n        </Animated.View>\n      </View>\n    </Screen>\n  );\n});\n","import React, {memo, useCallback} from 'react';\nimport {Button} from 'react-native';\nimport {useNavigation} from '@react-navigation/native';\nimport {Screen} from '../../../components';\n\nconst screens = ['archero', 'flappyBird', 'papiJump', 'snake'];\n\nexport const Landing = memo(function Landing() {\n  const {goBack, navigate} = useNavigation();\n  const navBack = useCallback(() => goBack(), [goBack]);\n  const onPress = useCallback((screen: string) => () => navigate(screen), [\n    navigate,\n  ]);\n  return (\n    <Screen onLeftPress={navBack} title=\"Arcade\">\n      {screens.map((screen) => (\n        <Button key={screen} onPress={onPress(screen)} title={screen} />\n      ))}\n    </Screen>\n  );\n});\n","import React, {memo, useCallback} from 'react';\nimport {useNavigation} from '@react-navigation/native';\nimport {Screen} from '../../../components';\n\nexport const Snake = memo(function Snake() {\n  const {goBack} = useNavigation();\n  const navBack = useCallback(() => goBack(), [goBack]);\n\n  return <Screen onLeftPress={navBack} title=\"Snake\" />;\n});\n","import React, {memo, useCallback} from 'react';\nimport {StyleSheet, View} from 'react-native';\nimport {useNavigation} from '@react-navigation/native';\nimport {Screen} from '../../../components';\nimport {useColor} from '../../../hooks';\n\nexport const FlappyBird = memo(function FlappyBird() {\n  const color = useColor();\n  const {goBack} = useNavigation();\n  const styles = StyleSheet.create({\n    container: {\n      backgroundColor: color.background,\n    },\n  });\n  const navBack = useCallback(() => goBack(), [goBack]);\n  return (\n    <Screen onLeftPress={navBack} title=\"Flappy Bird\">\n      <View style={styles.container} />\n    </Screen>\n  );\n});\n","import React, {memo} from 'react';\nimport {createStackNavigator} from '@react-navigation/stack';\nimport {PapiJump} from './PapiJump';\nimport {Archero} from './Archero';\nimport {Landing} from './Landing';\nimport {Snake} from './Snake';\nimport {FlappyBird} from './FlappyBird';\n\nconst noHeader = {headerShown: false};\nconst Stack = createStackNavigator();\n\nexport default memo(function Games() {\n  return (\n    <Stack.Navigator screenOptions={noHeader}>\n      <Stack.Screen component={Landing} name=\"landing\" />\n      <Stack.Screen component={FlappyBird} name=\"flappyBird\" />\n      <Stack.Screen component={Snake} name=\"snake\" />\n      <Stack.Screen component={PapiJump} name=\"papiJump\" />\n      <Stack.Screen component={Archero} name=\"archero\" />\n    </Stack.Navigator>\n  );\n});\n"],"sourceRoot":""}