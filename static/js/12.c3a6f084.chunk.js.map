{"version":3,"sources":["apps/Complete/screens/Account/factory.ts","apps/Complete/screens/Account/index.tsx","apps/Complete/configs.tsx","apps/Complete/components/Board.tsx","apps/Complete/components/BoardAdd.tsx","apps/Complete/components/Card.tsx","apps/Complete/components/HandleKeyboard.tsx","apps/Complete/components/ListAdd.tsx","apps/Complete/components/ListContainer.tsx","apps/Complete/components/ListHeaderInput.tsx","apps/Complete/components/ListHeader.tsx","apps/Complete/components/ListItem.tsx","apps/Complete/components/ListItems.tsx","apps/Complete/components/List.tsx","apps/Complete/components/OrganizeButton.tsx","apps/Complete/screens/Capture/index.tsx","apps/Complete/screens/Project/index.tsx","apps/Complete/screens/Projects/index.tsx","apps/Complete/screens/Reflect/Graph.tsx","apps/Complete/screens/Reflect/index.tsx","apps/Complete/index.tsx"],"names":["date","Date","now","defaults","id","v4","active","createdAt","updatedAt","Account","memo","color","useColor","dispatch","useRootDispatch","goBack","useNavigation","navBack","useCallback","onLogin","inboxItems","title","inboxList","items","map","item","inboxBoard","lists","homeItems","homeLists","homeBoard","projectItems","board","projectsList","listsItems","listsList","categoryBoard","user","name","boards","getDefaultUserTemplate","createItem","list","createList","createBoard","createUser","onLogout","removeUser","onSetActive","setActiveUser","onLeftPress","ScrollView","contentContainerStyle","padding","Theme","p04","style","flex","backgroundColor","surface","paddingBottom","type","center","emphasis","onPress","config","borderRadius","p02","Board","boardId","listMaxHeight","listWidth","listSize","useRootSelector","s","completeBoard","getItemId","getItemLayout","_","index","length","offset","renderAddList","BoardAdd","renderList","buttonTitle","inputPlaceholder","listId","orientation","FlatList","ListFooterComponent","data","decelerationRate","horizontal","keyExtractor","keyboardShouldPersistTaps","renderItem","showsHorizontalScrollIndicator","snapToAlignment","snapToInterval","useState","showInput","setShowInput","itemTitle","setItemTitle","onItemTitleChange","v","onAddItemPress","p","onItemTitleClose","onItemTitleSubmit","trim","View","width","height","p12","background","justifyContent","flexDirection","alignItems","focusOnLoad","onChangeText","onSubmitEditing","placeholder","returnKeyType","value","padded","primary","Card","children","onLayout","marginBottom","HandleKeyboard","render","onDismissKeyboard","Keyboard","dismiss","TouchableWithoutFeedback","ListAdd","itemWidth","textInputRef","useRef","formatted","itemId","updateListAddItem","current","focus","onBlur","blurOnSubmit","onRef","ListContainer","marginRight","ListHeaderInput","listTitle","completeList","setTitle","onSave","updateListTitle","ListHeader","ListItem","completeItem","showControls","setShowControls","onTextChange","onFocus","onItemNav","onItemDelete","removeItem","updateListRemoveItem","onItemDetails","onItemLongPress","onLongPress","margin","ListItems","maxHeight","listItems","cardsRef","cardsLength","onKeyExtractor","onCardSizeChange","scrollToEnd","onRenderItem","onContentSizeChange","ref","showsVerticalScrollIndicator","List","OrganizeButton","disable","Capture","navigate","keyboardHeight","state","device","container","button","dimensions","setDimensions","android","Platform","OS","listHeight","getInboxListId","onOrganize","key","event","nativeEvent","layout","navToAccount","onRightPress","rightIcon","Project","getSmallestDimension","setContainer","Projects","listIds","getCategoryListIds","navNext","getDomain","domain","Math","min","max","Graph","scaleX","scaleTime","d","range","scaleY","scaleLinear","strokeWidth","shape","x","y","curve","StyleSheet","absoluteFill","x1","x2","y1","y2","stopColor","fill","stroke","Title","getTime","Reflect","Dimensions","get","noHeader","headerShown","RootTab","createBottomTabNavigator","RootStack","createStackNavigator","ProjectsStack","tabIcons","focused","unfocused","Focus","Navigator","screenOptions","Screen","component","Tabs","tabBarOptions","keyboardHidesTabBar","activeTintColor","inactiveTintColor","text","showLabel","route","tabBarIcon","size","iconColor"],"mappings":"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","file":"static/js/12.c3a6f084.chunk.js","sourcesContent":["import {v4} from 'uuid';\nimport {Board, Item, List, User} from '../../models';\n\ntype GetDefaultUserTemplate = {\n  user: User;\n  boards: Board[];\n  lists: List[];\n  items: Item[];\n};\n\nconst date = Date.now();\nconst defaults = () => ({\n  id: v4(),\n  active: true,\n  createdAt: date,\n  updatedAt: date,\n});\n\nexport const getDefaultUserTemplate = (): GetDefaultUserTemplate => {\n  // inbox\n  const inboxItems: Item[] = [\n    {...defaults(), title: 'do dishes'},\n    {...defaults(), title: 'schedule meeting with Jim'},\n    {...defaults(), title: 'run 4 miles'},\n    {...defaults(), title: 'change oil'},\n    {...defaults(), title: 'what is the best mediation'},\n    {...defaults(), title: 'record Kelly birthday on Sep 22'},\n    {...defaults(), title: 'drink water'},\n    {...defaults(), title: 'intensity + focus = deep work'},\n    {...defaults(), title: 'put $20 in phone'},\n    {...defaults(), title: 'clear emails'},\n  ];\n  const inboxList: List = {\n    ...defaults(),\n    title: 'Inbox',\n    items: inboxItems.map((item) => item.id),\n  };\n  const inboxBoard: Board = {\n    ...defaults(),\n    title: 'Inbox',\n    lists: [inboxList.id],\n  };\n\n  // sub category\n  const homeItems: Item[] = [\n    {...defaults(), title: 'clean desk'},\n    {...defaults(), title: 'clean room'},\n    {...defaults(), title: 'walk dog'},\n    {...defaults(), title: 'brush teeth'},\n    {...defaults(), title: 'do laundry'},\n    {...defaults(), title: 'fix sink'},\n  ];\n  const homeLists: List[] = [\n    {...defaults(), title: 'Backlog', items: homeItems.map((item) => item.id)},\n    {...defaults(), title: 'Todo', items: []},\n    {...defaults(), title: 'In Progress', items: []},\n    {...defaults(), title: 'Done', items: []},\n  ];\n  const homeBoard: Board = {\n    ...defaults(),\n    title: 'Home',\n    lists: homeLists.map((item) => item.id),\n  };\n\n  // category\n  const projectItems: Item[] = [\n    {...defaults(), title: 'at home', board: homeBoard.id},\n    {...defaults(), title: 'at town'},\n    {...defaults(), title: 'at work'},\n    {...defaults(), title: 'at gym'},\n    {...defaults(), title: 'app release'},\n  ];\n  const projectsList: List = {\n    ...defaults(),\n    title: 'Projects',\n    items: projectItems.map((item) => item.id),\n  };\n  const listsItems: Item[] = [\n    {...defaults(), title: 'meeting notes'},\n    {...defaults(), title: 'book summaries'},\n    {...defaults(), title: 'gift ideas'},\n    {...defaults(), title: 'checklists'},\n    {...defaults(), title: 'code languages'},\n  ];\n  const listsList: List = {\n    ...defaults(),\n    title: 'Lists',\n    items: listsItems.map((item) => item.id),\n  };\n  const categoryBoard: Board = {\n    ...defaults(),\n    title: 'Categories',\n    lists: [projectsList.id, listsList.id],\n  };\n\n  // user\n  const user: User = {\n    ...defaults(),\n    name: 'Bob Smith',\n    boards: [inboxBoard.id, categoryBoard.id],\n  };\n\n  return {\n    user,\n    boards: [homeBoard, inboxBoard, categoryBoard],\n    lists: [inboxList, ...homeLists, projectsList, listsList],\n    items: [...inboxItems, ...homeItems, ...projectItems, ...listsItems],\n  };\n};\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback} from 'react';\nimport {ScrollView} from 'react-native';\nimport {Button, Card, Screen, Text} from '../../../../components';\nimport {useColor} from '../../../../hooks';\nimport {Theme, useRootDispatch} from '../../../../utils';\nimport {\n  createBoard,\n  createItem,\n  createList,\n  createUser,\n  removeUser,\n  setActiveUser,\n} from '../../models';\nimport {getDefaultUserTemplate} from './factory';\n\n// TODO: figure out a place for this\n// TODO: add reminders\n// TODO: add profile information\n// TODO: add payment\n\nexport const Account = memo(function Account() {\n  const color = useColor();\n  const dispatch = useRootDispatch();\n\n  const {goBack} = useNavigation();\n  const navBack = useCallback(() => goBack(), [goBack]);\n\n  const onLogin = useCallback(() => {\n    const {user, boards, lists, items} = getDefaultUserTemplate();\n    items.map((item) => dispatch(createItem(item)));\n    lists.map((list) => dispatch(createList(list)));\n    boards.map((board) => dispatch(createBoard(board)));\n    dispatch(createUser(user));\n  }, [dispatch]);\n  const onLogout = useCallback(() => dispatch(removeUser()), [dispatch]);\n  const onSetActive = useCallback(() => {\n    dispatch(setActiveUser(true));\n  }, [dispatch]);\n\n  return (\n    <Screen onLeftPress={navBack} title=\"Account\">\n      <ScrollView\n        contentContainerStyle={{\n          padding: Theme.padding.p04,\n        }}\n        style={{flex: 1, backgroundColor: color.surface}}>\n        <Card>\n          <Text\n            style={{paddingBottom: Theme.padding.p04}}\n            title=\"Profile\"\n            type=\"h3\"\n          />\n          <Text\n            center\n            emphasis=\"medium\"\n            title=\"Break comfort barriers to be more creative, better at dealing with change, and better a improving the future\"\n            type=\"h4\"\n          />\n        </Card>\n        <Card>\n          <Text\n            style={{paddingBottom: Theme.padding.p04}}\n            title=\"Reminders\"\n            type=\"h3\"\n          />\n          <Text\n            center\n            emphasis=\"medium\"\n            title=\"Break comfort barriers to be more creative, better at dealing with change, and better a improving the future\"\n            type=\"h4\"\n          />\n        </Card>\n        <Card>\n          <Text\n            style={{paddingBottom: Theme.padding.p04}}\n            title=\"Payment\"\n            type=\"h3\"\n          />\n          <Text\n            center\n            emphasis=\"medium\"\n            title=\"Break comfort barriers to be more creative, better at dealing with change, and better a improving the future\"\n            type=\"h4\"\n          />\n        </Card>\n        <Button onPress={onLogin} title=\"login\" />\n        <Button onPress={onLogout} title=\"logout\" />\n        <Button onPress={onSetActive} title=\"set active\" />\n      </ScrollView>\n    </Screen>\n  );\n});\n","import {Theme} from '../../utils';\n\nexport const config = {\n  borderRadius: Theme.padding.p02,\n  padding: Theme.padding.p04,\n};\n","import React, {memo, useCallback} from 'react';\nimport {FlatList} from 'react-native';\nimport {BoardAdd, List} from '.';\nimport {useRootSelector} from '../../../utils';\nimport {config} from '../configs';\n\ntype BoardProps = {\n  boardId: string;\n  listMaxHeight: number;\n  listWidth: number;\n};\n\nexport const Board = memo(function Board({\n  boardId,\n  listMaxHeight,\n  listWidth,\n}: BoardProps) {\n  const listSize = listWidth + config.padding;\n  const board = useRootSelector((s) => s.completeBoard.items[boardId]);\n  const getItemId = useCallback((item) => item.id, []);\n\n  const getItemLayout = useCallback(\n    (_, index) => ({\n      length: listSize,\n      offset: listSize * index,\n      index,\n    }),\n    [listSize],\n  );\n\n  const renderAddList = useCallback(() => {\n    return <BoardAdd listWidth={listWidth} />;\n  }, [listWidth]);\n\n  const renderList = useCallback(\n    ({item}) => {\n      return (\n        <List\n          buttonTitle=\"Add list\"\n          inputPlaceholder=\"List title...\"\n          key={item}\n          listId={item}\n          listMaxHeight={listMaxHeight}\n          listWidth={listWidth}\n          orientation=\"horizontal\"\n        />\n      );\n    },\n    [listMaxHeight, listWidth],\n  );\n\n  return (\n    <FlatList\n      ListFooterComponent={renderAddList}\n      data={board.lists}\n      decelerationRate=\"fast\"\n      getItemLayout={getItemLayout}\n      horizontal\n      keyExtractor={getItemId}\n      keyboardShouldPersistTaps=\"handled\"\n      renderItem={renderList}\n      showsHorizontalScrollIndicator={false}\n      snapToAlignment=\"center\"\n      snapToInterval={listSize}\n    />\n  );\n});\n","import React, {memo, useCallback, useState} from 'react';\nimport {View} from 'react-native';\nimport {Button, Icon, TextInput} from '../../../components';\nimport {useColor} from '../../../hooks';\nimport {Theme} from '../../../utils';\nimport {config} from '../configs';\n\ntype BoardAddProps = {\n  listWidth: number;\n};\n\n// TODO: make similar to ListAdd\n// TODO: save to redux\n\nexport const BoardAdd = memo(function AddItem({listWidth}: BoardAddProps) {\n  const color = useColor();\n  const [showInput, setShowInput] = useState(false);\n  const [itemTitle, setItemTitle] = useState('');\n  const onItemTitleChange = useCallback((v: string) => setItemTitle(v), []);\n  const onAddItemPress = useCallback(() => setShowInput((p) => !p), []);\n  const onItemTitleClose = useCallback(() => {\n    setShowInput(false);\n    setItemTitle('');\n  }, []);\n  const onItemTitleSubmit = useCallback(() => {\n    const formatted = itemTitle.trim();\n    if (formatted.length === 0) {\n      return;\n    }\n    onItemTitleClose();\n    // onAdd(formatted);\n  }, [itemTitle, onItemTitleClose]);\n  return (\n    <View\n      style={{\n        width: listWidth,\n        height: Theme.padding.p12,\n        borderRadius: config.borderRadius,\n        backgroundColor: color.background,\n        justifyContent: 'center',\n      }}>\n      {showInput ? (\n        <View style={{flexDirection: 'row', alignItems: 'center'}}>\n          <TextInput\n            emphasis=\"high\"\n            flex\n            focusOnLoad\n            onChangeText={onItemTitleChange}\n            onSubmitEditing={onItemTitleSubmit}\n            placeholder=\"List title...\"\n            returnKeyType=\"done\"\n            type=\"h4\"\n            value={itemTitle}\n          />\n          <Icon name=\"close\" onPress={onItemTitleClose} padded />\n          <Icon\n            color={color.primary}\n            name=\"send\"\n            onPress={onItemTitleSubmit}\n            padded\n          />\n        </View>\n      ) : (\n        <Button\n          center\n          color=\"primary\"\n          onPress={onAddItemPress}\n          title=\"Add list\"\n        />\n      )}\n    </View>\n  );\n});\n","import React, {memo, ReactElement} from 'react';\nimport {LayoutChangeEvent, View} from 'react-native';\nimport {useColor} from '../../../hooks';\nimport {config} from '../configs';\n\ntype CardProps = {\n  onLayout?: (event: LayoutChangeEvent) => void;\n  children: ReactElement | ReactElement[];\n};\n\nexport const Card = memo(function Card({children, onLayout}: CardProps) {\n  const color = useColor();\n  return (\n    <View\n      onLayout={onLayout}\n      style={{\n        borderRadius: config.borderRadius,\n        backgroundColor: color.background,\n        padding: config.padding / 2,\n        marginBottom: config.padding,\n      }}>\n      {children}\n    </View>\n  );\n});\n","import React, {memo, ReactElement, useCallback} from 'react';\nimport {\n  Keyboard,\n  LayoutChangeEvent,\n  TouchableWithoutFeedback,\n  View,\n} from 'react-native';\nimport {config} from '../configs';\n\ntype HandleKeyboardProps = {\n  onLayout: (event: LayoutChangeEvent) => void;\n  render: boolean;\n  backgroundColor: string;\n  children: ReactElement | ReactElement[];\n};\n\nexport const HandleKeyboard = memo(function HandleKeyboard({\n  onLayout,\n  render,\n  backgroundColor,\n  children,\n}: HandleKeyboardProps) {\n  const onDismissKeyboard = useCallback(() => Keyboard.dismiss(), []);\n  return (\n    <TouchableWithoutFeedback\n      onLayout={onLayout}\n      onPress={onDismissKeyboard}\n      style={{flex: 1}}>\n      <View\n        style={{\n          flex: 1,\n          backgroundColor,\n          padding: config.padding,\n        }}>\n        {render ? children : null}\n      </View>\n    </TouchableWithoutFeedback>\n  );\n});\n","import React, {memo, useCallback, useRef, useState} from 'react';\nimport {TextInput as OriginalTextInput, View} from 'react-native';\nimport {v4} from 'uuid';\nimport {Button, Icon, TextInput} from '../../../components';\nimport {useColor} from '../../../hooks';\nimport {Theme, useRootDispatch} from '../../../utils';\nimport {config} from '../configs';\nimport {createItem, Item, updateListAddItem} from '../models';\n\ntype ListAddProps = {\n  listId: string;\n  itemWidth?: number;\n  inputPlaceholder: string;\n  buttonTitle: string;\n};\n\nexport const ListAdd = memo(function ListAdd({\n  itemWidth,\n  inputPlaceholder,\n  buttonTitle,\n  listId,\n}: ListAddProps) {\n  const color = useColor();\n  const dispatch = useRootDispatch();\n  const textInputRef = useRef<OriginalTextInput | null>(null);\n  const [showInput, setShowInput] = useState(false);\n  const [itemTitle, setItemTitle] = useState('');\n  const onItemTitleChange = useCallback((v: string) => setItemTitle(v), []);\n  const onAddItemPress = useCallback(() => setShowInput((p) => !p), []);\n\n  const onItemTitleClose = useCallback(() => {\n    setShowInput(false);\n    setItemTitle('');\n  }, []);\n\n  const onItemTitleSubmit = useCallback(() => {\n    const formatted = itemTitle.trim();\n    if (formatted.length === 0) {\n      return;\n    }\n    setItemTitle('');\n    const itemId = v4();\n    const date = Date.now();\n    const item: Item = {\n      id: itemId,\n      active: true,\n      title: formatted,\n      createdAt: date,\n      updatedAt: date,\n    };\n    dispatch(createItem(item));\n    dispatch(updateListAddItem({listId, itemId}));\n    textInputRef.current?.focus();\n  }, [dispatch, itemTitle, listId]);\n\n  const onBlur = useCallback(() => {\n    setShowInput(false);\n    setItemTitle('');\n  }, []);\n\n  return (\n    <View\n      style={{\n        width: itemWidth,\n        height: Theme.padding.p12,\n        borderRadius: config.borderRadius,\n        backgroundColor: color.background,\n        justifyContent: 'center',\n      }}>\n      {showInput ? (\n        <View style={{flexDirection: 'row', alignItems: 'center'}}>\n          <TextInput\n            blurOnSubmit={false}\n            emphasis=\"high\"\n            flex\n            focusOnLoad\n            onBlur={onBlur}\n            onChangeText={onItemTitleChange}\n            onRef={textInputRef}\n            onSubmitEditing={onItemTitleSubmit}\n            placeholder={inputPlaceholder}\n            returnKeyType=\"done\"\n            value={itemTitle}\n          />\n          <Icon name=\"close\" onPress={onItemTitleClose} padded />\n          <Icon\n            color={color.primary}\n            name=\"send\"\n            onPress={onItemTitleSubmit}\n            padded\n          />\n        </View>\n      ) : (\n        <Button\n          center\n          color=\"primary\"\n          onPress={onAddItemPress}\n          title={buttonTitle}\n        />\n      )}\n    </View>\n  );\n});\n","import React, {memo, ReactElement} from 'react';\nimport {View} from 'react-native';\nimport {useColor} from '../../../hooks';\nimport {config} from '../configs';\n\ntype ListContainerProps = {\n  width?: number;\n  children: ReactElement | ReactElement[];\n  orientation?: 'vertical' | 'horizontal';\n};\n\nexport const ListContainer = memo(function ListContainer({\n  width,\n  children,\n  orientation = 'vertical',\n}: ListContainerProps) {\n  const color = useColor();\n  const padding = config.padding;\n  const borderRadius = config.borderRadius;\n  const horizontal = orientation === 'horizontal';\n  return (\n    <View\n      style={{\n        borderRadius,\n        width: width,\n        backgroundColor: color.background,\n        padding: padding / 2,\n        marginRight: horizontal ? padding : 0,\n        marginBottom: horizontal ? 0 : padding,\n      }}>\n      {children}\n    </View>\n  );\n});\n","import React, {memo, useCallback, useState} from 'react';\nimport {TextInput} from '../../../components';\nimport {useRootDispatch, useRootSelector} from '../../../utils';\nimport {updateListTitle} from '../models';\n\ntype ListHeaderInputProps = {\n  listId: string;\n};\n\nexport const ListHeaderInput = memo(function ListHeaderInput({\n  listId,\n}: ListHeaderInputProps) {\n  const dispatch = useRootDispatch();\n  const listTitle = useRootSelector((s) => s.completeList.items[listId].title);\n  const [title, setTitle] = useState(listTitle);\n  const onChangeText = useCallback((value: string) => {\n    setTitle(value);\n  }, []);\n\n  const onSave = useCallback(() => {\n    dispatch(updateListTitle({listId, title}));\n  }, [dispatch, listId, title]);\n\n  return (\n    <TextInput\n      emphasis=\"high\"\n      flex\n      onBlur={onSave}\n      onChangeText={onChangeText}\n      placeholder=\"list name...\"\n      returnKeyType=\"done\"\n      type=\"h4\"\n      value={title}\n    />\n  );\n});\n","import React, {memo} from 'react';\nimport {View} from 'react-native';\nimport {Icon} from '../../../components';\nimport {ListHeaderInput} from './ListHeaderInput';\n\ntype ListHeaderProps = {\n  listId: string;\n};\n\nexport const ListHeader = memo(function ListHeader({listId}: ListHeaderProps) {\n  return (\n    <View\n      style={{\n        flexDirection: 'row',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n      }}>\n      <ListHeaderInput listId={listId} />\n      <Icon name=\"dots-horizontal\" padded />\n    </View>\n  );\n});\n","import React, {memo, useCallback, useState} from 'react';\nimport {Keyboard, View} from 'react-native';\nimport {Icon, TextInput, TouchableOpacity} from '../../../components';\nimport {useColor} from '../../../hooks';\nimport {useRootDispatch, useRootSelector} from '../../../utils';\nimport {config} from '../configs';\nimport {removeItem, updateListRemoveItem} from '../models';\n\ntype ListItemProps = {\n  itemId: string;\n  listId: string;\n};\n\nexport const ListItem = memo(function ListItem({\n  itemId,\n  listId,\n}: ListItemProps) {\n  const item = useRootSelector((s) => s.completeItem.items[itemId]);\n  const dispatch = useRootDispatch();\n  const color = useColor();\n  const [title, setTitle] = useState(item.title);\n  const [showControls, setShowControls] = useState(false);\n\n  const onTextChange = useCallback((value) => {\n    setTitle(value);\n  }, []);\n\n  const onItemTitleClose = useCallback(() => {\n    setTitle(item.title);\n    Keyboard.dismiss();\n  }, [item.title]);\n  const onItemTitleSubmit = useCallback(() => {\n    Keyboard.dismiss();\n  }, []);\n\n  const onFocus = useCallback(() => setShowControls(true), []);\n  const onBlur = useCallback(() => setShowControls(false), []);\n\n  const onItemNav = useCallback(() => undefined, []);\n  const onItemDelete = useCallback(() => {\n    dispatch(removeItem(itemId));\n    dispatch(updateListRemoveItem({listId, itemId}));\n  }, [dispatch, itemId, listId]);\n  const onItemDetails = useCallback(() => undefined, []);\n  const onItemLongPress = useCallback(() => undefined, []);\n\n  return (\n    <TouchableOpacity\n      key={item.id}\n      onLongPress={onItemLongPress}\n      style={{\n        flex: 1,\n        borderRadius: config.borderRadius,\n        margin: config.padding / 2,\n        backgroundColor: color.surface,\n        flexDirection: 'row',\n      }}>\n      <TextInput\n        backgroundColor={color.surface}\n        flex\n        onBlur={onBlur}\n        onChangeText={onTextChange}\n        onFocus={onFocus}\n        onSubmitEditing={onItemTitleSubmit}\n        placeholder=\"Item name...\"\n        returnKeyType=\"done\"\n        value={title}\n      />\n      {showControls ? (\n        <View style={{flexDirection: 'row', alignItems: 'center'}}>\n          <Icon name=\"close\" onPress={onItemTitleClose} padded />\n          <Icon\n            color={color.primary}\n            name=\"send\"\n            onPress={onItemTitleSubmit}\n            padded\n          />\n        </View>\n      ) : (\n        <View style={{flexDirection: 'row', alignItems: 'center'}}>\n          <Icon name=\"trash-can-outline\" onPress={onItemDelete} padded />\n          <Icon name=\"dots-horizontal\" onPress={onItemDetails} padded />\n          <Icon name=\"chevron-right\" onPress={onItemNav} padded />\n        </View>\n      )}\n    </TouchableOpacity>\n  );\n});\n","import React, {memo, useCallback, useRef} from 'react';\nimport {FlatList, ListRenderItem} from 'react-native';\nimport {useRootSelector} from '../../../utils';\nimport {ListItem} from './ListItem';\n\ntype ListItemsProps = {\n  listId: string;\n  maxHeight?: number;\n};\n\nexport const ListItems = memo(function ListItems({\n  listId,\n  maxHeight,\n}: ListItemsProps) {\n  const listItems = useRootSelector((s) => s.completeList.items[listId].items);\n  const cardsRef = useRef<FlatList | null>(null);\n  const cardsLength = useRef(listItems.length);\n\n  const onKeyExtractor = useCallback((item) => item, []);\n\n  const onCardSizeChange = useCallback(() => {\n    if (listItems.length > cardsLength.current) {\n      cardsRef.current?.scrollToEnd();\n      cardsLength.current = listItems.length;\n    }\n  }, [listItems.length]);\n\n  const onRenderItem: ListRenderItem<string> = useCallback(\n    ({item}) => {\n      return <ListItem itemId={item} key={item} listId={listId} />;\n    },\n    [listId],\n  );\n\n  return (\n    <FlatList\n      data={listItems}\n      keyExtractor={onKeyExtractor}\n      keyboardShouldPersistTaps=\"handled\"\n      onContentSizeChange={onCardSizeChange}\n      ref={cardsRef}\n      renderItem={onRenderItem}\n      showsVerticalScrollIndicator={false}\n      style={{maxHeight}}\n    />\n  );\n});\n","import React, {memo} from 'react';\nimport {View} from 'react-native';\nimport {ListAdd} from './ListAdd';\nimport {ListContainer} from './ListContainer';\nimport {ListHeader} from './ListHeader';\nimport {ListItems} from './ListItems';\n\ntype ListProps = {\n  listWidth?: number;\n  listId: string;\n  listMaxHeight?: number;\n  orientation?: 'vertical' | 'horizontal';\n  buttonTitle: string;\n  inputPlaceholder: string;\n};\n\nexport const List = memo(function List({\n  listId,\n  orientation,\n  listWidth,\n  listMaxHeight,\n  buttonTitle,\n  inputPlaceholder,\n}: ListProps) {\n  return (\n    <View key={listId}>\n      <ListContainer key={listId} orientation={orientation} width={listWidth}>\n        <ListHeader listId={listId} />\n        <ListItems listId={listId} maxHeight={listMaxHeight} />\n        <ListAdd\n          buttonTitle={buttonTitle}\n          inputPlaceholder={inputPlaceholder}\n          listId={listId}\n        />\n      </ListContainer>\n    </View>\n  );\n});\n","import React, {memo} from 'react';\nimport {LayoutChangeEvent} from 'react-native';\nimport {Button} from '../../../components';\nimport {useRootSelector} from '../../../utils';\nimport {Card} from '../components/Card';\n\ntype OrganizeButtonProps = {\n  listId: string;\n  onPress: () => void;\n  onLayout: (event: LayoutChangeEvent) => void;\n};\n\nexport const OrganizeButton = memo(function OrganizeButton({\n  listId,\n  onPress,\n  onLayout,\n}: OrganizeButtonProps) {\n  const listItems = useRootSelector(\n    (s) => s.completeList.items[listId].items.length,\n  );\n  return (\n    <Card onLayout={onLayout}>\n      <Button\n        center\n        color=\"primary\"\n        disable={listItems === 0}\n        onPress={onPress}\n        title=\"Organize\"\n      />\n    </Card>\n  );\n});\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback, useState} from 'react';\nimport {LayoutChangeEvent, Platform, View} from 'react-native';\nimport {Screen, Text} from '../../../../components';\nimport {useColor} from '../../../../hooks';\nimport {useRootSelector} from '../../../../utils';\nimport {HandleKeyboard, List, OrganizeButton} from '../../components';\nimport {config} from '../../configs';\nimport {getInboxListId} from '../../models';\n\nexport const Capture = memo(function Capture() {\n  const color = useColor();\n  const {navigate} = useNavigation();\n  const navBack = useCallback(() => navigate('admin'), [navigate]);\n  const keyboardHeight = useRootSelector(\n    (state) => state.device.keyboardHeight,\n  );\n  const [dimensions, setDimensions] = useState({container: 0, button: 0});\n  const android = Platform.OS === 'android';\n\n  const listHeight =\n    keyboardHeight === 0\n      ? dimensions.container -\n        dimensions.button -\n        (android ? config.padding * 8 : config.padding * 13)\n      : dimensions.container -\n        keyboardHeight -\n        (android ? config.padding * 3 : config.padding * 7);\n\n  const listId = useRootSelector(getInboxListId);\n\n  const onOrganize = useCallback(() => undefined, []);\n\n  const onLayout = useCallback(\n    (key: string) => (event: LayoutChangeEvent) => {\n      const {height} = event.nativeEvent.layout;\n      const preventMultipleUpdates =\n        key === 'container' && dimensions.container > 0;\n      if (preventMultipleUpdates) {\n        return;\n      }\n      setDimensions((p) => ({...p, [key]: height}));\n    },\n    [dimensions.container],\n  );\n\n  const navToAccount = useCallback(() => navigate('account'), [navigate]);\n\n  return (\n    <Screen\n      onLeftPress={navBack}\n      onRightPress={navToAccount}\n      rightIcon=\"account\"\n      title=\"Capture\">\n      <HandleKeyboard\n        backgroundColor={color.surface}\n        onLayout={onLayout('container')}\n        render={dimensions.container > 0}>\n        {listId ? (\n          <View>\n            <List\n              buttonTitle=\"Add item\"\n              inputPlaceholder=\"Item title...\"\n              listId={listId}\n              listMaxHeight={listHeight}\n            />\n            <OrganizeButton\n              listId={listId}\n              onLayout={onLayout('button')}\n              onPress={onOrganize}\n            />\n          </View>\n        ) : (\n          <Text title=\"missing account\" />\n        )}\n      </HandleKeyboard>\n    </Screen>\n  );\n});\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback, useState} from 'react';\nimport {LayoutChangeEvent, Platform} from 'react-native';\nimport {Screen} from '../../../../components';\nimport {useColor} from '../../../../hooks';\nimport {getSmallestDimension} from '../../../../models';\nimport {useRootSelector} from '../../../../utils';\nimport {Board, HandleKeyboard} from '../../components';\nimport {config} from '../../configs';\n\n// TODO: add landing page (actionables + record)\n// TODO: figure out centering of list\n\nexport const Project = memo(function Project() {\n  const {goBack} = useNavigation();\n  const color = useColor();\n  const screenWidth = useRootSelector(getSmallestDimension);\n  const listWidth = screenWidth * 0.7;\n  const [container, setContainer] = useState(0);\n  const android = Platform.OS === 'android';\n  const keyboardHeight = useRootSelector(\n    (state) => state.device.keyboardHeight,\n  );\n\n  const listMaxHeight =\n    keyboardHeight === 0\n      ? container - (android ? config.padding * 8 : config.padding * 12)\n      : container -\n        keyboardHeight -\n        (android ? config.padding * 3 : config.padding * 7);\n\n  const onLayout = useCallback(\n    (event: LayoutChangeEvent) => {\n      const {height} = event.nativeEvent.layout;\n      if (container > 0) {\n        return;\n      }\n      setContainer(height);\n    },\n    [container],\n  );\n\n  const navBack = useCallback(() => {\n    goBack();\n  }, [goBack]);\n\n  return (\n    <Screen onLeftPress={navBack} title=\"Focus\">\n      <HandleKeyboard\n        backgroundColor={color.surface}\n        onLayout={onLayout}\n        render={container > 0}>\n        <Board\n          boardId=\"4887e24c-9871-4deb-9eae-0e0bb4b9b860\"\n          listMaxHeight={listMaxHeight}\n          listWidth={listWidth}\n        />\n      </HandleKeyboard>\n    </Screen>\n  );\n});\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback, useState} from 'react';\nimport {LayoutChangeEvent} from 'react-native';\nimport {Screen} from '../../../../components';\nimport {useColor} from '../../../../hooks';\nimport {useRootSelector} from '../../../../utils';\nimport {\n  HandleKeyboard,\n  ListAdd,\n  ListContainer,\n  ListHeader,\n  ListItems,\n} from '../../components';\nimport {config} from '../../configs';\nimport {getCategoryListIds} from '../../models';\n\n// TODO: add journal\n// TODO: add historical data\n// TODO: add purpose\n// TODO: add goals\n\nexport const Projects = memo(function Projects() {\n  const color = useColor();\n  const {navigate} = useNavigation();\n\n  const listIds = useRootSelector(getCategoryListIds);\n\n  const navNext = useCallback(() => {\n    navigate('Project');\n  }, [navigate]);\n\n  const [dimensions, setDimensions] = useState(0);\n\n  const onLayout = useCallback(\n    (event: LayoutChangeEvent) => {\n      const {height} = event.nativeEvent.layout;\n      if (dimensions > 0) {\n        return;\n      }\n      setDimensions(height);\n    },\n    [dimensions],\n  );\n\n  const maxHeight = dimensions / 2 - config.padding * 10;\n\n  return (\n    <Screen onRightPress={navNext} title=\"Projects\">\n      <HandleKeyboard\n        backgroundColor={color.surface}\n        onLayout={onLayout}\n        render={dimensions > 0}>\n        {listIds.map((listId) => (\n          <ListContainer key={listId}>\n            <ListHeader listId={listId} />\n            <ListItems listId={listId} maxHeight={maxHeight} />\n            <ListAdd\n              buttonTitle=\"Add project\"\n              inputPlaceholder=\"Project title...\"\n              listId={listId}\n            />\n          </ListContainer>\n        ))}\n      </HandleKeyboard>\n    </Screen>\n  );\n});\n","import {scaleLinear, scaleTime} from 'd3-scale';\nimport * as shape from 'd3-shape';\nimport * as React from 'react';\nimport {StyleSheet, View} from 'react-native';\nimport Svg, {Defs, LinearGradient, Path, Stop} from 'react-native-svg';\n\ninterface DataPoint {\n  date: number;\n  value: number;\n}\n\ninterface GraphProps {\n  data: DataPoint[];\n  width: number;\n  height: number;\n}\n\nconst strokeWidth = 4;\nconst padding = strokeWidth / 2;\nconst getDomain = (domain: number[]) => [\n  Math.min(...domain),\n  Math.max(...domain),\n];\n\nexport const Graph = ({\n  data,\n  width,\n  height,\n}: GraphProps): React.ReactElement => {\n  const scaleX = scaleTime()\n    .domain(getDomain(data.map((d) => d.date)))\n    .range([0, width]);\n  const scaleY = scaleLinear()\n    .domain(getDomain(data.map((d) => d.value)))\n    .range([height - padding, padding]);\n  const d = shape\n    .line<DataPoint>()\n    .x((p) => scaleX(p.date))\n    .y((p) => scaleY(p.value))\n    .curve(shape.curveBasis)(data) as string;\n  return (\n    <View style={{width, height}}>\n      <Svg style={StyleSheet.absoluteFill}>\n        <Defs>\n          <LinearGradient id=\"gradient\" x1=\"50%\" x2=\"50%\" y1=\"0%\" y2=\"100%\">\n            <Stop offset=\"0%\" stopColor=\"#cee3f9\" />\n            <Stop offset=\"80%\" stopColor=\"#ddedfa\" />\n            <Stop offset=\"100%\" stopColor=\"#feffff\" />\n          </LinearGradient>\n        </Defs>\n        <Path\n          d={`${d}L ${width} ${height} L 0 ${height}`}\n          fill=\"url(#gradient)\"\n        />\n        <Path fill=\"transparent\" stroke=\"#3977e3\" {...{d, strokeWidth}} />\n      </Svg>\n    </View>\n  );\n};\n","import React, {memo} from 'react';\nimport {Dimensions, ScrollView, View} from 'react-native';\nimport {Calendar, Screen, Text} from '../../../../components';\nimport {useColor} from '../../../../hooks';\nimport {Theme} from '../../../../utils';\nimport {Card} from '../../components/Card';\nimport {config} from '../../configs';\nimport {Graph} from './Graph';\n\n// TODO: add journal\n// TODO: add historical data\n// TODO: add purpose\n// TODO: add goals\n\ntype TitleProps = {name: string};\n\nconst Title = ({name}: TitleProps) => {\n  return (\n    <Text\n      emphasis=\"high\"\n      style={{paddingBottom: config.padding}}\n      title={name}\n      type=\"h4\"\n    />\n  );\n};\n\nconst data = [\n  {date: new Date(2018, 9, 1).getTime(), value: 0},\n  {date: new Date(2018, 9, 16).getTime(), value: 0},\n  {date: new Date(2018, 9, 17).getTime(), value: 200},\n  {date: new Date(2018, 10, 1).getTime(), value: 200},\n  {date: new Date(2018, 10, 2).getTime(), value: 300},\n  {date: new Date(2018, 10, 5).getTime(), value: 300},\n];\n\nexport const Reflect = memo(function Reflect() {\n  const color = useColor();\n\n  return (\n    <Screen title=\"Reflect\">\n      <ScrollView\n        contentContainerStyle={{\n          padding: Theme.padding.p04,\n          backgroundColor: color.surface,\n        }}\n        style={{backgroundColor: color.surface}}>\n        <Card>\n          <View>\n            <Title name=\"Purpose\" />\n            <Text title=\"Make a significant positive difference in global productivity\" />\n          </View>\n        </Card>\n        <Card>\n          <View>\n            <Title name=\"Goals\" />\n            <Text title=\"Top 3\" />\n            <Text title=\"Deep Focus\" />\n            <Text title=\"Smile\" />\n            <Text title=\"1 More Rep\" />\n          </View>\n        </Card>\n        <Card>\n          <View>\n            <Title name=\"Review (Progress)\" />\n            <View\n              style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>\n              <Graph\n                data={data}\n                height={200}\n                width={Dimensions.get('window').width - config.padding * 4}\n              />\n            </View>\n          </View>\n        </Card>\n        <Card>\n          <View>\n            <Title name=\"Reflect (Journal)\" />\n            <Calendar />\n          </View>\n        </Card>\n      </ScrollView>\n    </Screen>\n  );\n});\n","import {\n  BottomTabBarOptions,\n  createBottomTabNavigator,\n} from '@react-navigation/bottom-tabs';\nimport {Route} from '@react-navigation/native';\nimport {\n  createStackNavigator,\n  StackNavigationOptions,\n} from '@react-navigation/stack';\nimport React, {memo, useCallback} from 'react';\nimport {Icon} from '../../components';\nimport {useColor} from '../../hooks';\nimport {Account, Capture, Project, Projects, Reflect} from './screens';\n\nconst noHeader: StackNavigationOptions = {headerShown: false};\nconst RootTab = createBottomTabNavigator();\nconst RootStack = createStackNavigator();\nconst ProjectsStack = createStackNavigator();\n\ntype Tabs = 'Capture' | 'Focus' | 'Reflect' | 'Account';\ntype TabIcons = {\n  [key in Tabs]: {focused: string; unfocused: string};\n};\n\nconst tabIcons: TabIcons = {\n  Capture: {\n    focused: 'pencil-plus-outline',\n    unfocused: 'pencil-plus-outline',\n  },\n  Focus: {\n    focused: 'checkbox-multiple-marked-outline',\n    unfocused: 'checkbox-multiple-marked-outline',\n  },\n  Reflect: {focused: 'finance', unfocused: 'finance'},\n  Account: {focused: 'account', unfocused: 'account-outline'},\n};\n\ntype ScreenOptionsProps = {\n  route: Route<string, Record<string, unknown> | undefined>;\n};\n\ntype TabBarIconProps = {\n  focused: boolean;\n  size: number;\n};\n\nconst Focus = () => {\n  return (\n    <ProjectsStack.Navigator screenOptions={noHeader}>\n      <ProjectsStack.Screen component={Projects} name=\"Projects\" />\n      <ProjectsStack.Screen component={Project} name=\"Project\" />\n    </ProjectsStack.Navigator>\n  );\n};\n\nconst Tabs = () => {\n  const color = useColor();\n  const tabBarOptions: BottomTabBarOptions = {\n    keyboardHidesTabBar: true,\n    activeTintColor: color.primary,\n    inactiveTintColor: color.text,\n    showLabel: false,\n  };\n  const screenOptions = useCallback(\n    ({route}: ScreenOptionsProps) => ({\n      tabBarIcon: function tabBarIcon({focused, size}: TabBarIconProps) {\n        const focus = focused ? 'focused' : 'unfocused';\n        const iconColor = focused ? color.primary : color.text;\n        const name = (tabIcons as any)[route.name][focus];\n        return <Icon color={iconColor} name={name} size={size} />;\n      },\n    }),\n    [color],\n  );\n\n  return (\n    <RootTab.Navigator\n      screenOptions={screenOptions as any}\n      tabBarOptions={tabBarOptions}>\n      <RootTab.Screen component={Capture} name=\"Capture\" />\n      <RootTab.Screen component={Focus} name=\"Focus\" />\n      <RootTab.Screen component={Reflect} name=\"Reflect\" />\n    </RootTab.Navigator>\n  );\n};\n\nexport default memo(function Complete() {\n  return (\n    <RootStack.Navigator screenOptions={noHeader}>\n      <RootStack.Screen component={Tabs} name=\"main\" />\n      <RootStack.Screen component={Account} name=\"account\" />\n    </RootStack.Navigator>\n  );\n});\n\n/*\n\n# Data\n\n- user\n-> collections [projects, lists]\n-> boards [home, work, town] | [meeting notes, book summaries, checklists]\n-> lists [backlog, todo, in progress, done] | [draft, final]\n-> item [find comb, clear emails, daily standup]\n\n# Screens\n\n## Capture\n\n### Inbox (list -> item -> details)\n- \"add grey list\" -> @app\n- \"find comb\" -> @home\n- \"clear emails\" -> @work\n- \"put $20 in phone\" -> @town\n- \"drink water\" -> @after-waking-up\n- \"intensity + focus = deep work\" -> book summaries\n\n## Organize\n\n### Projects (item -> lists -> item -> details )\n- @home -> (backlog, todo, in progress, done xx, done xx)\n- @town\n- @work\n- @gym\n- @app\n\n### Lists (item -> list -> item -> detail)\n- meeting notes\n - one-on-one\n - daily standup\n- book summaries\n - the one thing\n - getting things done\n - eat that frog\n- gift ideas\n - mom\n - dad\n - girlfriend\n- checklists\n - after waking up\n - after entering bathroom\n\n## Reflect\n\n### Purpose\n\n### Goals\n\n### Review (Progress)\n\n### Reflect (Journal)\n\n## Account\n\n### Profile\n\n### Notifications\n\n### Payment\n*/\n"],"sourceRoot":""}