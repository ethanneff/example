{"version":3,"sources":["conversions/Firebase/index.web.ts","features/Login/index.tsx","apps/Checklists/index.tsx"],"names":["auth","SignInButton","memo","onPress","icon","title","color","useColor","style","alignItems","justifyContent","flexDirection","borderColor","text","borderWidth","padding","Theme","p02","marginBottom","borderRadius","p10","name","paddingLeft","type","Login","onBackgroundPress","useState","email","password","phone","phoneCode","phoneConfirmation","state","form","setForm","onEmail","useCallback","prev","onForgotPassword","onLanding","onPhone","onEmailChange","onPhoneChange","onPhoneCodeChange","onPasswordChange","onPhoneSubmit","a","signInWithPhoneNumber","onPhoneConfirm","console","log","confirm","onLogout","signOut","then","catch","finally","useEffect","ActivityIndicator","size","View","placeholder","keyboardType","value","onChangeText","emphasis","textContentType","createUserWithEmailAndPassword","error","code","secureTextEntry","Platform","OS","Config","os","ios","signInAnonymously","nav","useNav","styles","StyleSheet","create","bottom","paddingBottom","p04","showLogin","setShowLogin","onToggleLogin","onLeftPress","to","ScrollView","backgroundColor","surface","contentContainerStyle","paddingHorizontal","paddingVertical","fab","background","position","right","margin"],"mappings":"wOAAMA,EAAO,GCwBPC,EAAeC,gBAAK,YAIH,IAHrBC,EAGoB,EAHpBA,QACAC,EAEoB,EAFpBA,KACAC,EACoB,EADpBA,MAEMC,EAAQC,cACd,OACE,kBAAC,IAAD,CACEC,MAAO,CACLC,WAAY,SACZC,eAAgB,SAChBC,cAAe,MACfC,YAAaN,EAAMO,KACnBC,YAAa,EACbC,QAASC,IAAMD,QAAQE,IACvBC,aAAcF,IAAMD,QAAQE,IAC5BE,aAAcH,IAAMD,QAAQK,KAE9BjB,QAASA,GACT,kBAAC,IAAD,CAAMkB,KAAMjB,IACZ,kBAAC,IAAD,CACEC,MAAOA,EACPG,MAAO,CAACc,YAAaN,IAAMD,QAAQE,KACnCM,KAAK,eAuBAC,EAAQtB,gBAAK,YAA4C,IAA5BuB,EAA2B,EAA3BA,kBAA2B,EAC3CC,mBAAgB,CACtCC,MAAO,GACPC,SAAU,GACVC,MAAO,GACPC,UAAW,GACXC,kBAAmB,KACnBC,MAAO,YAP0D,mBAC5DC,EAD4D,KACtDC,EADsD,KAU7DC,EAAUC,uBACd,kBAAMF,GAAQ,SAACG,GAAD,sBAAeA,EAAf,CAAqBT,SAAU,GAAII,MAAO,eACxD,IAEIM,EAAmBF,uBACvB,kBAAMF,GAAQ,SAACG,GAAD,sBAAeA,EAAf,CAAqBL,MAAO,yBAC1C,IAEIO,EAAYH,uBAChB,kBACEF,GAAQ,SAACG,GAAD,sBAAeA,EAAf,CAAqBV,MAAO,GAAIC,SAAU,GAAII,MAAO,iBAC/D,IAEIQ,EAAUJ,uBACd,kBAAMF,GAAQ,SAACG,GAAD,sBAAeA,EAAf,CAAqBL,MAAO,eAC1C,IAGIS,EAAgBL,uBACpB,SAACT,GAAD,OAAmBO,GAAQ,SAACG,GAAD,sBAAeA,EAAf,CAAqBV,eAChD,IAEIe,EAAgBN,uBACpB,SAACP,GAAD,OAAmBK,GAAQ,SAACG,GAAD,sBAAeA,EAAf,CAAqBR,eAChD,IAEIc,EAAoBP,uBACxB,SAACN,GAAD,OAAuBI,GAAQ,SAACG,GAAD,sBAAeA,EAAf,CAAqBP,mBACpD,IAEIc,EAAmBR,uBACvB,SAACR,GAAD,OAAsBM,GAAQ,SAACG,GAAD,sBAAeA,EAAf,CAAqBT,kBACnD,IAGIiB,EAAgBT,sBAAW,sBAAC,4BAAAU,EAAA,sEACA9C,IAAO+C,sBAAsBd,EAAKJ,OADlC,OAC1BE,EAD0B,OAEhCG,GAAQ,SAACG,GAAD,sBAAeA,EAAf,CAAqBL,MAAO,gBAAiBD,yBAFrB,2CAG/B,CAACG,EAASD,EAAKJ,QAEZmB,EAAc,uCAAG,sBAAAF,EAAA,yDAChBb,EAAKF,kBADW,uBAEnBkB,QAAQC,IAAI,wBAFO,mDAMbjB,EAAKF,kBAAkBoB,QAAQlB,EAAKH,WANvB,OAOnBI,GAAQ,SAACG,GAAD,sBAAeA,EAAf,CAAqBL,MAAO,eAPjB,gDASnBiB,QAAQC,IAAI,gBATO,yDAAH,qDA8CdE,EAAWhB,uBAAY,WAC3BpC,IACGqD,UACAC,MAAK,kBAAML,QAAQC,IAAI,uBACvBK,OAAM,kBAAMN,QAAQC,IAAI,0BACxBM,SAAQ,kBAAMtB,GAAQ,SAACG,GAAD,sBAAeA,EAAf,CAAqBL,MAAO,oBACpD,IAMH,OAJAyB,qBAAU,WACRL,MACC,CAACA,IAGF,kBAAC,IAAD,CAAO3B,kBAAmBA,GACR,YAAfQ,EAAKD,MACJ,kBAAC0B,EAAA,EAAD,CAAmBC,KAAK,UACP,kBAAf1B,EAAKD,MACP,kBAAC4B,EAAA,EAAD,KACE,kBAAC,IAAD,CACEC,YAAY,0BACZC,aAAa,aACbC,MAAO9B,EAAKH,UACZkC,aAAcrB,IAEhB,kBAAC,IAAD,CACEtC,MAAM,iCACNC,MAAM,UACN2D,SAAS,OACT9D,QAAS6C,IAEX,kBAAC,IAAD,CAAQ3C,MAAM,UAAUF,QAASqC,KAElB,UAAfP,EAAKD,MACP,kBAAC4B,EAAA,EAAD,KACE,kBAAC,IAAD,CACEC,YAAY,QACZC,aAAa,aACbC,MAAO9B,EAAKJ,MACZmC,aAActB,IAEhB,kBAAC,IAAD,CACErC,MAAM,yBACNC,MAAM,UACN2D,SAAS,OACT9D,QAAS0C,IAEX,kBAAC,IAAD,CAAQxC,MAAM,UAAUF,QAASoC,KAElB,oBAAfN,EAAKD,MACP,kBAAC4B,EAAA,EAAD,KACE,kBAAC,IAAD,CACEC,YAAY,QACZK,gBAAgB,WAChBJ,aAAa,gBACbC,MAAO9B,EAAKN,MACZqC,aAAcvB,IAEhB,kBAAC,IAAD,CACEpC,MAAM,sBACNC,MAAM,UACN2D,SAAS,OACT9D,QA9FY,WACpBH,IACGmE,+BAA+BlC,EAAKN,MAAOM,EAAKL,UAChD0B,MAAK,WACJL,QAAQC,IAAI,wCAEbK,OAAM,SAACa,GACa,8BAAfA,EAAMC,MACRpB,QAAQC,IAAI,yCAGK,uBAAfkB,EAAMC,MACRpB,QAAQC,IAAI,kCAEdD,QAAQmB,MAAMA,SAkFZ,kBAAC,IAAD,CAAQ/D,MAAM,UAAUF,QAASgC,KAElB,UAAfF,EAAKD,MACP,kBAAC4B,EAAA,EAAD,KACE,kBAAC,IAAD,CACEC,YAAY,QACZK,gBAAgB,WAChBJ,aAAa,gBACbC,MAAO9B,EAAKN,MACZqC,aAAcvB,IAEhB,kBAAC,IAAD,CACEoB,YAAY,WACZK,gBAAgB,WAChBI,iBAAe,EACfP,MAAO9B,EAAKL,SACZoC,aAAcpB,IAEhB,kBAAC,IAAD,CAAQvC,MAAM,SAASC,MAAM,UAAU2D,SAAS,SAChD,kBAAC,IAAD,CAAQ5D,MAAM,kBAAkBF,QAASmC,IACzC,kBAAC,IAAD,CAAQjC,MAAM,UAAUF,QAASoC,KAGnC,kBAACqB,EAAA,EAAD,KACGW,IAASC,KAAOC,IAAOC,GAAGC,KACzB,kBAAC,EAAD,CACEtE,MAAM,sBACND,KAAK,QACLD,QAAS,eAGb,kBAAC,EAAD,CACEE,MAAM,uBACND,KAAK,SACLD,QAAS,eAEX,kBAAC,EAAD,CACEE,MAAM,yBACND,KAAK,WACLD,QAAS,eAEX,kBAAC,EAAD,CACEE,MAAM,sBACND,KAAK,QACLD,QAASgC,IAEX,kBAAC,EAAD,CACE9B,MAAM,sBACND,KAAK,QACLD,QAASqC,IAEX,kBAAC,EAAD,CACEnC,MAAM,iBACND,KAAK,QACLD,QApIU,WAClBH,IACG4E,oBACAtB,MAAK,WACJL,QAAQC,IAAI,iCAEbK,OAAM,SAACa,GACa,+BAAfA,EAAMC,MACRpB,QAAQC,IAAI,8CAGdD,QAAQmB,MAAMA,cC3JPlE,0BAAK,WAClB,IAAMI,EAAQC,cACRsE,EAAMC,cACNC,EAASC,IAAWC,OAAO,CAC/BC,OAAQ,CACNC,cAAenE,IAAMD,QAAQqE,OALO,EAQN1D,oBAAS,GARH,mBAQjC2D,EARiC,KAQtBC,EARsB,KASlCC,EAAgB,kBAAMD,GAAa,SAACjD,GAAD,OAAWA,MAEpD,OACE,oCACE,kBAAC,IAAD,CAAQmD,YAAaX,EAAIY,GAAG,oBAAqBpF,MAAM,cACrD,kBAACqF,EAAA,EAAD,CACElF,MAAO,CAACmF,gBAAiBrF,EAAMsF,SAC/BC,sBAAuB,CACrBC,kBAAmB9E,IAAMD,QAAQqE,IACjCW,gBAAiB/E,IAAMD,QAAQE,MAEjC,kBAAC,IAAD,KACE,kBAAC,IAAD,CACET,MAAOuE,EAAOG,OACd3D,KAAK,KACL0C,SAAS,SACT5D,MAAM,iBAER,kBAAC,IAAD,CAAMkB,KAAK,UAAUlB,MAAM,kCAC3B,kBAAC,IAAD,CAAMkB,KAAK,UAAUlB,MAAM,sBAC3B,kBAAC,IAAD,CAAMkB,KAAK,UAAUlB,MAAM,6BAE7B,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEG,MAAOuE,EAAOG,OACd3D,KAAK,KACL0C,SAAS,SACT5D,MAAM,8BAER,kBAAC,IAAD,CAAMkB,KAAK,UAAUlB,MAAM,oBAC3B,kBAAC,IAAD,CAAMkB,KAAK,UAAUlB,MAAM,mBAC3B,kBAAC,IAAD,CAAMkB,KAAK,UAAUlB,MAAM,wBAC3B,kBAAC,IAAD,CAAMkB,KAAK,UAAUlB,MAAM,gCAG/B,kBAAC,IAAD,CACEgB,KAAK,OACL2E,KAAG,EACH7F,QAAS,aACTG,MAAOA,EAAM2F,WACbzF,MAAO,CACL0F,SAAU,WACVhB,OAAQ,EACRiB,MAAO,EACPC,OAAQpF,IAAMD,QAAQqE,OAG1B,kBAAC,IAAD,CAAQ/E,MAAM,YAAYF,QAASoF,KAEpCF,GAAa,kBAAC,EAAD,CAAO5D,kBAAmB8D","file":"static/js/19.9a630ff8.chunk.js","sourcesContent":["const auth = {};\nexport {auth};\n","import React, {memo, useCallback, useEffect, useState} from 'react';\nimport {ActivityIndicator, Platform, View} from 'react-native';\nimport {\n  Button,\n  Icon,\n  Modal,\n  Text,\n  TextInput,\n  TouchableOpacity,\n} from '../../components';\nimport {useColor} from '../../hooks';\nimport {Config, Theme} from '../../utils';\nimport {FirebaseAuthTypes, auth} from '../../conversions/Firebase';\n\ninterface Props {\n  onBackgroundPress: () => void;\n}\n\n// TODO: relocate to somewhere\ninterface SignInButtonProps {\n  onPress: () => void;\n  icon: string;\n  title: string;\n}\nconst SignInButton = memo(function SignInButton({\n  onPress,\n  icon,\n  title,\n}: SignInButtonProps) {\n  const color = useColor();\n  return (\n    <TouchableOpacity\n      style={{\n        alignItems: 'center',\n        justifyContent: 'center',\n        flexDirection: 'row',\n        borderColor: color.text,\n        borderWidth: 2,\n        padding: Theme.padding.p02,\n        marginBottom: Theme.padding.p02,\n        borderRadius: Theme.padding.p10,\n      }}\n      onPress={onPress}>\n      <Icon name={icon} />\n      <Text\n        title={title}\n        style={{paddingLeft: Theme.padding.p02}}\n        type=\"button\"\n      />\n    </TouchableOpacity>\n  );\n});\n\ntype FormState =\n  | 'loading'\n  | 'landing'\n  | 'email'\n  | 'forgot password'\n  | 'phone'\n  | 'phone confirm';\n\ntype State = {\n  email: string;\n  password: string;\n  phone: string;\n  phoneCode: string;\n  phoneConfirmation: FirebaseAuthTypes.ConfirmationResult | null;\n  state: FormState;\n};\n\nexport const Login = memo(function Login({onBackgroundPress}: Props) {\n  const [form, setForm] = useState<State>({\n    email: '',\n    password: '',\n    phone: '',\n    phoneCode: '',\n    phoneConfirmation: null,\n    state: 'loading',\n  });\n\n  const onEmail = useCallback(\n    () => setForm((prev) => ({...prev, password: '', state: 'email'})),\n    [],\n  );\n  const onForgotPassword = useCallback(\n    () => setForm((prev) => ({...prev, state: 'forgot password'})),\n    [],\n  );\n  const onLanding = useCallback(\n    () =>\n      setForm((prev) => ({...prev, email: '', password: '', state: 'landing'})),\n    [],\n  );\n  const onPhone = useCallback(\n    () => setForm((prev) => ({...prev, state: 'phone'})),\n    [],\n  );\n\n  const onEmailChange = useCallback(\n    (email: string) => setForm((prev) => ({...prev, email})),\n    [],\n  );\n  const onPhoneChange = useCallback(\n    (phone: string) => setForm((prev) => ({...prev, phone})),\n    [],\n  );\n  const onPhoneCodeChange = useCallback(\n    (phoneCode: string) => setForm((prev) => ({...prev, phoneCode})),\n    [],\n  );\n  const onPasswordChange = useCallback(\n    (password: string) => setForm((prev) => ({...prev, password})),\n    [],\n  );\n\n  const onPhoneSubmit = useCallback(async () => {\n    const phoneConfirmation = await auth().signInWithPhoneNumber(form.phone);\n    setForm((prev) => ({...prev, state: 'phone confirm', phoneConfirmation}));\n  }, [setForm, form.phone]);\n\n  const onPhoneConfirm = async () => {\n    if (!form.phoneConfirmation) {\n      console.log('missing confirmation');\n      return;\n    }\n    try {\n      await form.phoneConfirmation.confirm(form.phoneCode);\n      setForm((prev) => ({...prev, state: 'landing'}));\n    } catch {\n      console.log('invalid code');\n    }\n  };\n\n  const onEmailSubmit = () => {\n    auth()\n      .createUserWithEmailAndPassword(form.email, form.password)\n      .then(() => {\n        console.log('User account created & signed in!');\n      })\n      .catch((error) => {\n        if (error.code === 'auth/email-already-in-use') {\n          console.log('That email address is already in use!');\n        }\n\n        if (error.code === 'auth/invalid-email') {\n          console.log('That email address is invalid!');\n        }\n        console.error(error);\n      });\n  };\n\n  const onAnonymous = () => {\n    auth()\n      .signInAnonymously()\n      .then(() => {\n        console.log('User signed in anonymously');\n      })\n      .catch((error) => {\n        if (error.code === 'auth/operation-not-allowed') {\n          console.log('Enable anonymous in your firebase console.');\n        }\n\n        console.error(error);\n      });\n  };\n\n  const onLogout = useCallback(() => {\n    auth()\n      .signOut()\n      .then(() => console.log('User signed out!'))\n      .catch(() => console.log('no user to sign out'))\n      .finally(() => setForm((prev) => ({...prev, state: 'landing'})));\n  }, []);\n\n  useEffect(() => {\n    onLogout();\n  }, [onLogout]);\n\n  return (\n    <Modal onBackgroundPress={onBackgroundPress}>\n      {form.state === 'loading' ? (\n        <ActivityIndicator size=\"large\" />\n      ) : form.state === 'phone confirm' ? (\n        <View>\n          <TextInput\n            placeholder=\"phone confirmation code\"\n            keyboardType=\"number-pad\"\n            value={form.phoneCode}\n            onChangeText={onPhoneCodeChange}\n          />\n          <Button\n            title=\"verify phone confirmation code\"\n            color=\"primary\"\n            emphasis=\"high\"\n            onPress={onPhoneConfirm}\n          />\n          <Button title=\"go back\" onPress={onPhone} />\n        </View>\n      ) : form.state === 'phone' ? (\n        <View>\n          <TextInput\n            placeholder=\"phone\"\n            keyboardType=\"number-pad\"\n            value={form.phone}\n            onChangeText={onPhoneChange}\n          />\n          <Button\n            title=\"send confirmation code\"\n            color=\"primary\"\n            emphasis=\"high\"\n            onPress={onPhoneSubmit}\n          />\n          <Button title=\"go back\" onPress={onLanding} />\n        </View>\n      ) : form.state === 'forgot password' ? (\n        <View>\n          <TextInput\n            placeholder=\"email\"\n            textContentType=\"username\"\n            keyboardType=\"email-address\"\n            value={form.email}\n            onChangeText={onEmailChange}\n          />\n          <Button\n            title=\"send password reset\"\n            color=\"primary\"\n            emphasis=\"high\"\n            onPress={onEmailSubmit}\n          />\n          <Button title=\"go back\" onPress={onEmail} />\n        </View>\n      ) : form.state === 'email' ? (\n        <View>\n          <TextInput\n            placeholder=\"email\"\n            textContentType=\"username\"\n            keyboardType=\"email-address\"\n            value={form.email}\n            onChangeText={onEmailChange}\n          />\n          <TextInput\n            placeholder=\"password\"\n            textContentType=\"password\"\n            secureTextEntry\n            value={form.password}\n            onChangeText={onPasswordChange}\n          />\n          <Button title=\"submit\" color=\"primary\" emphasis=\"high\" />\n          <Button title=\"forgot password\" onPress={onForgotPassword} />\n          <Button title=\"go back\" onPress={onLanding} />\n        </View>\n      ) : (\n        <View>\n          {Platform.OS === Config.os.ios && (\n            <SignInButton\n              title=\"Continue with Apple\"\n              icon=\"apple\"\n              onPress={() => undefined}\n            />\n          )}\n          <SignInButton\n            title=\"Continue with Google\"\n            icon=\"google\"\n            onPress={() => undefined}\n          />\n          <SignInButton\n            title=\"Continue with Facebook\"\n            icon=\"facebook\"\n            onPress={() => undefined}\n          />\n          <SignInButton\n            title=\"Continue with Email\"\n            icon=\"email\"\n            onPress={onEmail}\n          />\n          <SignInButton\n            title=\"Continue with Phone\"\n            icon=\"phone\"\n            onPress={onPhone}\n          />\n          <SignInButton\n            title=\"Continue trial\"\n            icon=\"close\"\n            onPress={onAnonymous}\n          />\n        </View>\n      )}\n    </Modal>\n  );\n});\n","import React, {memo, useState} from 'react';\nimport {ScrollView, StyleSheet} from 'react-native';\nimport {Button, Card, Icon, Screen, Text} from '../../components';\nimport {useColor, useNav} from '../../hooks';\nimport {Theme} from '../../utils';\nimport {Login} from '../../features/Login';\n\nexport default memo(function Checklists() {\n  const color = useColor();\n  const nav = useNav();\n  const styles = StyleSheet.create({\n    bottom: {\n      paddingBottom: Theme.padding.p04,\n    },\n  });\n  const [showLogin, setShowLogin] = useState(false);\n  const onToggleLogin = () => setShowLogin((prev) => !prev);\n\n  return (\n    <>\n      <Screen onLeftPress={nav.to('portfolioLanding')} title=\"Checklists\">\n        <ScrollView\n          style={{backgroundColor: color.surface}}\n          contentContainerStyle={{\n            paddingHorizontal: Theme.padding.p04,\n            paddingVertical: Theme.padding.p02,\n          }}>\n          <Card>\n            <Text\n              style={styles.bottom}\n              type=\"h4\"\n              emphasis=\"medium\"\n              title=\"Weekly Goals\"\n            />\n            <Text type=\"caption\" title=\"1. complete learn plan profit\" />\n            <Text type=\"caption\" title=\"2. ship checklist\" />\n            <Text type=\"caption\" title=\"3. complete 30 leetcode\" />\n          </Card>\n          <Card>\n            <Text\n              style={styles.bottom}\n              type=\"h4\"\n              emphasis=\"medium\"\n              title=\"Daily Habits and Routines\"\n            />\n            <Text type=\"caption\" title=\"After I wake up\" />\n            <Text type=\"caption\" title=\"After I shower\" />\n            <Text type=\"caption\" title=\"Before I one on one\" />\n            <Text type=\"caption\" title=\"Before I get on the train\" />\n          </Card>\n        </ScrollView>\n        <Icon\n          name=\"plus\"\n          fab\n          onPress={() => undefined}\n          color={color.background}\n          style={{\n            position: 'absolute',\n            bottom: 0,\n            right: 0,\n            margin: Theme.padding.p04,\n          }}\n        />\n        <Button title=\"showLogin\" onPress={onToggleLogin} />\n      </Screen>\n      {showLogin && <Login onBackgroundPress={onToggleLogin} />}\n    </>\n  );\n});\n"],"sourceRoot":""}