{"version":3,"sources":["apps/Complete/configs.tsx","apps/Complete/components/TextInputWithIcons.tsx","apps/Complete/components/AddButton.tsx","apps/Complete/components/AddItem.tsx","apps/Complete/components/AddList.tsx","apps/Complete/components/Card.tsx","apps/Complete/components/ListHeader.tsx","apps/Complete/components/ListItem.tsx","apps/Complete/components/ListItems.tsx","apps/Complete/components/List.tsx","apps/Complete/components/Board.tsx","apps/Complete/components/OrganizeButton.tsx","apps/Complete/screens/Account/factory.ts","apps/Complete/screens/Account/index.tsx","apps/Complete/screens/Capture/index.tsx","apps/Complete/screens/ItemDetail/index.tsx","apps/Complete/screens/Landing/index.tsx","apps/Complete/screens/Project/index.tsx","apps/Complete/screens/Projects/index.tsx","apps/Complete/screens/Reflect/Graph.tsx","apps/Complete/screens/Reflect/index.tsx","apps/Complete/index.tsx"],"names":["config","borderRadius","Theme","padding","p02","p04","alert","width","height","TextInputWithIcons","memo","value","multiline","maxIconHeight","p06","placeholder","backgroundColor","pointerEvents","focusOnLoad","icons","type","onSubmit","blurOnSubmit","onFocus","onBlur","onRef","color","useColor","bgColor","background","useState","text","setText","showControls","setShowControls","onTextChange","useCallback","change","onFocusInternal","onSubmitInternal","trim","length","onBlurInternal","onIconPressInternal","callback","containerHeight","setContainerHeight","iconHeight","clampIconHeight","onLayout","e","nativeEvent","layout","View","style","flex","flexDirection","onChangeText","onSubmitEditing","returnKeyType","alignItems","map","icon","hidden","focus","disabled","required","name","onPress","padded","size","AddButton","title","textInputRef","useRef","showInput","setShowInput","onAddItemPress","p","onItemTitleClose","onItemTitleSubmit","current","primary","p12","justifyContent","center","AddItem","listId","dispatch","useRootDispatch","itemId","v4","date","Date","now","item","id","active","createdAt","updatedAt","createItem","updateListAddItem","AddList","boardId","list","items","createList","updateBoardAddList","Card","children","margin","marginRight","marginBottom","ListHeader","listTitle","useRootSelector","s","completeList","onSave","updateListTitle","Keyboard","dismiss","onDetail","ListItem","completeItem","navigate","useNavigation","updateItem","onItemNav","board","Error","setActiveBoard","onItemDetails","setActiveItem","setActiveList","onItemLongPress","console","log","onItemPress","TouchableOpacity","activeOpacity","onLongPress","surface","ListItems","maxHeight","listItems","cardsRef","cardsLength","onKeyExtractor","onCardSizeChange","scrollToEnd","onRenderItem","FlatList","data","keyExtractor","keyboardShouldPersistTaps","onContentSizeChange","ref","renderItem","showsVerticalScrollIndicator","List","orientation","listWidth","listMaxHeight","Board","listSize","completeBoard","getItemId","getItemLayout","_","index","offset","renderAddList","renderList","ListFooterComponent","contentContainerStyle","lists","decelerationRate","horizontal","showsHorizontalScrollIndicator","snapToAlignment","snapToInterval","OrganizeButton","disable","defaults","Account","goBack","navBack","onLogin","inboxItems","inboxList","inboxBoard","homeItems","homeLists","homeBoard","projectItems","projectsList","listsItems","listsList","categoryBoard","user","boards","getDefaultUserTemplate","createBoard","createUser","onLogout","removeUser","onSetActive","setActiveUser","onNavToAdmin","onBackgroundPress","paddingBottom","emphasis","Capture","keyboardHeight","state","device","container","button","dimensions","setDimensions","android","Platform","OS","listHeight","getInboxListId","onOrganize","key","event","navToAccount","onRightPress","rightIcon","render","ItemDetail","deleteModal","setDeleteModal","onItemDelete","removeItem","updateListRemoveItem","onItemClose","onItemSubmit","onDeletePress","onDeleteClose","description","overlayColor","widthPercent","Landing","navPortfolioLogin","slides","info","warning","success","brand","Project","screenWidth","getSmallestDimension","setContainer","onLeftPress","Projects","listIds","getCategoryListIds","getDomain","domain","Math","min","max","Graph","scaleX","scaleTime","d","range","scaleY","scaleLinear","strokeWidth","shape","x","y","curve","StyleSheet","absoluteFill","x1","x2","y1","y2","stopColor","fill","stroke","Title","getTime","Reflect","ScrollView","Dimensions","get","noHeader","headerShown","RootTab","createBottomTabNavigator","RootStack","createStackNavigator","ProjectsStack","tabIcons","capture","focused","unfocused","reflect","Focus","Navigator","screenOptions","Screen","component","Tabs","tabBarOptions","keyboardHidesTabBar","activeTintColor","inactiveTintColor","secondary","showLabel","route","tabBarIcon","iconColor","Main","completeUser","mode","rootMode","rootScreenOptions","Notification","Modal"],"mappings":"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","file":"static/js/12.cd9d0b43.chunk.js","sourcesContent":["import {Theme} from '../../utils';\n\nexport const config = {\n  borderRadius: Theme.padding.p02,\n  padding: Theme.padding.p04,\n  alert: {\n    width: 0.8,\n    height: 0.6,\n  },\n};\n","import React, {memo, MutableRefObject, useCallback, useState} from 'react';\nimport {LayoutChangeEvent, TextInput as Original, View} from 'react-native';\nimport {Icon, TextInput} from '../../../components';\nimport {PointerEvents} from '../../../components/TextInput/types';\nimport {useColor} from '../../../hooks';\nimport {FontType, Theme} from '../../../utils';\n\ntype Icon = {\n  name: string;\n  onPress: (text: string) => void;\n  hidden?: boolean;\n  color?: string;\n  focus?: boolean;\n  required?: boolean;\n};\n\ntype TextInputWithIconsProps = {\n  value: string;\n  placeholder: string;\n  icons: Icon[];\n  onRef?: MutableRefObject<Original | null>;\n  onSubmit: (text: string) => void;\n  backgroundColor?: string;\n  pointerEvents?: PointerEvents;\n  type?: FontType;\n  focusOnLoad?: boolean;\n  onBlur?: () => void;\n  onFocus?: () => void;\n  blurOnSubmit?: boolean;\n  multiline?: boolean;\n  maxIconHeight?: number;\n};\n\nexport const TextInputWithIcons = memo(function TextInputWithIcons({\n  value,\n  multiline,\n  maxIconHeight = Theme.padding.p06,\n  placeholder,\n  backgroundColor,\n  pointerEvents,\n  focusOnLoad,\n  icons,\n  type,\n  onSubmit,\n  blurOnSubmit,\n  onFocus,\n  onBlur,\n  onRef,\n}: TextInputWithIconsProps) {\n  const color = useColor();\n  const bgColor = backgroundColor || color.background;\n  const [text, setText] = useState(value);\n  const [showControls, setShowControls] = useState(false);\n\n  const onTextChange = useCallback((change) => {\n    setText(change);\n  }, []);\n\n  const onFocusInternal = useCallback(() => {\n    setShowControls(true);\n    if (onFocus) onFocus();\n  }, [onFocus]);\n\n  const onSubmitInternal = useCallback(() => {\n    if (text.trim().length === 0) return;\n    onSubmit(text);\n    if (value === '') setText('');\n  }, [onSubmit, text, value]);\n\n  const onBlurInternal = useCallback(() => {\n    setText(value);\n    setShowControls(false);\n    if (onBlur) onBlur();\n  }, [onBlur, value]);\n\n  const onIconPressInternal = useCallback(\n    (callback) => () => {\n      callback(text);\n      if (value === '') setText('');\n    },\n    [text, value],\n  );\n  const [containerHeight, setContainerHeight] = useState(0);\n  const iconHeight = containerHeight - Theme.padding.p04;\n  const clampIconHeight =\n    iconHeight > maxIconHeight ? maxIconHeight : iconHeight;\n\n  const onLayout = useCallback(\n    (e: LayoutChangeEvent) => {\n      if (containerHeight) return;\n      setContainerHeight(e.nativeEvent.layout.height);\n    },\n    [containerHeight],\n  );\n\n  return (\n    <View onLayout={onLayout} style={{flex: 1, flexDirection: 'row'}}>\n      <TextInput\n        backgroundColor={bgColor}\n        blurOnSubmit={blurOnSubmit}\n        flex\n        focusOnLoad={focusOnLoad}\n        multiline={multiline}\n        onBlur={onBlurInternal}\n        onChangeText={onTextChange}\n        onFocus={onFocusInternal}\n        onRef={onRef}\n        onSubmitEditing={onSubmitInternal}\n        placeholder={placeholder}\n        pointerEvents={pointerEvents}\n        returnKeyType=\"done\"\n        type={type}\n        value={text}\n      />\n      <View style={{flexDirection: 'row', alignItems: 'center'}}>\n        {icons.map((icon) =>\n          icon.hidden ||\n          (showControls && !icon.focus) ||\n          (!showControls && icon.focus) ? null : (\n            <Icon\n              color={icon.color}\n              disabled={icon.required && text.trim().length === 0}\n              key={`${icon.name}-focus`}\n              name={icon.name}\n              onPress={onIconPressInternal(icon.onPress)}\n              padded\n              size={clampIconHeight}\n            />\n          ),\n        )}\n      </View>\n    </View>\n  );\n});\n","import React, {memo, useCallback, useRef, useState} from 'react';\nimport {TextInput as OriginalTextInput, View} from 'react-native';\nimport {Button} from '../../../components';\nimport {useColor} from '../../../hooks';\nimport {Theme} from '../../../utils';\nimport {config} from '../configs';\nimport {TextInputWithIcons} from './TextInputWithIcons';\n\ntype AddButtonProps = {\n  width?: number;\n  placeholder: string;\n  title: string;\n  onSubmit: (value: string) => void;\n};\n\nexport const AddButton = memo(function AddButton({\n  width,\n  placeholder,\n  title,\n  onSubmit,\n}: AddButtonProps) {\n  const color = useColor();\n  const textInputRef = useRef<OriginalTextInput | null>(null);\n  const [showInput, setShowInput] = useState(false);\n  const onAddItemPress = useCallback(() => setShowInput((p) => !p), []);\n\n  const onItemTitleClose = useCallback(() => {\n    setShowInput(false);\n  }, []);\n\n  const onItemTitleSubmit = useCallback(\n    (text) => {\n      onSubmit(text);\n      textInputRef.current?.focus();\n    },\n    [onSubmit],\n  );\n\n  const onBlur = useCallback(() => {\n    setShowInput(false);\n  }, []);\n\n  const icons = [\n    {name: 'close', onPress: onItemTitleClose, focus: true},\n    {\n      name: 'send',\n      onPress: onItemTitleSubmit,\n      color: color.primary,\n      focus: true,\n      required: true,\n    },\n  ];\n\n  return (\n    <View\n      style={{\n        width,\n        height: Theme.padding.p12,\n        borderRadius: config.borderRadius,\n        backgroundColor: color.background,\n        justifyContent: 'center',\n      }}>\n      {showInput ? (\n        <TextInputWithIcons\n          blurOnSubmit={false}\n          focusOnLoad\n          icons={icons}\n          onBlur={onBlur}\n          onSubmit={onItemTitleSubmit}\n          placeholder={placeholder}\n          value=\"\"\n        />\n      ) : (\n        <Button center color=\"primary\" onPress={onAddItemPress} title={title} />\n      )}\n    </View>\n  );\n});\n","import React, {memo, useCallback} from 'react';\nimport {v4} from 'uuid';\nimport {useRootDispatch} from '../../../utils';\nimport {createItem, Item, updateListAddItem} from '../models';\nimport {AddButton} from './AddButton';\n\ntype AddItemProps = {\n  listId: string;\n  placeholder: string;\n  title: string;\n};\n\nexport const AddItem = memo(function AddItem({\n  placeholder,\n  title,\n  listId,\n}: AddItemProps) {\n  const dispatch = useRootDispatch();\n  const onSubmit = useCallback(\n    (value: string) => {\n      const itemId = v4();\n      const date = Date.now();\n      const item: Item = {\n        id: itemId,\n        active: true,\n        title: value,\n        createdAt: date,\n        updatedAt: date,\n      };\n      dispatch(createItem(item));\n      dispatch(updateListAddItem({listId, itemId}));\n    },\n    [dispatch, listId],\n  );\n\n  return (\n    <AddButton onSubmit={onSubmit} placeholder={placeholder} title={title} />\n  );\n});\n","import React, {memo, useCallback} from 'react';\nimport {v4} from 'uuid';\nimport {useRootDispatch} from '../../../utils';\nimport {createList, List, updateBoardAddList} from '../models';\nimport {AddButton} from './AddButton';\n\ntype AddListProps = {\n  boardId: string;\n  placeholder: string;\n  title: string;\n  width: number;\n};\n\nexport const AddList = memo(function AddList({\n  placeholder,\n  title,\n  boardId,\n  width,\n}: AddListProps) {\n  const dispatch = useRootDispatch();\n  const onSubmit = useCallback(\n    (value: string) => {\n      const listId = v4();\n      const date = Date.now();\n      const list: List = {\n        id: listId,\n        active: true,\n        title: value,\n        createdAt: date,\n        updatedAt: date,\n        items: [],\n      };\n      dispatch(createList(list));\n      dispatch(updateBoardAddList({boardId, listId}));\n    },\n    [boardId, dispatch],\n  );\n\n  return (\n    <AddButton\n      onSubmit={onSubmit}\n      placeholder={placeholder}\n      title={title}\n      width={width}\n    />\n  );\n});\n","import React, {memo, ReactElement} from 'react';\nimport {LayoutChangeEvent, View} from 'react-native';\nimport {useColor} from '../../../hooks';\nimport {config} from '../configs';\n\n// TODO: combine card components with global card\n\ntype CardProps = {\n  onLayout?: (event: LayoutChangeEvent) => void;\n  children: ReactElement | ReactElement[];\n  margin?: 'bottom' | 'right' | 'none';\n  width?: number;\n};\n\nexport const Card = memo(function Card({\n  children,\n  onLayout,\n  margin = 'none',\n  width,\n}: CardProps) {\n  const color = useColor();\n  return (\n    <View\n      onLayout={onLayout}\n      style={{\n        width,\n        borderRadius: config.borderRadius,\n        backgroundColor: color.background,\n        padding: config.padding / 2,\n        marginRight: margin === 'right' ? config.padding : 0,\n        marginBottom: margin === 'bottom' ? config.padding : 0,\n      }}>\n      {children}\n    </View>\n  );\n});\n","import React, {memo, useCallback} from 'react';\nimport {Keyboard, View} from 'react-native';\nimport {useColor} from '../../../hooks';\nimport {useRootDispatch, useRootSelector} from '../../../utils';\nimport {updateListTitle} from '../models';\nimport {TextInputWithIcons} from './TextInputWithIcons';\n\ntype ListHeaderProps = {\n  listId: string;\n};\n\nexport const ListHeader = memo(function ListHeader({listId}: ListHeaderProps) {\n  const dispatch = useRootDispatch();\n  const color = useColor();\n  const listTitle = useRootSelector((s) => s.completeList.items[listId].title);\n\n  const onSave = useCallback(\n    (title) => {\n      dispatch(updateListTitle({listId, title}));\n      Keyboard.dismiss();\n    },\n    [dispatch, listId],\n  );\n\n  const onDetail = useCallback(() => undefined, []);\n\n  const onClose = useCallback(() => Keyboard.dismiss(), []);\n\n  const icons = [\n    {name: 'close', onPress: onClose, focus: true},\n    {\n      name: 'send',\n      onPress: onSave,\n      color: color.primary,\n      focus: true,\n      required: true,\n    },\n    {name: 'dots-horizontal', onPress: onDetail},\n  ];\n\n  return (\n    <View\n      style={{\n        flexDirection: 'row',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n      }}>\n      <TextInputWithIcons\n        icons={icons}\n        onSubmit={onSave}\n        placeholder=\"List title...\"\n        type=\"h4\"\n        value={listTitle}\n      />\n    </View>\n  );\n});\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback, useRef} from 'react';\nimport {\n  Keyboard,\n  TextInput as OriginalTextInput,\n  TouchableOpacity,\n} from 'react-native';\nimport {useColor} from '../../../hooks';\nimport {useRootDispatch, useRootSelector} from '../../../utils';\nimport {config} from '../configs';\nimport {\n  setActiveBoard,\n  setActiveItem,\n  setActiveList,\n  updateItem,\n} from '../models';\nimport {TextInputWithIcons} from './TextInputWithIcons';\n\ntype ListItemProps = {\n  itemId: string;\n  listId: string;\n};\n\nexport const ListItem = memo(function ListItem({\n  itemId,\n  listId,\n}: ListItemProps) {\n  const item = useRootSelector((s) => s.completeItem.items[itemId]);\n  const textInputRef = useRef<OriginalTextInput | null>(null);\n  const dispatch = useRootDispatch();\n  const {navigate} = useNavigation();\n  const color = useColor();\n\n  const onItemTitleClose = useCallback(() => {\n    Keyboard.dismiss();\n  }, []);\n\n  const onItemTitleSubmit = useCallback(\n    (title: string) => {\n      dispatch(updateItem({...item, title}));\n      Keyboard.dismiss();\n    },\n    [dispatch, item],\n  );\n\n  const onItemNav = useCallback(() => {\n    if (!item.board)\n      throw new Error('item does not have a board to navigate to');\n    dispatch(setActiveBoard(item.board));\n    navigate('board');\n  }, [dispatch, item.board, navigate]);\n\n  const onItemDetails = useCallback(() => {\n    dispatch(setActiveItem(itemId));\n    dispatch(setActiveList(listId));\n    navigate('item-detail');\n  }, [dispatch, itemId, listId, navigate]);\n\n  const onItemLongPress = useCallback(() => {\n    console.log('long press');\n  }, []);\n\n  const onItemPress = useCallback(() => {\n    textInputRef.current?.focus();\n  }, []);\n\n  const icons = [\n    {name: 'close', onPress: onItemTitleClose, focus: true},\n    {\n      name: 'send',\n      onPress: onItemTitleSubmit,\n      color: color.primary,\n      focus: true,\n      required: true,\n    },\n    {name: 'dots-horizontal', onPress: onItemDetails},\n    {name: 'chevron-right', onPress: onItemNav, hidden: !item.board},\n  ];\n\n  return (\n    <TouchableOpacity\n      activeOpacity={1}\n      key={item.id}\n      onLongPress={onItemLongPress}\n      onPress={onItemPress}\n      style={{\n        flex: 1,\n        borderRadius: config.borderRadius,\n        margin: config.padding / 2,\n        backgroundColor: color.surface,\n        flexDirection: 'row',\n      }}>\n      <TextInputWithIcons\n        backgroundColor={color.surface}\n        icons={icons}\n        onRef={textInputRef}\n        onSubmit={onItemTitleSubmit}\n        placeholder=\"Item name...\"\n        pointerEvents=\"none\"\n        value={item.title}\n      />\n    </TouchableOpacity>\n  );\n});\n","import React, {memo, useCallback, useRef} from 'react';\nimport {FlatList, ListRenderItem} from 'react-native';\nimport {useRootSelector} from '../../../utils';\nimport {ListItem} from './ListItem';\n\ntype ListItemsProps = {\n  listId: string;\n  maxHeight?: number;\n};\n\nexport const ListItems = memo(function ListItems({\n  listId,\n  maxHeight,\n}: ListItemsProps) {\n  const listItems = useRootSelector((s) => s.completeList.items[listId].items);\n  const cardsRef = useRef<FlatList | null>(null);\n  const cardsLength = useRef(listItems.length);\n\n  const onKeyExtractor = useCallback((item) => item, []);\n\n  const onCardSizeChange = useCallback(() => {\n    if (listItems.length > cardsLength.current) {\n      cardsRef.current?.scrollToEnd();\n      cardsLength.current = listItems.length;\n    }\n  }, [listItems.length]);\n\n  const onRenderItem: ListRenderItem<string> = useCallback(\n    ({item}) => {\n      return <ListItem itemId={item} key={item} listId={listId} />;\n    },\n    [listId],\n  );\n\n  return (\n    <FlatList\n      data={listItems}\n      keyExtractor={onKeyExtractor}\n      keyboardShouldPersistTaps=\"handled\"\n      onContentSizeChange={onCardSizeChange}\n      ref={cardsRef}\n      renderItem={onRenderItem}\n      showsVerticalScrollIndicator={false}\n      style={{maxHeight}}\n    />\n  );\n});\n","import React, {memo} from 'react';\nimport {View} from 'react-native';\nimport {AddItem} from './AddItem';\nimport {Card} from './Card';\nimport {ListHeader} from './ListHeader';\nimport {ListItems} from './ListItems';\n\ntype ListProps = {\n  listWidth?: number;\n  listId: string;\n  listMaxHeight: number;\n  orientation?: 'vertical' | 'horizontal';\n  title: string;\n  placeholder: string;\n};\n\nexport const List = memo(function List({\n  listId,\n  orientation,\n  listWidth,\n  listMaxHeight,\n  title,\n  placeholder,\n}: ListProps) {\n  const margin = orientation === 'horizontal' ? 'right' : 'bottom';\n  return (\n    <View>\n      <Card margin={margin} width={listWidth}>\n        <ListHeader listId={listId} />\n        <ListItems listId={listId} maxHeight={listMaxHeight} />\n        <AddItem listId={listId} placeholder={placeholder} title={title} />\n      </Card>\n    </View>\n  );\n});\n","import React, {memo, useCallback} from 'react';\nimport {FlatList} from 'react-native';\nimport {useRootSelector} from '../../../utils';\nimport {config} from '../configs';\nimport {AddList} from './AddList';\nimport {List} from './List';\n\ntype BoardProps = {\n  boardId: string;\n  listMaxHeight: number;\n  listWidth: number;\n};\n\nexport const Board = memo(function Board({\n  boardId,\n  listMaxHeight,\n  listWidth,\n}: BoardProps) {\n  const listSize = listWidth + config.padding;\n  const board = useRootSelector((s) => s.completeBoard.items[boardId]);\n  const getItemId = useCallback((item) => item, []);\n\n  const getItemLayout = useCallback(\n    (_, index) => ({\n      length: listSize,\n      offset: listSize * index,\n      index,\n    }),\n    [listSize],\n  );\n\n  const renderAddList = useCallback(() => {\n    return (\n      <AddList\n        boardId={boardId}\n        placeholder=\"List title...\"\n        title=\"Add list\"\n        width={listWidth}\n      />\n    );\n  }, [boardId, listWidth]);\n\n  const renderList = useCallback(\n    ({item}) => {\n      return (\n        <List\n          key={item}\n          listId={item}\n          listMaxHeight={listMaxHeight}\n          listWidth={listWidth}\n          orientation=\"horizontal\"\n          placeholder=\"Item title...\"\n          title=\"Add item\"\n        />\n      );\n    },\n    [listMaxHeight, listWidth],\n  );\n\n  return (\n    <FlatList\n      ListFooterComponent={renderAddList}\n      contentContainerStyle={{padding: config.padding}}\n      data={board.lists}\n      decelerationRate=\"fast\"\n      getItemLayout={getItemLayout}\n      horizontal\n      keyExtractor={getItemId}\n      keyboardShouldPersistTaps=\"handled\"\n      renderItem={renderList}\n      showsHorizontalScrollIndicator={false}\n      snapToAlignment=\"center\"\n      snapToInterval={listSize}\n      style={{height: '100%'}}\n    />\n  );\n});\n","import React, {memo} from 'react';\nimport {LayoutChangeEvent} from 'react-native';\nimport {Button} from '../../../components';\nimport {useRootSelector} from '../../../utils';\nimport {Card} from '../components/Card';\n\ntype OrganizeButtonProps = {\n  listId: string;\n  onPress: () => void;\n  onLayout: (event: LayoutChangeEvent) => void;\n};\n\nexport const OrganizeButton = memo(function OrganizeButton({\n  listId,\n  onPress,\n  onLayout,\n}: OrganizeButtonProps) {\n  const listItems = useRootSelector(\n    (s) => s.completeList.items[listId].items.length,\n  );\n  return (\n    <Card onLayout={onLayout}>\n      <Button\n        center\n        color=\"primary\"\n        disable={listItems === 0}\n        onPress={onPress}\n        title=\"Organize\"\n      />\n    </Card>\n  );\n});\n","import {v4} from 'uuid';\nimport {Board, Item, List, User} from '../../models';\n\ntype GetDefaultUserTemplate = {\n  user: User;\n  boards: Board[];\n  lists: List[];\n  items: Item[];\n};\n\nconst date = Date.now();\nconst defaults = () => ({\n  id: v4(),\n  active: true,\n  createdAt: date,\n  updatedAt: date,\n});\n\nexport const getDefaultUserTemplate = (): GetDefaultUserTemplate => {\n  // inbox\n  const inboxItems: Item[] = [\n    {...defaults(), title: 'do dishes'},\n    {...defaults(), title: 'schedule meeting with Jim'},\n    {...defaults(), title: 'run 4 miles'},\n    {...defaults(), title: 'change oil'},\n    {...defaults(), title: 'what is the best mediation'},\n    {...defaults(), title: 'record Kelly birthday on Sep 22'},\n    {...defaults(), title: 'drink water'},\n    {...defaults(), title: 'intensity + focus = deep work'},\n    {...defaults(), title: 'put $20 in phone'},\n    {...defaults(), title: 'clear emails'},\n  ];\n  const inboxList: List = {\n    ...defaults(),\n    title: 'Inbox',\n    items: inboxItems.map((item) => item.id),\n  };\n  const inboxBoard: Board = {\n    ...defaults(),\n    title: 'Inbox',\n    lists: [inboxList.id],\n  };\n\n  // sub category\n  const homeItems: Item[] = [\n    {...defaults(), title: 'clean desk'},\n    {...defaults(), title: 'clean room'},\n    {...defaults(), title: 'walk dog'},\n    {...defaults(), title: 'brush teeth'},\n    {...defaults(), title: 'do laundry'},\n    {...defaults(), title: 'fix sink'},\n  ];\n  const homeLists: List[] = [\n    {...defaults(), title: 'Backlog', items: homeItems.map((item) => item.id)},\n    {...defaults(), title: 'Todo', items: []},\n    {...defaults(), title: 'In Progress', items: []},\n    {...defaults(), title: 'Done', items: []},\n  ];\n  const homeBoard: Board = {\n    ...defaults(),\n    title: 'Home',\n    lists: homeLists.map((item) => item.id),\n  };\n\n  // category\n  const projectItems: Item[] = [\n    {...defaults(), title: 'at home', board: homeBoard.id},\n    {...defaults(), title: 'at town'},\n    {...defaults(), title: 'at work'},\n    {...defaults(), title: 'at gym'},\n    {...defaults(), title: 'app release'},\n  ];\n  const projectsList: List = {\n    ...defaults(),\n    title: 'Projects',\n    items: projectItems.map((item) => item.id),\n  };\n  const listsItems: Item[] = [\n    {...defaults(), title: 'meeting notes'},\n    {...defaults(), title: 'book summaries'},\n    {...defaults(), title: 'gift ideas'},\n    {...defaults(), title: 'checklists'},\n    {...defaults(), title: 'code languages'},\n  ];\n  const listsList: List = {\n    ...defaults(),\n    title: 'Lists',\n    items: listsItems.map((item) => item.id),\n  };\n  const categoryBoard: Board = {\n    ...defaults(),\n    title: 'Categories',\n    lists: [projectsList.id, listsList.id],\n  };\n\n  // user\n  const user: User = {\n    ...defaults(),\n    name: 'Bob Smith',\n    boards: [inboxBoard.id, categoryBoard.id],\n  };\n\n  return {\n    user,\n    boards: [homeBoard, inboxBoard, categoryBoard],\n    lists: [inboxList, ...homeLists, projectsList, listsList],\n    items: [...inboxItems, ...homeItems, ...projectItems, ...listsItems],\n  };\n};\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback} from 'react';\nimport {Button, Modal, Text} from '../../../../components';\nimport {useColor} from '../../../../hooks';\nimport {Theme, useRootDispatch} from '../../../../utils';\nimport {Card} from '../../components';\nimport {\n  createBoard,\n  createItem,\n  createList,\n  createUser,\n  removeUser,\n  setActiveUser,\n} from '../../models';\nimport {getDefaultUserTemplate} from './factory';\n\n// TODO: figure out a place for this\n// TODO: add reminders\n// TODO: add profile information\n// TODO: add payment\n\nexport const Account = memo(function Account() {\n  const color = useColor();\n  const dispatch = useRootDispatch();\n  const {goBack, navigate} = useNavigation();\n  const navBack = useCallback(() => goBack(), [goBack]);\n\n  const onLogin = useCallback(() => {\n    const {user, boards, lists, items} = getDefaultUserTemplate();\n    items.map((item) => dispatch(createItem(item)));\n    lists.map((list) => dispatch(createList(list)));\n    boards.map((board) => dispatch(createBoard(board)));\n    dispatch(createUser(user));\n    goBack();\n  }, [dispatch, goBack]);\n  const onLogout = useCallback(() => {\n    dispatch(removeUser());\n    navigate('main');\n  }, [dispatch, navigate]);\n  const onSetActive = useCallback(() => {\n    dispatch(setActiveUser(true));\n  }, [dispatch]);\n\n  const onNavToAdmin = useCallback(() => navigate('admin'), [navigate]);\n\n  return (\n    <Modal backgroundColor={color.surface} onBackgroundPress={navBack}>\n      <Card>\n        <Text\n          style={{paddingBottom: Theme.padding.p04}}\n          title=\"Profile\"\n          type=\"h3\"\n        />\n        <Text center emphasis=\"medium\" title=\"...\" type=\"h4\" />\n      </Card>\n      <Card>\n        <Text\n          style={{paddingBottom: Theme.padding.p04}}\n          title=\"Reminders\"\n          type=\"h3\"\n        />\n        <Text center emphasis=\"medium\" title=\"...\" type=\"h4\" />\n      </Card>\n      <Card>\n        <Text\n          style={{paddingBottom: Theme.padding.p04}}\n          title=\"Payment\"\n          type=\"h3\"\n        />\n        <Text center emphasis=\"medium\" title=\"...\" type=\"h4\" />\n      </Card>\n      <Card>\n        <Text\n          style={{paddingBottom: Theme.padding.p04}}\n          title=\"Feedback\"\n          type=\"h3\"\n        />\n        <Text center emphasis=\"medium\" title=\"...\" type=\"h4\" />\n      </Card>\n      <Button onPress={onLogin} title=\"login\" />\n      <Button onPress={onLogout} title=\"logout\" />\n      <Button onPress={onSetActive} title=\"set active\" />\n      <Button onPress={onNavToAdmin} title=\"go to admin\" />\n    </Modal>\n  );\n});\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback, useState} from 'react';\nimport {LayoutChangeEvent, Platform, View} from 'react-native';\nimport {KeyboardHandler, Screen, Text} from '../../../../components';\nimport {useColor} from '../../../../hooks';\nimport {useRootSelector} from '../../../../utils';\nimport {List, OrganizeButton} from '../../components';\nimport {config} from '../../configs';\nimport {getInboxListId} from '../../models';\n\nexport const Capture = memo(function Capture() {\n  const color = useColor();\n  const {navigate} = useNavigation();\n\n  const keyboardHeight = useRootSelector(\n    (state) => state.device.keyboardHeight,\n  );\n  const [dimensions, setDimensions] = useState({container: 0, button: 0});\n  const android = Platform.OS === 'android';\n\n  const listHeight =\n    keyboardHeight === 0\n      ? dimensions.container -\n        dimensions.button -\n        (android ? config.padding * 8 : config.padding * 10)\n      : dimensions.container -\n        keyboardHeight -\n        (android ? config.padding * 3 : config.padding * 4);\n\n  const listId = useRootSelector(getInboxListId);\n\n  const onOrganize = useCallback(() => undefined, []);\n\n  const onLayout = useCallback(\n    (key: string) => (event: LayoutChangeEvent) => {\n      const {height} = event.nativeEvent.layout;\n      const {container, button} = dimensions;\n      const preventMultipleUpdates = container > 0 && button > 0;\n      if (preventMultipleUpdates) return;\n      setDimensions((p) => ({...p, [key]: height}));\n    },\n    [dimensions],\n  );\n\n  const navToAccount = useCallback(() => navigate('account'), [navigate]);\n\n  return (\n    <Screen onRightPress={navToAccount} rightIcon=\"account\" title=\"Capture\">\n      <KeyboardHandler\n        backgroundColor={color.surface}\n        onLayout={onLayout('container')}\n        render={dimensions.container > 0}>\n        {listId ? (\n          <View style={{height: '100%', padding: config.padding}}>\n            <List\n              listId={listId}\n              listMaxHeight={listHeight}\n              placeholder=\"Item title...\"\n              title=\"Add item\"\n            />\n            <OrganizeButton\n              listId={listId}\n              onLayout={onLayout('button')}\n              onPress={onOrganize}\n            />\n          </View>\n        ) : (\n          <Text title=\"missing account\" />\n        )}\n      </KeyboardHandler>\n    </Screen>\n  );\n});\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback, useState} from 'react';\nimport {Keyboard, View} from 'react-native';\nimport {Button, Modal, Text} from '../../../../components';\nimport {useColor} from '../../../../hooks';\nimport {Theme, useRootDispatch, useRootSelector} from '../../../../utils';\nimport {Card, TextInputWithIcons} from '../../components';\nimport {removeItem, updateItem, updateListRemoveItem} from '../../models';\n\n// TODO: update does not go to previous screen\n// TODO: delete does not go to previous screen\n\nexport const ItemDetail = memo(function ItemDetail() {\n  const dispatch = useRootDispatch();\n  const {goBack} = useNavigation();\n  const color = useColor();\n  const navBack = useCallback(() => goBack(), [goBack]);\n  const itemId = useRootSelector((s) => s.completeItem.active);\n  const listId = useRootSelector((s) => s.completeList.active);\n  const item = useRootSelector((s) => s.completeItem.items[itemId || '']);\n  const [deleteModal, setDeleteModal] = useState(false);\n\n  const onItemDelete = useCallback(() => {\n    if (!itemId || !listId)\n      throw new Error('missing listId or itemId on item detail screen');\n    dispatch(removeItem(itemId));\n    dispatch(updateListRemoveItem({listId, itemId}));\n    setDeleteModal(false);\n    goBack();\n  }, [dispatch, goBack, itemId, listId]);\n\n  const onItemClose = useCallback(() => {\n    Keyboard.dismiss();\n  }, []);\n\n  const onItemSubmit = useCallback(\n    (type: string) => (text: string) => {\n      console.log(type, text);\n      dispatch(updateItem({...item, [type]: text}));\n      Keyboard.dismiss();\n    },\n    [dispatch, item],\n  );\n\n  const icons = useCallback(\n    (type: string) => [\n      {name: 'close', onPress: onItemClose, focus: true},\n      {\n        name: 'send',\n        onPress: onItemSubmit(type),\n        color: color.primary,\n        focus: true,\n        required: true,\n      },\n    ],\n    [color.primary, onItemClose, onItemSubmit],\n  );\n\n  const onDeletePress = useCallback(() => {\n    setDeleteModal(true);\n  }, []);\n\n  const onDeleteClose = useCallback(() => {\n    setDeleteModal(false);\n  }, []);\n\n  return !item ? null : (\n    <>\n      <Modal backgroundColor={color.surface} onBackgroundPress={navBack}>\n        {!item ? (\n          <Text title=\"missing item\" />\n        ) : (\n          <View>\n            <Card margin=\"bottom\">\n              <TextInputWithIcons\n                icons={icons('title')}\n                onSubmit={onItemSubmit('title')}\n                placeholder=\"item title...\"\n                type=\"h4\"\n                value={item.title}\n              />\n            </Card>\n            <Card margin=\"bottom\">\n              <TextInputWithIcons\n                icons={icons('description')}\n                multiline\n                onSubmit={onItemSubmit('description')}\n                placeholder=\"item details...\"\n                value={item.description || ''}\n              />\n            </Card>\n            <Card margin=\"bottom\">\n              <Text\n                style={{paddingBottom: Theme.padding.p04}}\n                title=\"Reminders\"\n                type=\"h3\"\n              />\n            </Card>\n            <Card>\n              <Button\n                center\n                color=\"danger\"\n                onPress={onDeletePress}\n                title=\"delete\"\n              />\n            </Card>\n          </View>\n        )}\n      </Modal>\n      {!deleteModal ? null : (\n        <Modal\n          onBackgroundPress={onDeleteClose}\n          overlayColor\n          widthPercent={0.5}>\n          <View style={{alignItems: 'center'}}>\n            <Text\n              style={{paddingBottom: Theme.padding.p02}}\n              title=\"Are you sure?\"\n              type=\"h4\"\n            />\n            <View style={{flexDirection: 'row', justifyContent: 'center'}}>\n              <Button\n                color=\"secondary\"\n                onPress={onDeleteClose}\n                title=\"cancel\"\n              />\n              <Button onPress={onItemDelete} title=\"delete\" />\n            </View>\n          </View>\n        </Modal>\n      )}\n    </>\n  );\n});\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback} from 'react';\nimport {Button, Carousel, Screen} from '../../../../components';\nimport {Slide} from '../../../../components/Carousel/types';\nimport {useColor} from '../../../../hooks';\n\nexport const Landing = memo(function Landing() {\n  const {navigate} = useNavigation();\n  const color = useColor();\n  const navPortfolioLogin = useCallback(() => navigate('account'), [navigate]);\n\n  const slides: Slide[] = [\n    {id: '1', text: 'hello', color: color.info},\n    {id: '2', text: 'bob', color: color.warning},\n    {id: '3', text: 'steve', color: color.success},\n    {id: '4', text: 'jill', color: color.brand},\n  ];\n\n  return (\n    <Screen title=\"Landing\">\n      <Carousel slides={slides} />\n      <Button center onPress={navPortfolioLogin} title=\"Login\" />\n    </Screen>\n  );\n});\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback, useState} from 'react';\nimport {LayoutChangeEvent, Platform} from 'react-native';\nimport {KeyboardHandler, Screen, Text} from '../../../../components';\nimport {useColor} from '../../../../hooks';\nimport {getSmallestDimension} from '../../../../models';\nimport {useRootSelector} from '../../../../utils';\nimport {Board} from '../../components';\nimport {config} from '../../configs';\n\n// TODO: figure out centering of list\n\nexport const Project = memo(function Project() {\n  const {goBack} = useNavigation();\n  const color = useColor();\n  const screenWidth = useRootSelector(getSmallestDimension);\n  const boardId = useRootSelector((s) => s.completeBoard.active);\n  const listWidth = screenWidth * 0.7;\n  const [container, setContainer] = useState(0);\n  const android = Platform.OS === 'android';\n  const keyboardHeight = useRootSelector(\n    (state) => state.device.keyboardHeight,\n  );\n\n  const listMaxHeight =\n    keyboardHeight === 0\n      ? container - (android ? config.padding * 8 : config.padding * 12)\n      : container -\n        keyboardHeight -\n        (android ? config.padding * 3 : config.padding * 7);\n\n  const onLayout = useCallback(\n    (event: LayoutChangeEvent) => {\n      const {height} = event.nativeEvent.layout;\n      if (container > 0) return;\n\n      setContainer(height);\n    },\n    [container],\n  );\n\n  const navBack = useCallback(() => {\n    goBack();\n  }, [goBack]);\n\n  return (\n    <Screen onLeftPress={navBack} title=\"Focus\">\n      {!boardId ? (\n        <Text title=\"missing board\" />\n      ) : (\n        <KeyboardHandler\n          backgroundColor={color.surface}\n          onLayout={onLayout}\n          render={container > 0}>\n          <Board\n            boardId={boardId}\n            listMaxHeight={listMaxHeight}\n            listWidth={listWidth}\n          />\n        </KeyboardHandler>\n      )}\n    </Screen>\n  );\n});\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback, useState} from 'react';\nimport {LayoutChangeEvent, View} from 'react-native';\nimport {KeyboardHandler, Screen} from '../../../../components';\nimport {useColor} from '../../../../hooks';\nimport {useRootSelector} from '../../../../utils';\nimport {List} from '../../components';\nimport {config} from '../../configs';\nimport {getCategoryListIds} from '../../models';\n\n// TODO: add journal\n// TODO: add historical data\n// TODO: add purpose\n// TODO: add goals\n\n// TODO: render as <Board />\n\nexport const Projects = memo(function Projects() {\n  const color = useColor();\n  const {navigate} = useNavigation();\n  const listIds = useRootSelector(getCategoryListIds);\n  const [dimensions, setDimensions] = useState(0);\n\n  const onLayout = useCallback(\n    (event: LayoutChangeEvent) => {\n      const {height} = event.nativeEvent.layout;\n      if (dimensions > 0) return;\n\n      setDimensions(height);\n    },\n    [dimensions],\n  );\n\n  const maxHeight = dimensions / 2 - config.padding * 10;\n\n  const navToAccount = useCallback(() => navigate('account'), [navigate]);\n\n  return (\n    <Screen onRightPress={navToAccount} rightIcon=\"account\" title=\"Projects\">\n      <KeyboardHandler\n        backgroundColor={color.surface}\n        onLayout={onLayout}\n        render={dimensions > 0}>\n        <View style={{padding: config.padding}}>\n          {listIds.map((listId) => (\n            <List\n              key={listId}\n              listId={listId}\n              listMaxHeight={maxHeight}\n              placeholder=\"List title...\"\n              title=\"Add list\"\n            />\n          ))}\n        </View>\n      </KeyboardHandler>\n    </Screen>\n  );\n});\n","import {scaleLinear, scaleTime} from 'd3-scale';\nimport * as shape from 'd3-shape';\nimport * as React from 'react';\nimport {StyleSheet, View} from 'react-native';\nimport Svg, {Defs, LinearGradient, Path, Stop} from 'react-native-svg';\n\ninterface DataPoint {\n  date: number;\n  value: number;\n}\n\ninterface GraphProps {\n  data: DataPoint[];\n  width: number;\n  height: number;\n}\n\nconst strokeWidth = 4;\nconst padding = strokeWidth / 2;\nconst getDomain = (domain: number[]) => [\n  Math.min(...domain),\n  Math.max(...domain),\n];\n\nexport const Graph = ({\n  data,\n  width,\n  height,\n}: GraphProps): React.ReactElement => {\n  const scaleX = scaleTime()\n    .domain(getDomain(data.map((d) => d.date)))\n    .range([0, width]);\n  const scaleY = scaleLinear()\n    .domain(getDomain(data.map((d) => d.value)))\n    .range([height - padding, padding]);\n  const d = shape\n    .line<DataPoint>()\n    .x((p) => scaleX(p.date))\n    .y((p) => scaleY(p.value))\n    .curve(shape.curveBasis)(data) as string;\n  return (\n    <View style={{width, height}}>\n      <Svg style={StyleSheet.absoluteFill}>\n        <Defs>\n          <LinearGradient id=\"gradient\" x1=\"50%\" x2=\"50%\" y1=\"0%\" y2=\"100%\">\n            <Stop offset=\"0%\" stopColor=\"#cee3f9\" />\n            <Stop offset=\"80%\" stopColor=\"#ddedfa\" />\n            <Stop offset=\"100%\" stopColor=\"#feffff\" />\n          </LinearGradient>\n        </Defs>\n        <Path\n          d={`${d}L ${width} ${height} L 0 ${height}`}\n          fill=\"url(#gradient)\"\n        />\n        <Path fill=\"transparent\" stroke=\"#3977e3\" {...{d, strokeWidth}} />\n      </Svg>\n    </View>\n  );\n};\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback} from 'react';\nimport {Dimensions, ScrollView, View} from 'react-native';\nimport {Calendar, Screen, Text} from '../../../../components';\nimport {useColor} from '../../../../hooks';\nimport {Theme} from '../../../../utils';\nimport {Card} from '../../components/Card';\nimport {config} from '../../configs';\nimport {Graph} from './Graph';\n\n// TODO: add journal\n// TODO: add historical data\n// TODO: add purpose\n// TODO: add goals\n\ntype TitleProps = {name: string};\n\nconst Title = ({name}: TitleProps) => {\n  return (\n    <Text\n      emphasis=\"high\"\n      style={{paddingBottom: config.padding}}\n      title={name}\n      type=\"h4\"\n    />\n  );\n};\n\nconst data = [\n  {date: new Date(2018, 9, 1).getTime(), value: 0},\n  {date: new Date(2018, 9, 16).getTime(), value: 0},\n  {date: new Date(2018, 9, 17).getTime(), value: 200},\n  {date: new Date(2018, 10, 1).getTime(), value: 200},\n  {date: new Date(2018, 10, 2).getTime(), value: 300},\n  {date: new Date(2018, 10, 5).getTime(), value: 300},\n];\n\nexport const Reflect = memo(function Reflect() {\n  const color = useColor();\n  const {navigate} = useNavigation();\n  const navToAccount = useCallback(() => navigate('account'), [navigate]);\n\n  return (\n    <Screen onRightPress={navToAccount} rightIcon=\"account\" title=\"Reflect\">\n      <ScrollView\n        contentContainerStyle={{\n          padding: Theme.padding.p04,\n          backgroundColor: color.surface,\n        }}\n        style={{backgroundColor: color.surface}}>\n        <Card>\n          <View>\n            <Title name=\"Purpose\" />\n            <Text title=\"Make a significant positive difference in global productivity\" />\n          </View>\n        </Card>\n        <Card>\n          <View>\n            <Title name=\"Goals\" />\n            <Text title=\"Top 3\" />\n            <Text title=\"Deep Focus\" />\n            <Text title=\"Smile\" />\n            <Text title=\"1 More Rep\" />\n          </View>\n        </Card>\n        <Card>\n          <View>\n            <Title name=\"Review (Progress)\" />\n            <View\n              style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>\n              <Graph\n                data={data}\n                height={200}\n                width={Dimensions.get('window').width - config.padding * 4}\n              />\n            </View>\n          </View>\n        </Card>\n        <Card>\n          <View>\n            <Title name=\"Reflect (Journal)\" />\n            <Calendar />\n          </View>\n        </Card>\n      </ScrollView>\n    </Screen>\n  );\n});\n","import {\n  BottomTabBarOptions,\n  createBottomTabNavigator,\n} from '@react-navigation/bottom-tabs';\nimport {Route} from '@react-navigation/native';\nimport {\n  createStackNavigator,\n  StackNavigationOptions,\n} from '@react-navigation/stack';\nimport React, {memo, useCallback} from 'react';\nimport {Icon, Modal, Notification} from '../../components';\nimport {useColor} from '../../hooks';\nimport {rootMode, rootScreenOptions} from '../../providers/Navigation/configs';\nimport {useRootSelector} from '../../utils';\nimport {\n  Account,\n  Capture,\n  ItemDetail,\n  Landing,\n  Project,\n  Projects,\n  Reflect,\n} from './screens';\n\nconst noHeader: StackNavigationOptions = {headerShown: false};\nconst RootTab = createBottomTabNavigator();\nconst RootStack = createStackNavigator();\nconst ProjectsStack = createStackNavigator();\n\ntype Tabs = 'capture' | 'focus' | 'reflect';\ntype TabIcons = {\n  [key in Tabs]: {focused: string; unfocused: string};\n};\n\nconst tabIcons: TabIcons = {\n  capture: {\n    focused: 'pencil-plus-outline',\n    unfocused: 'pencil-plus-outline',\n  },\n  focus: {\n    focused: 'checkbox-multiple-marked-outline',\n    unfocused: 'checkbox-multiple-marked-outline',\n  },\n  reflect: {focused: 'finance', unfocused: 'finance'},\n};\n\ntype ScreenOptionsProps = {\n  route: Route<string, Record<string, unknown> | undefined>;\n};\n\ntype TabBarIconProps = {\n  focused: boolean;\n  size: number;\n};\n\nconst Focus = () => {\n  return (\n    <ProjectsStack.Navigator screenOptions={noHeader}>\n      <ProjectsStack.Screen component={Projects} name=\"boards\" />\n      <ProjectsStack.Screen component={Project} name=\"board\" />\n    </ProjectsStack.Navigator>\n  );\n};\n\nconst Tabs = () => {\n  const color = useColor();\n  const tabBarOptions: BottomTabBarOptions = {\n    keyboardHidesTabBar: true,\n    activeTintColor: color.text,\n    inactiveTintColor: color.secondary,\n    showLabel: false,\n  };\n  const screenOptions = useCallback(\n    ({route}: ScreenOptionsProps) => ({\n      tabBarIcon: function tabBarIcon({focused, size}: TabBarIconProps) {\n        const focus = focused ? 'focused' : 'unfocused';\n        const iconColor = focused ? color.text : color.secondary;\n        const name = (tabIcons as any)[route.name][focus];\n        return <Icon color={iconColor} name={name} size={size} />;\n      },\n    }),\n    [color],\n  );\n\n  return (\n    <RootTab.Navigator\n      screenOptions={screenOptions as any}\n      tabBarOptions={tabBarOptions}>\n      <RootTab.Screen component={Capture} name=\"capture\" />\n      <RootTab.Screen component={Focus} name=\"focus\" />\n      <RootTab.Screen component={Reflect} name=\"reflect\" />\n    </RootTab.Navigator>\n  );\n};\n\nexport default memo(function Complete() {\n  const user = useRootSelector((s) => s.completeUser);\n  const Main = user ? Tabs : Landing;\n  return (\n    <RootStack.Navigator mode={rootMode} screenOptions={rootScreenOptions}>\n      <RootStack.Screen component={Main} name=\"main\" />\n      <RootStack.Screen component={Account} name=\"account\" />\n      <RootStack.Screen component={Notification} name=\"notification\" />\n      <RootStack.Screen component={Modal} name=\"alert\" />\n      <RootStack.Screen component={ItemDetail} name=\"item-detail\" />\n    </RootStack.Navigator>\n  );\n});\n\n/*\n\n# Data\n\n- user\n-> collections [projects, lists]\n-> boards [home, work, town] | [meeting notes, book summaries, checklists]\n-> lists [backlog, todo, in progress, done] | [draft, final]\n-> item [find comb, clear emails, daily standup]\n\n# Screens\n\n## Capture\n\n### Inbox (list -> item -> details)\n- \"add grey list\" -> @app\n- \"find comb\" -> @home\n- \"clear emails\" -> @work\n- \"put $20 in phone\" -> @town\n- \"drink water\" -> @after-waking-up\n- \"intensity + focus = deep work\" -> book summaries\n\n## Organize\n\n### Projects (item -> lists -> item -> details )\n- @home -> (backlog, todo, in progress, done xx, done xx)\n- @town\n- @work\n- @gym\n- @app\n\n### Lists (item -> list -> item -> detail)\n- meeting notes\n - one-on-one\n - daily standup\n- book summaries\n - the one thing\n - getting things done\n - eat that frog\n- gift ideas\n - mom\n - dad\n - girlfriend\n- checklists\n - after waking up\n - after entering bathroom\n\n## Reflect\n\n### Purpose\n\n### Goals\n\n### Review (Progress)\n\n### Reflect (Journal)\n\n## Account\n\n### Profile\n\n### Notifications\n\n### Payment\n*/\n"],"sourceRoot":""}