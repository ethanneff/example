{"version":3,"sources":["apps/Playground/screens/Questionnaire/screens/Questionnaires.tsx","apps/Playground/screens/Questionnaire/index.tsx"],"names":["Questionnaires","questionnaires","useRootSelector","getQuestionnaireArray","selected","state","useState","actionSheet","setActionSheet","dispatch","useRootDispatch","color","useColor","handleLongPress","useCallback","id","removeQuestionnaire","handleItemPress","selectQuestionnaire","handleActionSheetClose","handleCreate","createQuestionnaire","String","Date","now","handleItemMenu","renderItem","item","length","questions","subtitle","onPress","onLongPress","View","style","flexDirection","justifyContent","flex","type","title","name","FlatList","keyExtractor","data","extraData","background","margin","position","bottom","right","fab","onBackgroundPress","Container","choices","key","next","output","width","Dimensions","get","tableView","currentIndex","onViewableItemsChanged","viewableItems","index","onProgress","direction","onFinish","scrollToIndex","animated","onSelection","choice","setRef","ref","items","map","nav","to","props","navigate","onLeftPress","this","scrollEnabled","removeClippedSubviews","showsHorizontalScrollIndicator","showsVerticalScrollIndicator","viewabilityConfig","itemVisiblePercentThreshold","horizontal","pagingEnabled","React","PureComponent","mapDispatchToProps","connect"],"mappings":"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","file":"static/js/39.6963f4c0.chunk.js","sourcesContent":["import React, {useCallback, useState} from 'react';\nimport {FlatList, View} from 'react-native';\nimport {Card, Dialog, Icon, Text} from '../../../../../components';\nimport {\n  createQuestionnaire,\n  getQuestionnaireArray,\n  removeQuestionnaire,\n  selectQuestionnaire,\n} from '../models';\nimport {useColor} from '../../../../../hooks';\nimport {useRootDispatch, useRootSelector} from '../../../../../utils';\n\nexport const Questionnaires = () => {\n  const questionnaires = useRootSelector(getQuestionnaireArray);\n  const selected = useRootSelector((state) => state.questionnaires.selected);\n  const [actionSheet, setActionSheet] = useState(false);\n  const dispatch = useRootDispatch();\n  const color = useColor();\n  const handleLongPress = useCallback(\n    (id: string) => () => dispatch(removeQuestionnaire(id)),\n    [dispatch],\n  );\n  const handleItemPress = useCallback(\n    (id: string) => () => dispatch(selectQuestionnaire(id)),\n    [dispatch],\n  );\n  const handleActionSheetClose = useCallback(() => setActionSheet(false), []);\n  const handleCreate = useCallback(\n    () => dispatch(createQuestionnaire(String(Date.now()))),\n    [dispatch],\n  );\n  const handleItemMenu = useCallback(() => {\n    setActionSheet((state) => !state);\n  }, []);\n  const renderItem = useCallback(\n    ({item}) => {\n      const length = item.questions.length;\n      const subtitle = `${length} question${length === 1 ? '' : 's'}`;\n      return (\n        <Card\n          onPress={handleItemPress(item.id)}\n          onLongPress={handleLongPress(item.id)}\n          selected={selected === item.id}>\n          <View\n            style={{\n              flexDirection: 'row',\n              justifyContent: 'space-between',\n            }}>\n            <View style={{flex: 0.9}}>\n              <Text type=\"h3\" title={item.title} />\n              <Text type=\"caption\" title={subtitle} />\n            </View>\n            <Icon name=\"dots-horizontal\" onPress={handleItemMenu} />\n          </View>\n        </Card>\n      );\n    },\n    [handleItemMenu, handleItemPress, handleLongPress, selected],\n  );\n\n  return (\n    <>\n      <FlatList\n        keyExtractor={(item) => item.id}\n        data={questionnaires}\n        extraData={selected}\n        renderItem={renderItem}\n      />\n      <Icon\n        name=\"plus\"\n        color={color.background}\n        onPress={handleCreate}\n        style={{\n          margin: 10,\n          position: 'absolute',\n          bottom: 0,\n          right: 0,\n        }}\n        fab\n      />\n      {actionSheet && (\n        <Dialog title=\"hello\" onBackgroundPress={handleActionSheetClose} />\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport {Dimensions, FlatList, View} from 'react-native';\nimport {connect} from 'react-redux';\nimport {Button, Screen, Text} from '../../../../components';\nimport {NavigationScreen, navigate} from '../../../../models';\nimport {Questionnaires} from './screens/Questionnaires';\n\ninterface DispatchProps {\n  navigate: typeof navigate;\n}\n\ntype Props = DispatchProps;\n\nclass Container extends React.PureComponent<Props> {\n  private readonly data = [\n    {\n      choices: [\n        {\n          key: '1',\n          selected: false,\n          title: 'individual',\n        },\n        {\n          key: '2',\n          selected: false,\n          title: 'couple',\n        },\n        {\n          key: '3',\n          selected: false,\n          title: 'teen',\n        },\n      ],\n      key: '1',\n      next: '2',\n      title: 'What type of counseling are you looking for',\n      type: 'radio',\n    },\n    {key: '2', title: '2'},\n    {key: '3', title: '3'},\n    {key: '4', title: '4'},\n    {key: '5', title: '5'},\n  ];\n  private output: any = {};\n  private readonly width = Dimensions.get('window').width;\n  private tableView: any;\n  private currentIndex = 0;\n\n  public onViewableItemsChanged = ({viewableItems}: any) => {\n    this.currentIndex = viewableItems[0].index || 0;\n  };\n\n  public onProgress = (direction = 1) => {\n    const index = this.currentIndex + direction;\n    if (index < 0) {\n      return;\n    }\n    if (index >= this.data.length) {\n      this.onFinish();\n      return;\n    }\n    this.tableView.scrollToIndex({\n      animated: true,\n      index,\n    });\n  };\n\n  public onSelection = (item: any, choice: any) => {\n    this.output = {\n      ...this.output,\n      [item.key]: {\n        ...this.output[item.key],\n        [choice.key]: true,\n      },\n    };\n\n    // this.onProgress();\n  };\n\n  public onFinish = () => undefined;\n\n  setRef = (ref: any) => {\n    this.tableView = ref;\n  };\n\n  renderItem = ({item}: {item: any}) => {\n    let items: any = <View style={{flex: 1}} />;\n\n    if (item.choices) {\n      items = (\n        <View style={{flex: 1}}>\n          {item.choices.map((choice: any) => {\n            return (\n              <Button\n                key={choice.title}\n                title={choice.title}\n                onPress={() => {\n                  this.onSelection(item, choice);\n                }}\n              />\n            );\n          })}\n        </View>\n      );\n    }\n\n    return (\n      <View style={{width: this.width}}>\n        <Text title={item.title} />\n        {items}\n        <View\n          style={{\n            flexDirection: 'row',\n            justifyContent: 'space-around',\n          }}>\n          <Button title=\"prev\" onPress={() => this.onProgress(-1)} />\n          <Button title=\"next\" onPress={() => this.onProgress(1)} />\n          <Button title=\"next2\" onPress={() => this.onProgress(2)} />\n        </View>\n      </View>\n    );\n  };\n\n  public render() {\n    return (\n      <Screen onLeftPress={this.nav('playground')} title=\"Questionnaire\">\n        <FlatList\n          scrollEnabled={false}\n          ref={this.setRef}\n          removeClippedSubviews\n          showsHorizontalScrollIndicator={false}\n          showsVerticalScrollIndicator={false}\n          onViewableItemsChanged={this.onViewableItemsChanged}\n          viewabilityConfig={{\n            itemVisiblePercentThreshold: 50,\n          }}\n          horizontal\n          pagingEnabled\n          data={this.data}\n          renderItem={this.renderItem}\n        />\n        <Questionnaires />\n      </Screen>\n    );\n  }\n  private nav = (to: NavigationScreen) => () => this.props.navigate(to);\n}\n\nconst mapDispatchToProps: DispatchProps = {navigate};\n\nexport default connect(null, mapDispatchToProps)(Container);\n"],"sourceRoot":""}