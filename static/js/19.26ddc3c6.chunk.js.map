{"version":3,"sources":["conversions/Firebase/index.web.ts","features/Login/index.tsx","apps/Checklists/index.tsx"],"names":["auth","SignInButton","memo","onPress","icon","title","color","useColor","style","alignItems","justifyContent","flexDirection","borderColor","text","borderWidth","padding","Theme","p02","marginBottom","borderRadius","p10","name","paddingLeft","type","Login","onBackgroundPress","useState","email","password","phone","phoneCode","phoneConfirmation","state","form","setForm","onEmail","useCallback","prev","onForgotPassword","onLanding","onPhone","onEmailChange","onPhoneChange","onPhoneCodeChange","onPasswordChange","onPhoneSubmit","a","signInWithPhoneNumber","onPhoneConfirm","console","log","confirm","onMissingCallback","onLogout","signOut","then","catch","finally","useEffect","ActivityIndicator","size","keyboardType","onChangeText","placeholder","value","emphasis","textContentType","createUserWithEmailAndPassword","error","code","secureTextEntry","Platform","OS","Config","os","ios","signInAnonymously","nav","useNav","styles","StyleSheet","create","bottom","paddingBottom","p04","showLogin","setShowLogin","onToggleLogin","onLeftPress","to","ScrollView","contentContainerStyle","paddingHorizontal","paddingVertical","backgroundColor","surface","background","fab","position","right","margin"],"mappings":"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","file":"static/js/19.26ddc3c6.chunk.js","sourcesContent":["const auth = {};\nexport {auth};\n","import React, {memo, useCallback, useEffect, useState} from 'react';\nimport {ActivityIndicator, Platform} from 'react-native';\nimport {\n  Button,\n  Icon,\n  Modal,\n  Text,\n  TextInput,\n  TouchableOpacity,\n} from '../../components';\nimport {useColor} from '../../hooks';\nimport {Config, Theme} from '../../utils';\nimport {FirebaseAuthTypes, auth} from '../../conversions/Firebase';\n\ninterface Props {\n  onBackgroundPress: () => void;\n}\n\n// TODO: relocate to somewhere\ninterface SignInButtonProps {\n  onPress: () => void;\n  icon: string;\n  title: string;\n}\nconst SignInButton = memo(function SignInButton({\n  onPress,\n  icon,\n  title,\n}: SignInButtonProps) {\n  const color = useColor();\n  return (\n    <TouchableOpacity\n      onPress={onPress}\n      style={{\n        alignItems: 'center',\n        justifyContent: 'center',\n        flexDirection: 'row',\n        borderColor: color.text,\n        borderWidth: 2,\n        padding: Theme.padding.p02,\n        marginBottom: Theme.padding.p02,\n        borderRadius: Theme.padding.p10,\n      }}>\n      <Icon name={icon} />\n      <Text\n        style={{paddingLeft: Theme.padding.p02}}\n        title={title}\n        type=\"button\"\n      />\n    </TouchableOpacity>\n  );\n});\n\ntype FormState =\n  | 'loading'\n  | 'landing'\n  | 'email'\n  | 'forgot password'\n  | 'phone'\n  | 'phone confirm';\n\ntype State = {\n  email: string;\n  password: string;\n  phone: string;\n  phoneCode: string;\n  phoneConfirmation: FirebaseAuthTypes.ConfirmationResult | null;\n  state: FormState;\n};\n\nexport const Login = memo(function Login({onBackgroundPress}: Props) {\n  const [form, setForm] = useState<State>({\n    email: '',\n    password: '',\n    phone: '',\n    phoneCode: '',\n    phoneConfirmation: null,\n    state: 'loading',\n  });\n\n  const onEmail = useCallback(\n    () => setForm((prev) => ({...prev, password: '', state: 'email'})),\n    [],\n  );\n  const onForgotPassword = useCallback(\n    () => setForm((prev) => ({...prev, state: 'forgot password'})),\n    [],\n  );\n  const onLanding = useCallback(\n    () =>\n      setForm((prev) => ({...prev, email: '', password: '', state: 'landing'})),\n    [],\n  );\n  const onPhone = useCallback(\n    () => setForm((prev) => ({...prev, state: 'phone'})),\n    [],\n  );\n\n  const onEmailChange = useCallback(\n    (email: string) => setForm((prev) => ({...prev, email})),\n    [],\n  );\n  const onPhoneChange = useCallback(\n    (phone: string) => setForm((prev) => ({...prev, phone})),\n    [],\n  );\n  const onPhoneCodeChange = useCallback(\n    (phoneCode: string) => setForm((prev) => ({...prev, phoneCode})),\n    [],\n  );\n  const onPasswordChange = useCallback(\n    (password: string) => setForm((prev) => ({...prev, password})),\n    [],\n  );\n\n  const onPhoneSubmit = useCallback(async () => {\n    const phoneConfirmation = await auth().signInWithPhoneNumber(form.phone);\n    setForm((prev) => ({...prev, state: 'phone confirm', phoneConfirmation}));\n  }, [setForm, form.phone]);\n\n  const onPhoneConfirm = async () => {\n    if (!form.phoneConfirmation) {\n      console.log('missing confirmation');\n      return;\n    }\n    try {\n      await form.phoneConfirmation.confirm(form.phoneCode);\n      setForm((prev) => ({...prev, state: 'landing'}));\n    } catch {\n      console.log('invalid code');\n    }\n  };\n\n  const onEmailSubmit = () => {\n    auth()\n      .createUserWithEmailAndPassword(form.email, form.password)\n      .then(() => {\n        console.log('User account created & signed in!');\n      })\n      .catch((error) => {\n        if (error.code === 'auth/email-already-in-use') {\n          console.log('That email address is already in use!');\n        }\n\n        if (error.code === 'auth/invalid-email') {\n          console.log('That email address is invalid!');\n        }\n        console.error(error);\n      });\n  };\n\n  const onMissingCallback = () => undefined;\n\n  const onAnonymous = () => {\n    auth()\n      .signInAnonymously()\n      .then(() => {\n        console.log('User signed in anonymously');\n      })\n      .catch((error) => {\n        if (error.code === 'auth/operation-not-allowed') {\n          console.log('Enable anonymous in your firebase console.');\n        }\n\n        console.error(error);\n      });\n  };\n\n  const onLogout = useCallback(() => {\n    auth()\n      .signOut()\n      .then(() => console.log('User signed out!'))\n      .catch(() => console.log('no user to sign out'))\n      .finally(() => setForm((prev) => ({...prev, state: 'landing'})));\n  }, []);\n\n  useEffect(() => {\n    onLogout();\n  }, [onLogout]);\n\n  return (\n    <Modal onBackgroundPress={onBackgroundPress}>\n      {form.state === 'loading' ? (\n        <ActivityIndicator size=\"large\" />\n      ) : form.state === 'phone confirm' ? (\n        <>\n          <TextInput\n            keyboardType=\"number-pad\"\n            onChangeText={onPhoneCodeChange}\n            placeholder=\"phone confirmation code\"\n            value={form.phoneCode}\n          />\n          <Button\n            color=\"primary\"\n            emphasis=\"high\"\n            onPress={onPhoneConfirm}\n            title=\"verify phone confirmation code\"\n          />\n          <Button onPress={onPhone} title=\"go back\" />\n        </>\n      ) : form.state === 'phone' ? (\n        <>\n          <TextInput\n            keyboardType=\"number-pad\"\n            onChangeText={onPhoneChange}\n            placeholder=\"phone\"\n            value={form.phone}\n          />\n          <Button\n            color=\"primary\"\n            emphasis=\"high\"\n            onPress={onPhoneSubmit}\n            title=\"send confirmation code\"\n          />\n          <Button onPress={onLanding} title=\"go back\" />\n        </>\n      ) : form.state === 'forgot password' ? (\n        <>\n          <TextInput\n            keyboardType=\"email-address\"\n            onChangeText={onEmailChange}\n            placeholder=\"email\"\n            textContentType=\"username\"\n            value={form.email}\n          />\n          <Button\n            color=\"primary\"\n            emphasis=\"high\"\n            onPress={onEmailSubmit}\n            title=\"send password reset\"\n          />\n          <Button onPress={onEmail} title=\"go back\" />\n        </>\n      ) : form.state === 'email' ? (\n        <>\n          <TextInput\n            keyboardType=\"email-address\"\n            onChangeText={onEmailChange}\n            placeholder=\"email\"\n            textContentType=\"username\"\n            value={form.email}\n          />\n          <TextInput\n            onChangeText={onPasswordChange}\n            placeholder=\"password\"\n            secureTextEntry\n            textContentType=\"password\"\n            value={form.password}\n          />\n          <Button color=\"primary\" emphasis=\"high\" title=\"submit\" />\n          <Button onPress={onForgotPassword} title=\"forgot password\" />\n          <Button onPress={onLanding} title=\"go back\" />\n        </>\n      ) : (\n        <>\n          {Platform.OS === Config.os.ios && (\n            <SignInButton\n              icon=\"apple\"\n              onPress={onMissingCallback}\n              title=\"Continue with Apple\"\n            />\n          )}\n          <SignInButton\n            icon=\"google\"\n            onPress={onMissingCallback}\n            title=\"Continue with Google\"\n          />\n          <SignInButton\n            icon=\"facebook\"\n            onPress={onMissingCallback}\n            title=\"Continue with Facebook\"\n          />\n          <SignInButton\n            icon=\"email\"\n            onPress={onEmail}\n            title=\"Continue with Email\"\n          />\n          <SignInButton\n            icon=\"phone\"\n            onPress={onPhone}\n            title=\"Continue with Phone\"\n          />\n          <SignInButton\n            icon=\"close\"\n            onPress={onAnonymous}\n            title=\"Continue trial\"\n          />\n        </>\n      )}\n    </Modal>\n  );\n});\n","import React, {memo, useCallback, useState} from 'react';\nimport {ScrollView, StyleSheet} from 'react-native';\nimport {Button, Card, Icon, Screen, Text} from '../../components';\nimport {useColor, useNav} from '../../hooks';\nimport {Theme} from '../../utils';\nimport {Login} from '../../features/Login';\n\nexport default memo(function Checklists() {\n  const color = useColor();\n  const nav = useNav();\n  const styles = StyleSheet.create({\n    bottom: {\n      paddingBottom: Theme.padding.p04,\n    },\n  });\n  const [showLogin, setShowLogin] = useState(false);\n  const onToggleLogin = useCallback(() => setShowLogin((prev) => !prev), []);\n\n  return (\n    <>\n      <Screen onLeftPress={nav.to('portfolioLanding')} title=\"Checklists\">\n        <ScrollView\n          contentContainerStyle={{\n            paddingHorizontal: Theme.padding.p04,\n            paddingVertical: Theme.padding.p02,\n          }}\n          style={{backgroundColor: color.surface}}>\n          <Card>\n            <Text\n              emphasis=\"medium\"\n              style={styles.bottom}\n              title=\"Weekly Goals\"\n              type=\"h4\"\n            />\n            <Text title=\"1. complete learn plan profit\" type=\"caption\" />\n            <Text title=\"2. ship checklist\" type=\"caption\" />\n            <Text title=\"3. complete 30 leetcode\" type=\"caption\" />\n          </Card>\n          <Card>\n            <Text\n              emphasis=\"medium\"\n              style={styles.bottom}\n              title=\"Daily Habits and Routines\"\n              type=\"h4\"\n            />\n            <Text title=\"After I wake up\" type=\"caption\" />\n            <Text title=\"After I shower\" type=\"caption\" />\n            <Text title=\"Before I one on one\" type=\"caption\" />\n            <Text title=\"Before I get on the train\" type=\"caption\" />\n          </Card>\n        </ScrollView>\n        <Icon\n          color={color.background}\n          fab\n          name=\"plus\"\n          style={{\n            position: 'absolute',\n            bottom: 0,\n            right: 0,\n            margin: Theme.padding.p04,\n          }}\n        />\n        <Button onPress={onToggleLogin} title=\"showLogin\" />\n      </Screen>\n      {showLogin && <Login onBackgroundPress={onToggleLogin} />}\n    </>\n  );\n});\n"],"sourceRoot":""}