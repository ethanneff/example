{"version":3,"sources":["apps/Playground/Drift/Canvas.tsx","apps/Playground/Drift/Context.tsx","apps/Playground/Drift/Character.tsx","apps/Playground/Drift/utils.ts","apps/Playground/Drift/Tracks.tsx","apps/Playground/Drift/Game.tsx","apps/Playground/Drift/Dpad.tsx","apps/Playground/Drift/index.tsx"],"names":["Canvas","memo","children","onLayout","color","useColor","View","style","flex","backgroundColor","surface","driftInitialState","tracks","driftReducer","state","action","type","payload","length","pop","DriftContext","createContext","dispatch","Character","canvas","initialPositionRef","useRef","x","width","y","height","position","Animated","ValueXY","current","useDriver","useNativeDriver","useContext","animate","useCallback","dx","dy","toValue","change","size","getPosition","spring","start","useEffect","setUpdateIntervalForType","SensorTypes","accelerometer","acc","subscribe","unsubscribe","getLayout","borderRadius","elevation","shadowColor","text","shadowOffset","shadowOpacity","shadowRadius","zIndex","primary","Track","track","styles","StyleSheet","create","opacity","top","left","Tracks","map","index","key","Game","useState","setCanvas","onCanvasLayout","event","nativeEvent","layout","Dpad","useShadow","useDropShadow","box","onPress","bottom","right","transform","rotate","flexDirection","info","borderTopLeftRadius","success","borderTopRightRadius","borderBottomLeftRadius","warning","borderBottomRightRadius","nav","useNav","useReducer","isEmulator","DeviceInfo","isEmulatorSync","navBack","border","onLeftPress","title","Provider","value","center"],"mappings":"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","file":"static/js/37.c3d10e23.chunk.js","sourcesContent":["import React, {ReactNode, memo} from 'react';\nimport {LayoutChangeEvent, View} from 'react-native';\nimport {useColor} from '../../../hooks';\n\ninterface Props {\n  onLayout: (event: LayoutChangeEvent) => void;\n  children: ReactNode;\n}\n\nexport const Canvas = memo(function Canvas({children, onLayout}: Props) {\n  const color = useColor();\n  return (\n    <View onLayout={onLayout} style={{flex: 1, backgroundColor: color.surface}}>\n      {children}\n    </View>\n  );\n});\n","import {createContext} from 'react';\nimport {TrackPosition, TrackPositionWithColor} from './Tracks';\nimport {ColorChoice} from './Dpad';\n\nexport type DriftState = {\n  tracks: TrackPositionWithColor[];\n  color: ColorChoice;\n};\n\nexport const driftInitialState: DriftState = {\n  tracks: [],\n  color: 'lightgrey',\n};\n\ntype Action =\n  | {type: 'addColor'; payload: ColorChoice}\n  | {type: 'addTrack'; payload: TrackPosition};\n\nexport const driftReducer = (state: DriftState, action: Action): DriftState => {\n  switch (action.type) {\n    case 'addColor':\n      return {...state, color: action.payload};\n    case 'addTrack': {\n      const tracks = [...state.tracks];\n      while (tracks.length > 10) {\n        tracks.pop();\n      }\n      return {\n        ...state,\n        tracks: [{...action.payload, color: state.color}, ...tracks],\n      };\n    }\n    default:\n      return state;\n  }\n};\n\ntype Context = {\n  state: DriftState;\n  dispatch: (action: Action) => void;\n};\n\nexport const DriftContext = createContext<Context>({\n  state: driftInitialState,\n  dispatch: () => undefined,\n});\n","import React, {memo, useCallback, useContext, useEffect, useRef} from 'react';\nimport {Animated} from 'react-native';\nimport {\n  SensorTypes,\n  accelerometer,\n  setUpdateIntervalForType,\n} from 'react-native-sensors';\nimport {useColor, useNativeDriver} from '../../../hooks';\nimport {getPosition} from './utils';\nimport {DriftContext} from './Context';\nimport {CanvasDimensions} from './Game';\n\ntype CharacterProps = {\n  canvas: CanvasDimensions;\n};\n\nexport const Character = memo(function Character({canvas}: CharacterProps) {\n  const elevation = 5;\n  const size = 30;\n  const speed = 6;\n  const rate = 16;\n  const shadowOpacity = elevation * 0.036 + 0.12;\n  const shadowRadius = elevation * 0.36 + 1.2;\n  const initialPositionRef = useRef({\n    x: canvas.width / 2 - size,\n    y: canvas.height / 2 - size,\n  });\n  const position = new Animated.ValueXY(initialPositionRef.current);\n  const useDriver = useNativeDriver();\n  const {dispatch} = useContext(DriftContext);\n  const color = useColor();\n\n  const animate = useCallback(\n    (dx: number, dy: number) => {\n      const toValue = getPosition({\n        canvas,\n        change: {dx: dx * speed, dy: dy * speed},\n        current: initialPositionRef.current,\n        size,\n      });\n      initialPositionRef.current = toValue;\n      dispatch({type: 'addTrack', payload: {...toValue, size}});\n      Animated.spring(position, {\n        toValue,\n        useNativeDriver: useDriver,\n      }).start();\n    },\n    [canvas, dispatch, position, useDriver],\n  );\n\n  useEffect(() => {\n    setUpdateIntervalForType(SensorTypes.accelerometer, rate);\n    const acc = accelerometer.subscribe(({x, y}) => animate(x, y));\n    return () => {\n      acc.unsubscribe();\n    };\n  }, [rate, animate]);\n\n  return (\n    <Animated.View\n      style={[\n        position.getLayout(),\n        {\n          width: size,\n          height: size,\n          borderRadius: size,\n          elevation,\n          shadowColor: color.text,\n          shadowOffset: {\n            height: 2,\n            width: 0,\n          },\n          shadowOpacity,\n          shadowRadius,\n          zIndex: elevation,\n          backgroundColor: color.primary,\n        },\n      ]}\n    />\n  );\n});\n","type Position = {\n  change: {dx: number; dy: number};\n  canvas: {x: number; y: number; width: number; height: number};\n  current: {x: number; y: number};\n  size: number;\n};\n\ntype Vector = {\n  x: number;\n  y: number;\n};\n\nexport const getPosition = (position: Position): Vector => {\n  const dx = position.current.x - position.change.dx;\n  const dy = position.current.y + position.change.dy;\n  const y =\n    dy < 0\n      ? 0\n      : dy + position.size > position.canvas.height\n      ? position.canvas.height - position.size\n      : dy;\n  const x =\n    dx < 0\n      ? 0\n      : dx + position.size > position.canvas.width\n      ? position.canvas.width - position.size\n      : dx;\n  return {x, y};\n};\n","import React, {memo, useContext} from 'react';\nimport {StyleSheet, View} from 'react-native';\nimport {ColorChoice} from './Dpad';\nimport {DriftContext} from './Context';\n\nexport type TrackPosition = {x: number; y: number; size: number};\nexport type TrackPositionWithColor = TrackPosition & {color: ColorChoice};\n\ninterface TrackProps {\n  track: TrackPositionWithColor;\n}\n\nconst Track = memo(function TrackMemo({track}: TrackProps) {\n  const size = track.size / 4;\n  const styles = StyleSheet.create({\n    tracks: {\n      backgroundColor: track.color,\n      borderRadius: track.size,\n      height: size,\n      opacity: 0.4,\n      position: 'absolute',\n      width: size,\n    },\n  });\n  return (\n    <>\n      <View\n        style={{\n          ...styles.tracks,\n          top: track.y - track.size / 2 - size / 2,\n          left: track.x + track.size / 2 - track.size / 2,\n        }}\n      />\n      <View\n        style={{\n          ...styles.tracks,\n          top: track.y - track.size / 2 - size / 2,\n          left: track.x + track.size / 2 + track.size / 2 - size,\n        }}\n      />\n    </>\n  );\n});\n\nexport const Tracks = memo(function TracksMemo() {\n  const {state} = useContext(DriftContext);\n  return (\n    <>\n      {state.tracks.map((track: TrackPositionWithColor, index: number) => (\n        <Track key={`${track.x}${track.y}${index}`} track={track} />\n      ))}\n    </>\n  );\n});\n","import React, {memo, useCallback, useState} from 'react';\nimport {LayoutChangeEvent} from 'react-native';\nimport {Canvas} from './Canvas';\nimport {Character} from './Character';\nimport {Tracks} from './Tracks';\n\nexport type CanvasDimensions = {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n};\n\nexport const Game = memo(function Game() {\n  const [canvas, setCanvas] = useState<CanvasDimensions | null>(null);\n\n  const onCanvasLayout = useCallback((event: LayoutChangeEvent) => {\n    const {x, y, height, width} = event.nativeEvent.layout;\n    setCanvas({x, y, height, width});\n  }, []);\n\n  return (\n    <Canvas onLayout={onCanvasLayout}>\n      {canvas && (\n        <>\n          <Character canvas={canvas} />\n          <Tracks />\n        </>\n      )}\n    </Canvas>\n  );\n});\n","import React, {memo, useCallback, useContext} from 'react';\nimport {View} from 'react-native';\nimport {useColor, useDropShadow} from '../../../hooks';\nimport {TouchableOpacity} from '../../../components';\nimport {DriftContext} from './Context';\n\nexport type ColorChoice =\n  | 'slateblue'\n  | 'orange'\n  | 'mediumseagreen'\n  | 'violet'\n  | 'lightgrey';\n\nexport const Dpad = memo(function Dpad() {\n  const useShadow = useDropShadow();\n  const {dispatch} = useContext(DriftContext);\n  const color = useColor();\n  const size = 50;\n  const box = {\n    width: size,\n    height: size,\n  };\n\n  const onPress = useCallback(\n    (payload: ColorChoice) => () => dispatch({type: 'addColor', payload}),\n    [dispatch],\n  );\n\n  return (\n    <View\n      style={{\n        position: 'absolute',\n        bottom: size,\n        right: size,\n        transform: [{rotate: '45deg'}],\n      }}>\n      <View style={{flexDirection: 'row'}}>\n        <TouchableOpacity\n          onPress={onPress('violet')}\n          style={{\n            ...box,\n            backgroundColor: color.info,\n            borderTopLeftRadius: size,\n            ...useShadow(10),\n          }}\n        />\n        <TouchableOpacity\n          onPress={onPress('mediumseagreen')}\n          style={{\n            ...box,\n            backgroundColor: color.success,\n            borderTopRightRadius: size,\n            ...useShadow(10),\n          }}\n        />\n      </View>\n      <View style={{flexDirection: 'row'}}>\n        <TouchableOpacity\n          onPress={onPress('slateblue')}\n          style={{\n            ...box,\n            backgroundColor: color.primary,\n            borderBottomLeftRadius: size,\n            ...useShadow(10),\n          }}\n        />\n        <TouchableOpacity\n          onPress={onPress('orange')}\n          style={{\n            ...box,\n            backgroundColor: color.warning,\n            borderBottomRightRadius: size,\n            ...useShadow(10),\n          }}\n        />\n      </View>\n    </View>\n  );\n});\n","import DeviceInfo from 'react-native-device-info';\nimport React, {memo, useCallback, useReducer} from 'react';\nimport {View} from 'react-native';\nimport {Screen, Text} from '../../../components';\nimport {useNav} from '../../../hooks';\nimport {Game} from './Game';\nimport {DriftContext, driftInitialState, driftReducer} from './Context';\nimport {Dpad} from './Dpad';\n\nexport default memo(function PlaygroundDrift() {\n  const nav = useNav();\n  const [state, dispatch] = useReducer(driftReducer, driftInitialState);\n  const isEmulator = DeviceInfo.isEmulatorSync();\n  const navBack = useCallback(nav('playground'), [nav]);\n\n  // TODO: figure out why Screen re-renders (because of useReducer.state)\n  return (\n    <Screen border onLeftPress={navBack} title=\"Drift\">\n      <DriftContext.Provider value={{state, dispatch}}>\n        {isEmulator ? (\n          <Text center title=\"simulators not supported\" />\n        ) : (\n          <View style={{flex: 1}}>\n            <Game />\n            <Dpad />\n          </View>\n        )}\n      </DriftContext.Provider>\n    </Screen>\n  );\n});\n"],"sourceRoot":""}