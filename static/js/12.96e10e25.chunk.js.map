{"version":3,"sources":["apps/Complete/components/Card.tsx","apps/Complete/components/AddItem.tsx","apps/Complete/components/Item.tsx","apps/Complete/components/ListHeader.tsx","apps/Complete/components/List.tsx","apps/Complete/configs.tsx","apps/Complete/screens/Capture/index.tsx","apps/Complete/screens/Project/index.tsx","apps/Complete/screens/Projects/index.tsx","apps/Complete/screens/Reflect/Graph.tsx","apps/Complete/screens/Reflect/index.tsx","apps/Complete/index.tsx"],"names":["Card","memo","children","backgroundColor","padding","borderRadius","View","style","marginBottom","AddItem","itemWidth","inputPlaceholder","buttonTitle","inputType","onAdd","color","useColor","useState","showInput","setShowInput","itemTitle","setItemTitle","onItemTitleChange","useCallback","v","onAddItemPress","p","onItemTitleClose","onItemTitleSubmit","formatted","trim","length","width","flexDirection","alignItems","emphasis","flex","focusOnLoad","onChangeText","onSubmitEditing","placeholder","returnKeyType","type","value","name","onPress","padded","primary","center","title","Item","item","id","ListHeader","input","setInput","justifyContent","paddingBottom","List","list","listWidth","listColor","cardColor","maxHeight","orientation","addButtonTitle","addButtonPlaceholder","items","cards","setCards","cardsRef","useRef","cardsLength","horizontal","onKeyExtractor","onCardSizeChange","current","scrollToEnd","onAddCard","date","String","Date","now","onRenderItem","marginRight","FlatList","data","keyExtractor","keyboardShouldPersistTaps","onContentSizeChange","ref","renderItem","showsVerticalScrollIndicator","config","Theme","p02","p04","Capture","navigate","useNavigation","navBack","onOrganize","onLeftPress","surface","background","Project","lists","setLists","goBack","useRootSelector","getSmallestDimension","listSize","listsRef","listsCount","getItemId","addList","renderList","renderAddList","getItemLayout","_","index","offset","onListSizeChange","scrollToIndex","viewPosition","ScrollView","ListFooterComponent","contentContainerStyle","decelerationRate","showsHorizontalScrollIndicator","snapToAlignment","snapToInterval","Projects","navNext","groups","setGroups","renderGroup","onAddGroup","toString","renderFooter","onRightPress","getDomain","domain","Math","min","max","Graph","height","scaleX","scaleTime","map","d","range","scaleY","scaleLinear","strokeWidth","shape","x","y","curve","StyleSheet","absoluteFill","x1","x2","y1","y2","stopColor","fill","stroke","Title","getTime","Reflect","Dimensions","get","noHeader","headerShown","RootTab","createBottomTabNavigator","ProjectsStack","createStackNavigator","tabIcons","focused","unfocused","Focus","Account","Navigator","screenOptions","Screen","component","tabBarOptions","keyboardHidesTabBar","activeTintColor","inactiveTintColor","text","showLabel","route","tabBarIcon","size","focus","iconColor"],"mappings":"wLAUaA,EAAOC,gBAAK,YAKV,IAJbC,EAIY,EAJZA,SACAC,EAGY,EAHZA,gBACAC,EAEY,EAFZA,QACAC,EACY,EADZA,aAEA,OACE,cAACC,EAAA,EAAD,CACEC,MAAO,CACLF,eACAF,kBACAC,UACAI,aAAcJ,GALlB,SAOGF,O,iBCPMO,EAAUR,gBAAK,YASV,IARhBS,EAQe,EARfA,UACAL,EAOe,EAPfA,aACAM,EAMe,EANfA,iBACAC,EAKe,EALfA,YACAR,EAIe,EAJfA,QACAS,EAGe,EAHfA,UACAV,EAEe,EAFfA,gBACAW,EACe,EADfA,MAEMC,EAAQC,cADC,EAEmBC,oBAAS,GAF5B,mBAERC,EAFQ,KAEGC,EAFH,OAGmBF,mBAAS,IAH5B,mBAGRG,EAHQ,KAGGC,EAHH,KAITC,EAAoBC,uBAAY,SAACC,GAAD,OAAeH,EAAaG,KAAI,IAChEC,EAAiBF,uBAAY,kBAAMJ,GAAa,SAACO,GAAD,OAAQA,OAAI,IAC5DC,EAAmBJ,uBAAY,WACnCJ,GAAa,GACbE,EAAa,MACZ,IACGO,EAAoBL,uBAAY,WACpC,IAAMM,EAAYT,EAAUU,OACH,IAArBD,EAAUE,SAGdJ,IACAb,EAAMe,MACL,CAACT,EAAWN,EAAOa,IACtB,OACE,cAACrB,EAAA,EAAD,CACEC,MAAO,CACLyB,MAAOtB,EACPL,eACAD,QAASA,EAAU,EACnBD,mBALJ,SAOGe,EACC,eAACZ,EAAA,EAAD,CAAMC,MAAO,CAAC0B,cAAe,MAAOC,WAAY,UAAhD,UACE,cAAC,IAAD,CACEC,SAAS,OACTC,MAAI,EACJC,aAAW,EACXC,aAAchB,EACdiB,gBAAiBX,EACjBY,YAAa7B,EACb8B,cAAc,OACdC,KAAM7B,EACN8B,MAAOvB,IAET,cAAC,IAAD,CAAMwB,KAAK,QAAQC,QAASlB,EAAkBmB,QAAM,IACpD,cAAC,IAAD,CACE/B,MAAOA,EAAMgC,QACbH,KAAK,OACLC,QAASjB,EACTkB,QAAM,OAIV,cAAC,IAAD,CACEE,QAAM,EACNjC,MAAM,UACN8B,QAASpB,EACTwB,MAAOrC,SCnEJsC,EAAOjD,gBAAK,YAKV,IAJbkD,EAIY,EAJZA,KACA/C,EAGY,EAHZA,QACAC,EAEY,EAFZA,aACAF,EACY,EADZA,gBAEA,OACE,cAAC,IAAD,CAEEI,MAAO,CACLF,eACAD,QAASA,EACTD,kBACAK,aAAcJ,EAAU,GAN5B,SAQE,cAAC,IAAD,CAAM6C,MAAOE,EAAKP,QAPbO,EAAKC,OCVHC,EAAapD,gBAAK,YAGV,IAFnB2C,EAEkB,EAFlBA,KACAxC,EACkB,EADlBA,QACkB,EACQa,mBAAS2B,GADjB,mBACXU,EADW,KACJC,EADI,KAGZjB,EAAef,uBAAY,SAACoB,GAChCY,EAASZ,KACR,IAEH,OACE,eAACrC,EAAA,EAAD,CACEC,MAAO,CACL0B,cAAe,MACfC,WAAY,SACZsB,eAAgB,gBAChBC,cAAerD,GALnB,UAOE,cAAC,IAAD,CACE+B,SAAS,OACTC,MAAI,EACJE,aAAcA,EACdE,YAAY,eACZE,KAAK,KACLC,MAAOW,IAET,cAAC,IAAD,CAAMV,KAAK,gBAAgBE,QAAM,UCf1BY,EAAOzD,gBAAK,YAWV,IAVb0D,EAUY,EAVZA,KACAtD,EASY,EATZA,aACAuD,EAQY,EARZA,UACAC,EAOY,EAPZA,UACAC,EAMY,EANZA,UACA1D,EAKY,EALZA,QACA2D,EAIY,EAJZA,UAIY,IAHZC,mBAGY,MAHE,WAGF,EAFZC,EAEY,EAFZA,eACAC,EACY,EADZA,qBACY,EACcjD,mBAAuB0C,EAAKQ,OAD1C,mBACLC,EADK,KACEC,EADF,KAENC,EAAWC,iBAAwB,MACnCC,EAAcD,iBAAOH,EAAMrC,QAC3B0C,EAA6B,eAAhBT,EAEbU,EAAiBnD,uBAAY,SAAC4B,GAAD,OAAUA,EAAKC,KAAI,IAEhDuB,EAAmBpD,uBAAY,WACM,IAAD,EAApC6C,EAAMrC,OAASyC,EAAYI,UAC7B,UAAAN,EAASM,eAAT,SAAkBC,cAClBL,EAAYI,QAAUR,EAAMrC,UAE7B,CAACqC,EAAMrC,SAEJ+C,EAAYvD,uBAAY,SAACqB,GAC7B,IAAMmC,EAAOC,OAAOC,KAAKC,OACzBb,GAAS,SAAC3C,GAAD,4BAAWA,GAAX,CAAc,CAAC0B,GAAI2B,EAAMnC,eACjC,IAEGuC,EAAe5D,uBACnB,YAAa,IAAX4B,EAAU,EAAVA,KACA,OACE,cAAC,EAAD,CACEhD,gBAAiB2D,EACjBzD,aAAcA,EACd8C,KAAMA,EAEN/C,QAASA,GADJ+C,EAAKC,MAKhB,CAAC/C,EAAcyD,EAAW1D,IAG5B,OACE,cAACE,EAAA,EAAD,UACE,eAACA,EAAA,EAAD,CACEC,MAAO,CACLF,eACA2B,MAAO4B,EACPzD,gBAAiB0D,EACjBzD,QAASA,EAAU,EACnBgF,YAAaX,EAAarE,EAAU,EACpCI,aAAciE,EAAa,EAAIrE,GAPnC,UASE,cAAC,EAAD,CAAYwC,KAAMe,EAAKf,KAAMxC,QAASA,IACtC,cAACiF,EAAA,EAAD,CACEC,KAAMlB,EACNmB,aAAcb,EACdc,0BAA0B,UAC1BC,oBAAqBd,EACrBe,IAAKpB,EACLqB,WAAYR,EACZS,8BAA8B,EAC9BrF,MAAO,CAACwD,eAEV,cAAC,EAAD,CACE5D,gBAAiB0D,EACjBxD,aAAcA,EACdO,YAAaqD,EACbtD,iBAAkBuD,EAClBrD,UAAU,QACVC,MAAOgE,EACP1E,QAASA,Y,OC7FNyF,EAAS,CACpBxF,aAAcyF,IAAM1F,QAAQ2F,IAC5B3F,QAAS0F,IAAM1F,QAAQ4F,KCMZC,EAAUhG,gBAAK,WAC1B,IAAMc,EAAQC,cACPkF,EAAYC,0BAAZD,SACDE,EAAU7E,uBAAY,kBAAM2E,EAAS,WAAU,CAACA,IAHT,EAK9BjF,mBAAqB,CAClCmC,GAAI,IACJR,KAAM,QACNuB,MAAO,CACL,CAACf,GAAI,IAAKR,KAAM,aAChB,CAACQ,GAAI,IAAKR,KAAM,YAChB,CAACQ,GAAI,IAAKR,KAAM,kBANbe,EALsC,oBAevC0C,EAAa9E,uBAAY,cAAiB,IAEhD,OACE,cAAC,IAAD,CAAQ+E,YAAaF,EAASnD,MAAM,UAApC,SACE,eAAC3C,EAAA,EAAD,CACEC,MAAO,CACLJ,gBAAiBY,EAAMwF,QACvBnE,KAAM,EACNhC,QAASyF,EAAOzF,SAJpB,UAME,cAAC,EAAD,CACED,gBAAiBY,EAAMyF,WACvBnG,aAAcwF,EAAOxF,aACrBD,QAASyF,EAAOzF,QAHlB,SAIE,eAACE,EAAA,EAAD,WACE,cAAC,IAAD,CACE0C,QAAM,EACNb,SAAS,OACT5B,MAAO,CAACkD,cAAeoC,EAAOzF,SAC9B6C,MAAM,uBACNP,KAAK,OAEP,cAAC,IAAD,CACEM,QAAM,EACNb,SAAS,SACTc,MAAM,mFAIZ,cAAC,EAAD,CACEiB,qBAAqB,gBACrBD,eAAe,WACf5D,aAAcwF,EAAOxF,aACrByD,UAAW/C,EAAMwF,QAEjB5C,KAAMA,EACNE,UAAW9C,EAAMyF,WACjBzC,UAAW,IACX3D,QAASyF,EAAOzF,SAJXuD,EAAKP,IAMZ,cAAC9C,EAAA,EAAD,CACEC,MAAO,CACLH,QAASyF,EAAOzF,QAAU,EAC1BD,gBAAiBY,EAAMyF,YAH3B,SAKE,cAAC,IAAD,CACExD,QAAM,EACNjC,MAAM,UACN8B,QAASwD,EACTpD,MAAM,uB,wBCrDLwD,EAAUxG,gBAAK,WAAoB,IAAD,EACnBgB,mBAAuB,CAC/C,CACEmC,GAAI,IACJR,KAAM,UACNuB,MAAO,CACL,CACEf,GAAI,KACJR,KAAM,cAER,CACEQ,GAAI,KACJR,KAAM,cAER,CACEQ,GAAI,KACJR,KAAM,iBAIZ,CACEQ,GAAI,IACJR,KAAM,OACNuB,MAAO,IAET,CACEf,GAAI,IACJR,KAAM,cACNuB,MAAO,IAET,CACEf,GAAI,IACJR,KAAM,OACNuB,MAAO,MAjCkC,mBACtCuC,EADsC,KAC/BC,EAD+B,KAoCtCC,EAAUT,0BAAVS,OACD7F,EAAQC,cAER4C,EAAoB,GADZiD,YAAgBC,KAExBC,EAAWnD,EAAYiC,EAAOzF,QAC9B4G,EAAWzC,iBAAwB,MACnC0C,EAAa1C,iBAAOmC,EAAM3E,QAE1BmF,EAAY3F,uBAAY,SAAC4B,GAAD,OAAUA,EAAKC,KAAI,IAE3C+D,EAAU5F,uBAAY,SAACqB,GAC3B,IAAMmC,EAAOC,OAAOC,KAAKC,OACzByB,GAAS,SAACjF,GAAD,4BAAWA,GAAX,CAAc,CAAC0B,GAAI2B,EAAMnC,OAAMuB,MAAO,WAC9C,IAEGiD,EAAa7F,uBACjB,YAAa,IAAX4B,EAAU,EAAVA,KACA,OACE,cAAC,EAAD,CACEe,qBAAqB,gBACrBD,eAAe,WACf5D,aAAcwF,EAAOxF,aACrByD,UAAW/C,EAAMwF,QAEjB5C,KAAMR,EACNU,UAAW9C,EAAMyF,WACjB5C,UAAWA,EACXG,UAAW,IACXC,YAAY,aACZ5D,QAASyF,EAAOzF,SANX+C,EAAKC,MAUhB,CAACrC,EAAMwF,QAASxF,EAAMyF,WAAY5C,IAG9ByD,EAAgB9F,uBAAY,WAChC,OACE,cAAC,EAAD,CACEpB,gBAAiBY,EAAMyF,WACvBnG,aAAcwF,EAAOxF,aACrBO,YAAY,WACZD,iBAAiB,gBACjBE,UAAU,KACVH,UAAWkD,EACX9C,MAAOqG,EACP/G,QAASyF,EAAOzF,YAGnB,CAAC+G,EAASpG,EAAMyF,WAAY5C,IAEzB0D,EAAgB/F,uBACpB,SAACgG,EAAGC,GAAJ,MAAe,CACbzF,OAAQgF,EACRU,OAAQV,EAAWS,EACnBA,WAEF,CAACT,IAGGW,EAAmBnG,uBAAY,WACK,IAAD,EAAnCmF,EAAM3E,OAASkF,EAAWrC,UAC5B,UAAAoC,EAASpC,eAAT,SAAkB+C,cAAc,CAC9BH,MAAOd,EAAM3E,OAAS,EACtB6F,aAAc,KAEhBX,EAAWrC,QAAU8B,EAAM3E,UAE5B,CAAC2E,EAAM3E,SAEJqE,EAAU7E,uBAAY,WAC1BqF,MACC,CAACA,IAEJ,OACE,cAAC,IAAD,CAAQN,YAAaF,EAASnD,MAAM,QAApC,SACE,eAAC4E,EAAA,EAAD,CACErC,0BAA0B,UAC1BjF,MAAO,CAACJ,gBAAiBY,EAAMwF,SAFjC,UAGE,cAAClB,EAAA,EAAD,CACEyC,oBAAqBT,EACrBU,sBAAuB,CAAC3H,QAASyF,EAAOzF,SACxCkF,KAAMoB,EACNsB,iBAAiB,OACjBV,cAAeA,EACf7C,YAAU,EACVc,aAAc2B,EACd1B,0BAA0B,UAC1BC,oBAAqBiC,EACrBhC,IAAKsB,EACLrB,WAAYyB,EACZa,gCAAgC,EAChCC,gBAAgB,SAChBC,eAAgBpB,IAElB,cAAC,IAAD,YCzIKqB,EAAWnI,gBAAK,WAC3B,IAAMc,EAAQC,cACPkF,EAAYC,0BAAZD,SAEDmC,EAAU9G,uBAAY,WAC1B2E,EAAS,aACR,CAACA,IAN2C,EAQnBjF,mBAAuB,CACjD,CACEmC,GAAI,IACJR,KAAM,cACNuB,MAAO,CACL,CAACf,GAAI,IAAKR,KAAM,QAChB,CAACQ,GAAI,IAAKR,KAAM,QAChB,CAACQ,GAAI,IAAKR,KAAM,OAChB,CAACQ,GAAI,IAAKR,KAAM,aAChB,CAACQ,GAAI,IAAKR,KAAM,WAGpB,CACEQ,GAAI,IACJR,KAAM,UACNuB,MAAO,CACL,CAACf,GAAI,IAAKR,KAAM,cAChB,CAACQ,GAAI,IAAKR,KAAM,cAChB,CAACQ,GAAI,IAAKR,KAAM,kBAChB,CAACQ,GAAI,IAAKR,KAAM,iBAChB,CAACQ,GAAI,IAAKR,KAAM,gBA5ByB,mBAQxC0F,EARwC,KAQhCC,EARgC,KAiCzCC,EAAcjH,uBAClB,YAAa,IAAX4B,EAAU,EAAVA,KACA,OACE,cAAC,EAAD,CACEe,qBAAqB,mBACrBD,eAAe,cACf5D,aAAcwF,EAAOxF,aACrByD,UAAW/C,EAAMwF,QAEjB5C,KAAMR,EACNU,UAAW9C,EAAMyF,WACjBpG,QAASyF,EAAOzF,SAHX+C,EAAKC,MAOhB,CAACrC,EAAMyF,WAAYzF,EAAMwF,UAGrBkC,EAAalH,uBAAY,SAACqB,GAC9B,IAAMmC,EAAOE,KAAKC,MAAMwD,WACxBH,GAAU,SAAC7G,GAAD,4BAAWA,GAAX,CAAc,CAAC0B,GAAI2B,EAAMnC,OAAMuB,MAAO,WAC/C,IAEGwE,EAAepH,uBAAY,WAC/B,OACE,cAAC,EAAD,CACEpB,gBAAiBY,EAAMyF,WACvBnG,aAAcwF,EAAOxF,aACrBO,YAAY,YACZD,iBAAiB,iBACjBE,UAAU,KACVC,MAAO2H,EACPrI,QAASyF,EAAOzF,YAGnB,CAACW,EAAMyF,WAAYiC,IAEtB,OACE,cAAC,IAAD,CAAQG,aAAcP,EAASpF,MAAM,WAArC,SACE,cAAC3C,EAAA,EAAD,CACEC,MAAO,CACL6B,KAAM,EACNjC,gBAAiBY,EAAMwF,SAH3B,SAKE,cAAClB,EAAA,EAAD,CACEyC,oBAAqBa,EACrBZ,sBAAuB,CAAC3H,QAASyF,EAAOzF,SACxCkF,KAAMgD,EACN9C,0BAA0B,UAC1BG,WAAY6C,W,4EC9EhBK,EAAY,SAACC,GAAD,MAAsB,CACtCC,KAAKC,IAAL,MAAAD,KAAI,YAAQD,IACZC,KAAKE,IAAL,MAAAF,KAAI,YAAQD,MAGDI,EAAQ,SAAC,GAIiB,IAHrC5D,EAGoC,EAHpCA,KACAtD,EAEoC,EAFpCA,MACAmH,EACoC,EADpCA,OAEMC,EAASC,cACZP,OAAOD,EAAUvD,EAAKgE,KAAI,SAACC,GAAD,OAAOA,EAAExE,UACnCyE,MAAM,CAAC,EAAGxH,IACPyH,EAASC,cACZZ,OAAOD,EAAUvD,EAAKgE,KAAI,SAACC,GAAD,OAAOA,EAAE5G,WACnC6G,MAAM,CAACL,EAhBIQ,MAiBRJ,EAAIK,MAEPC,GAAE,SAACnI,GAAD,OAAO0H,EAAO1H,EAAEqD,SAClB+E,GAAE,SAACpI,GAAD,OAAO+H,EAAO/H,EAAEiB,UAClBoH,MAAMH,IAJCA,CAIiBtE,GAC3B,OACE,cAAChF,EAAA,EAAD,CAAMC,MAAO,CAACyB,QAAOmH,UAArB,SACE,eAAC,IAAD,CAAK5I,MAAOyJ,IAAWC,aAAvB,UACE,cAAC,OAAD,UACE,eAAC,iBAAD,CAAgB7G,GAAG,WAAW8G,GAAG,MAAMC,GAAG,MAAMC,GAAG,KAAKC,GAAG,OAA3D,UACE,cAAC,OAAD,CAAM5C,OAAO,KAAK6C,UAAU,YAC5B,cAAC,OAAD,CAAM7C,OAAO,MAAM6C,UAAU,YAC7B,cAAC,OAAD,CAAM7C,OAAO,OAAO6C,UAAU,iBAGlC,cAAC,OAAD,CACEf,EAAC,UAAKA,EAAL,aAAWvH,EAAX,YAAoBmH,EAApB,gBAAkCA,GACnCoB,KAAK,mBAEP,cAAC,OAAD,aAAMA,KAAK,cAAcC,OAAO,WAAc,CAACjB,IAAGI,YArCtC,WCDdc,EAAQ,SAAC,GAAwB,IAAvB7H,EAAsB,EAAtBA,KACd,OACE,cAAC,IAAD,CACET,SAAS,OACT5B,MAAO,CAACkD,cAAeoC,EAAOzF,SAC9B6C,MAAOL,EACPF,KAAK,QAKL4C,EAAO,CACX,CAACP,KAAM,IAAIE,KAAK,KAAM,EAAG,GAAGyF,UAAW/H,MAAO,GAC9C,CAACoC,KAAM,IAAIE,KAAK,KAAM,EAAG,IAAIyF,UAAW/H,MAAO,GAC/C,CAACoC,KAAM,IAAIE,KAAK,KAAM,EAAG,IAAIyF,UAAW/H,MAAO,KAC/C,CAACoC,KAAM,IAAIE,KAAK,KAAM,GAAI,GAAGyF,UAAW/H,MAAO,KAC/C,CAACoC,KAAM,IAAIE,KAAK,KAAM,GAAI,GAAGyF,UAAW/H,MAAO,KAC/C,CAACoC,KAAM,IAAIE,KAAK,KAAM,GAAI,GAAGyF,UAAW/H,MAAO,MAGpCgI,EAAU1K,gBAAK,WAC1B,IAAMc,EAAQC,cAEd,OACE,cAAC,IAAD,CAAQiC,MAAM,UAAd,SACE,eAAC4E,EAAA,EAAD,CACEE,sBAAuB,CACrB3H,QAAS0F,IAAM1F,QAAQ4F,IACvB7F,gBAAiBY,EAAMwF,SAEzBhG,MAAO,CAACJ,gBAAiBY,EAAMwF,SALjC,UAME,cAAC,EAAD,CACEpG,gBAAiBY,EAAMyF,WACvBnG,aAAcwF,EAAOxF,aACrBD,QAASyF,EAAOzF,QAHlB,SAIE,eAACE,EAAA,EAAD,WACE,cAAC,EAAD,CAAOsC,KAAK,YACZ,cAAC,IAAD,CAAMK,MAAM,uEAGhB,cAAC,EAAD,CACE9C,gBAAiBY,EAAMyF,WACvBnG,aAAcwF,EAAOxF,aACrBD,QAASyF,EAAOzF,QAHlB,SAIE,eAACE,EAAA,EAAD,WACE,cAAC,EAAD,CAAOsC,KAAK,UACZ,cAAC,IAAD,CAAMK,MAAM,UACZ,cAAC,IAAD,CAAMA,MAAM,eACZ,cAAC,IAAD,CAAMA,MAAM,UACZ,cAAC,IAAD,CAAMA,MAAM,oBAGhB,cAAC,EAAD,CACE9C,gBAAiBY,EAAMyF,WACvBnG,aAAcwF,EAAOxF,aACrBD,QAASyF,EAAOzF,QAHlB,SAIE,eAACE,EAAA,EAAD,WACE,cAAC,EAAD,CAAOsC,KAAK,sBACZ,cAACtC,EAAA,EAAD,CACEC,MAAO,CAAC6B,KAAM,EAAGoB,eAAgB,SAAUtB,WAAY,UADzD,SAEE,cAAC,EAAD,CACEoD,KAAMA,EACN6D,OAAQ,IACRnH,MAAO4I,IAAWC,IAAI,UAAU7I,MAAyB,EAAjB6D,EAAOzF,iBAKvD,cAAC,EAAD,CACED,gBAAiBY,EAAMyF,WACvBnG,aAAcwF,EAAOxF,aACrBD,QAASyF,EAAOzF,QAHlB,SAIE,eAACE,EAAA,EAAD,WACE,cAAC,EAAD,CAAOsC,KAAK,sBACZ,cAAC,IAAD,iBCzENkI,EAAmC,CAACC,aAAa,GACjDC,EAAUC,cACVC,EAAgBC,cAOhBC,EAAqB,CACzBnF,QAAS,CACPoF,QAAS,sBACTC,UAAW,uBAEbC,MAAO,CACLF,QAAS,mCACTC,UAAW,oCAEbX,QAAS,CAACU,QAAS,UAAWC,UAAW,WACzCE,QAAS,CAACH,QAAS,UAAWC,UAAW,oBAYrCC,EAAQ,WACZ,OACE,eAACL,EAAcO,UAAf,CAAyBC,cAAeZ,EAAxC,UACE,cAACI,EAAcS,OAAf,CAAsBC,UAAWxD,EAAUxF,KAAK,aAChD,cAACsI,EAAcS,OAAf,CAAsBC,UAAWnF,EAAS7D,KAAK,gBAKtC3C,0BAAK,WAClB,IAAMc,EAAQC,cACR6K,EAAqC,CACzCC,qBAAqB,EACrBC,gBAAiBhL,EAAMgC,QACvBiJ,kBAAmBjL,EAAMkL,KACzBC,WAAW,GAEPR,EAAgBnK,uBACpB,gBAAE4K,EAAF,EAAEA,MAAF,MAAkC,CAChCC,WAAY,YAAuD,IAAlCf,EAAiC,EAAjCA,QAASgB,EAAwB,EAAxBA,KAClCC,EAAQjB,EAAU,UAAY,YAC9BkB,EAAYlB,EAAUtK,EAAMgC,QAAUhC,EAAMkL,KAC5CrJ,EAAQwI,EAAiBe,EAAMvJ,MAAM0J,GAC3C,OAAO,cAAC,IAAD,CAAMvL,MAAOwL,EAAW3J,KAAMA,EAAMyJ,KAAMA,QAGrD,CAACtL,IAGH,OACE,eAACiK,EAAQS,UAAT,CACEC,cAAeA,EACfG,cAAeA,EAFjB,UAGE,cAACb,EAAQW,OAAT,CAAgBC,UAAW3F,EAASrD,KAAK,YACzC,cAACoI,EAAQW,OAAT,CAAgBC,UAAWL,EAAO3I,KAAK,UACvC,cAACoI,EAAQW,OAAT,CAAgBC,UAAWjB,EAAS/H,KAAK","file":"static/js/12.96e10e25.chunk.js","sourcesContent":["import React, {memo, ReactElement} from 'react';\nimport {View} from 'react-native';\n\ntype CardProps = {\n  children: ReactElement;\n  padding: number;\n  borderRadius: number;\n  backgroundColor: string;\n};\n\nexport const Card = memo(function Card({\n  children,\n  backgroundColor,\n  padding,\n  borderRadius,\n}: CardProps) {\n  return (\n    <View\n      style={{\n        borderRadius,\n        backgroundColor,\n        padding,\n        marginBottom: padding,\n      }}>\n      {children}\n    </View>\n  );\n});\n","import React, {memo, useCallback, useState} from 'react';\nimport {View} from 'react-native';\nimport {Button, Icon, TextInput} from '../../../components';\nimport {useColor} from '../../../hooks';\nimport {FontType} from '../../../utils';\n\ntype AddItemProps = {\n  itemWidth?: number;\n  borderRadius: number;\n  padding: number;\n  backgroundColor: string;\n  inputPlaceholder: string;\n  inputType: FontType;\n  buttonTitle: string;\n  onAdd: (value: string) => void;\n};\n\nexport const AddItem = memo(function AddItem({\n  itemWidth,\n  borderRadius,\n  inputPlaceholder,\n  buttonTitle,\n  padding,\n  inputType,\n  backgroundColor,\n  onAdd,\n}: AddItemProps) {\n  const color = useColor();\n  const [showInput, setShowInput] = useState(false);\n  const [itemTitle, setItemTitle] = useState('');\n  const onItemTitleChange = useCallback((v: string) => setItemTitle(v), []);\n  const onAddItemPress = useCallback(() => setShowInput((p) => !p), []);\n  const onItemTitleClose = useCallback(() => {\n    setShowInput(false);\n    setItemTitle('');\n  }, []);\n  const onItemTitleSubmit = useCallback(() => {\n    const formatted = itemTitle.trim();\n    if (formatted.length === 0) {\n      return;\n    }\n    onItemTitleClose();\n    onAdd(formatted);\n  }, [itemTitle, onAdd, onItemTitleClose]);\n  return (\n    <View\n      style={{\n        width: itemWidth,\n        borderRadius,\n        padding: padding / 2,\n        backgroundColor,\n      }}>\n      {showInput ? (\n        <View style={{flexDirection: 'row', alignItems: 'center'}}>\n          <TextInput\n            emphasis=\"high\"\n            flex\n            focusOnLoad\n            onChangeText={onItemTitleChange}\n            onSubmitEditing={onItemTitleSubmit}\n            placeholder={inputPlaceholder}\n            returnKeyType=\"done\"\n            type={inputType}\n            value={itemTitle}\n          />\n          <Icon name=\"close\" onPress={onItemTitleClose} padded />\n          <Icon\n            color={color.primary}\n            name=\"send\"\n            onPress={onItemTitleSubmit}\n            padded\n          />\n        </View>\n      ) : (\n        <Button\n          center\n          color=\"primary\"\n          onPress={onAddItemPress}\n          title={buttonTitle}\n        />\n      )}\n    </View>\n  );\n});\n","import React, {memo} from 'react';\nimport {Text, TouchableOpacity} from '../../../components';\nimport {ItemObject} from '../types';\n\ntype ItemProps = {\n  item: ItemObject;\n  padding: number;\n  borderRadius: number;\n  backgroundColor: string;\n};\n\nexport const Item = memo(function Item({\n  item,\n  padding,\n  borderRadius,\n  backgroundColor,\n}: ItemProps) {\n  return (\n    <TouchableOpacity\n      key={item.id}\n      style={{\n        borderRadius,\n        padding: padding,\n        backgroundColor,\n        marginBottom: padding / 2,\n      }}>\n      <Text title={item.name} />\n    </TouchableOpacity>\n  );\n});\n","import React, {memo, useCallback, useState} from 'react';\nimport {View} from 'react-native';\nimport {Icon, TextInput} from '../../../components';\n\ntype ListHeaderProps = {\n  name: string;\n  padding: number;\n};\n\nexport const ListHeader = memo(function ListHeader({\n  name,\n  padding,\n}: ListHeaderProps) {\n  const [input, setInput] = useState(name);\n\n  const onChangeText = useCallback((value: string) => {\n    setInput(value);\n  }, []);\n\n  return (\n    <View\n      style={{\n        flexDirection: 'row',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n        paddingBottom: padding,\n      }}>\n      <TextInput\n        emphasis=\"high\"\n        flex\n        onChangeText={onChangeText}\n        placeholder=\"list name...\"\n        type=\"h4\"\n        value={input}\n      />\n      <Icon name=\"dots-vertical\" padded />\n    </View>\n  );\n});\n","import React, {memo, useCallback, useRef, useState} from 'react';\nimport {FlatList, View} from 'react-native';\nimport {ItemObject, ListObject} from '../types';\nimport {AddItem} from './AddItem';\nimport {Item} from './Item';\nimport {ListHeader} from './ListHeader';\n\ntype ListProps = {\n  list: ListObject;\n  listColor: string;\n  cardColor: string;\n  borderRadius: number;\n  listWidth?: number;\n  padding: number;\n  maxHeight?: number;\n  orientation?: 'vertical' | 'horizontal';\n  addButtonTitle: string;\n  addButtonPlaceholder: string;\n};\n\nexport const List = memo(function List({\n  list,\n  borderRadius,\n  listWidth,\n  listColor,\n  cardColor,\n  padding,\n  maxHeight,\n  orientation = 'vertical',\n  addButtonTitle,\n  addButtonPlaceholder,\n}: ListProps) {\n  const [cards, setCards] = useState<ItemObject[]>(list.items);\n  const cardsRef = useRef<FlatList | null>(null);\n  const cardsLength = useRef(cards.length);\n  const horizontal = orientation === 'horizontal';\n\n  const onKeyExtractor = useCallback((item) => item.id, []);\n\n  const onCardSizeChange = useCallback(() => {\n    if (cards.length > cardsLength.current) {\n      cardsRef.current?.scrollToEnd();\n      cardsLength.current = cards.length;\n    }\n  }, [cards.length]);\n\n  const onAddCard = useCallback((name: string) => {\n    const date = String(Date.now());\n    setCards((p) => [...p, {id: date, name}]);\n  }, []);\n\n  const onRenderItem = useCallback(\n    ({item}) => {\n      return (\n        <Item\n          backgroundColor={cardColor}\n          borderRadius={borderRadius}\n          item={item}\n          key={item.id}\n          padding={padding}\n        />\n      );\n    },\n    [borderRadius, cardColor, padding],\n  );\n\n  return (\n    <View>\n      <View\n        style={{\n          borderRadius,\n          width: listWidth,\n          backgroundColor: listColor,\n          padding: padding / 2,\n          marginRight: horizontal ? padding : 0,\n          marginBottom: horizontal ? 0 : padding,\n        }}>\n        <ListHeader name={list.name} padding={padding} />\n        <FlatList\n          data={cards}\n          keyExtractor={onKeyExtractor}\n          keyboardShouldPersistTaps=\"handled\"\n          onContentSizeChange={onCardSizeChange}\n          ref={cardsRef}\n          renderItem={onRenderItem}\n          showsVerticalScrollIndicator={false}\n          style={{maxHeight}}\n        />\n        <AddItem\n          backgroundColor={listColor}\n          borderRadius={borderRadius}\n          buttonTitle={addButtonTitle}\n          inputPlaceholder={addButtonPlaceholder}\n          inputType=\"body2\"\n          onAdd={onAddCard}\n          padding={padding}\n        />\n      </View>\n    </View>\n  );\n});\n","import {Theme} from '../../utils';\n\nexport const config = {\n  borderRadius: Theme.padding.p02,\n  padding: Theme.padding.p04,\n};\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback, useState} from 'react';\nimport {View} from 'react-native';\nimport {Button, Screen, Text} from '../../../../components';\nimport {useColor} from '../../../../hooks';\nimport {Card} from '../../components/Card';\nimport {List} from '../../components/List';\nimport {config} from '../../configs';\nimport {ListObject} from '../../types';\n\nexport const Capture = memo(function Capture() {\n  const color = useColor();\n  const {navigate} = useNavigation();\n  const navBack = useCallback(() => navigate('admin'), [navigate]);\n\n  const [list] = useState<ListObject>({\n    id: '1',\n    name: 'Inbox',\n    items: [\n      {id: '1', name: 'do dishes'},\n      {id: '2', name: 'walk dog'},\n      {id: '3', name: 'run 4 miles'},\n    ],\n  });\n\n  const onOrganize = useCallback(() => undefined, []);\n\n  return (\n    <Screen onLeftPress={navBack} title=\"Capture\">\n      <View\n        style={{\n          backgroundColor: color.surface,\n          flex: 1,\n          padding: config.padding,\n        }}>\n        <Card\n          backgroundColor={color.background}\n          borderRadius={config.borderRadius}\n          padding={config.padding}>\n          <View>\n            <Text\n              center\n              emphasis=\"high\"\n              style={{paddingBottom: config.padding}}\n              title=\"Record every thought\"\n              type=\"h4\"\n            />\n            <Text\n              center\n              emphasis=\"medium\"\n              title=\"Clear your mind. Keep focus on the most important. Organize periodically.\"\n            />\n          </View>\n        </Card>\n        <List\n          addButtonPlaceholder=\"Item title...\"\n          addButtonTitle=\"Add item\"\n          borderRadius={config.borderRadius}\n          cardColor={color.surface}\n          key={list.id}\n          list={list}\n          listColor={color.background}\n          maxHeight={300}\n          padding={config.padding}\n        />\n        <View\n          style={{\n            padding: config.padding / 2,\n            backgroundColor: color.background,\n          }}>\n          <Button\n            center\n            color=\"primary\"\n            onPress={onOrganize}\n            title=\"Organize\"\n          />\n        </View>\n      </View>\n    </Screen>\n  );\n});\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback, useRef, useState} from 'react';\nimport {FlatList, ScrollView} from 'react-native';\nimport {Screen} from '../../../../components';\nimport {KeyboardSpacer} from '../../../../conversions';\nimport {useColor} from '../../../../hooks';\nimport {getSmallestDimension} from '../../../../models';\nimport {useRootSelector} from '../../../../utils';\nimport {AddItem} from '../../components/AddItem';\nimport {List} from '../../components/List';\nimport {config} from '../../configs';\nimport {ListObject} from '../../types';\n\n// TODO: add landing page (actionables + record)\n// TODO: create data layer\n\n// TODO: fix keyboard scrolling\n\n// TODO: figure out max height for list (not 500)\n// TODO: figure out centering of list\n\nexport const Project = memo(function Project() {\n  const [lists, setLists] = useState<ListObject[]>([\n    {\n      id: '1',\n      name: 'Backlog',\n      items: [\n        {\n          id: '11',\n          name: 'clean desk',\n        },\n        {\n          id: '22',\n          name: 'clean room',\n        },\n        {\n          id: '33',\n          name: 'brush teeth',\n        },\n      ],\n    },\n    {\n      id: '2',\n      name: 'Todo',\n      items: [],\n    },\n    {\n      id: '3',\n      name: 'In Progress',\n      items: [],\n    },\n    {\n      id: '4',\n      name: 'Done',\n      items: [],\n    },\n  ]);\n  const {goBack} = useNavigation();\n  const color = useColor();\n  const width = useRootSelector(getSmallestDimension);\n  const listWidth = width * 0.7;\n  const listSize = listWidth + config.padding; // TODO: deal with marginRight and FlatList padding\n  const listsRef = useRef<FlatList | null>(null);\n  const listsCount = useRef(lists.length);\n\n  const getItemId = useCallback((item) => item.id, []);\n\n  const addList = useCallback((name: string) => {\n    const date = String(Date.now());\n    setLists((p) => [...p, {id: date, name, items: []}]);\n  }, []);\n\n  const renderList = useCallback(\n    ({item}) => {\n      return (\n        <List\n          addButtonPlaceholder=\"Card title...\"\n          addButtonTitle=\"Add card\"\n          borderRadius={config.borderRadius}\n          cardColor={color.surface}\n          key={item.id}\n          list={item}\n          listColor={color.background}\n          listWidth={listWidth}\n          maxHeight={500}\n          orientation=\"horizontal\"\n          padding={config.padding}\n        />\n      );\n    },\n    [color.surface, color.background, listWidth],\n  );\n\n  const renderAddList = useCallback(() => {\n    return (\n      <AddItem\n        backgroundColor={color.background}\n        borderRadius={config.borderRadius}\n        buttonTitle=\"Add List\"\n        inputPlaceholder=\"List title...\"\n        inputType=\"h4\"\n        itemWidth={listWidth}\n        onAdd={addList}\n        padding={config.padding}\n      />\n    );\n  }, [addList, color.background, listWidth]);\n\n  const getItemLayout = useCallback(\n    (_, index) => ({\n      length: listSize,\n      offset: listSize * index,\n      index,\n    }),\n    [listSize],\n  );\n\n  const onListSizeChange = useCallback(() => {\n    if (lists.length > listsCount.current) {\n      listsRef.current?.scrollToIndex({\n        index: lists.length - 1,\n        viewPosition: 0.5,\n      });\n      listsCount.current = lists.length;\n    }\n  }, [lists.length]);\n\n  const navBack = useCallback(() => {\n    goBack();\n  }, [goBack]);\n\n  return (\n    <Screen onLeftPress={navBack} title=\"Focus\">\n      <ScrollView\n        keyboardShouldPersistTaps=\"handled\"\n        style={{backgroundColor: color.surface}}>\n        <FlatList\n          ListFooterComponent={renderAddList} // TODO: make default FlatList with this setting\n          contentContainerStyle={{padding: config.padding}}\n          data={lists}\n          decelerationRate=\"fast\"\n          getItemLayout={getItemLayout}\n          horizontal\n          keyExtractor={getItemId}\n          keyboardShouldPersistTaps=\"handled\"\n          onContentSizeChange={onListSizeChange}\n          ref={listsRef}\n          renderItem={renderList}\n          showsHorizontalScrollIndicator={false}\n          snapToAlignment=\"center\"\n          snapToInterval={listSize}\n        />\n        <KeyboardSpacer />\n      </ScrollView>\n    </Screen>\n  );\n});\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback, useState} from 'react';\nimport {FlatList, View} from 'react-native';\nimport {Screen} from '../../../../components';\nimport {useColor} from '../../../../hooks';\nimport {AddItem} from '../../components/AddItem';\nimport {List} from '../../components/List';\nimport {config} from '../../configs';\nimport {ListObject} from '../../types';\n\n// TODO: add journal\n// TODO: add historical data\n// TODO: add purpose\n// TODO: add goals\n\nexport const Projects = memo(function Projects() {\n  const color = useColor();\n  const {navigate} = useNavigation();\n\n  const navNext = useCallback(() => {\n    navigate('Project');\n  }, [navigate]);\n\n  const [groups, setGroups] = useState<ListObject[]>([\n    {\n      id: '1',\n      name: 'Actionables',\n      items: [\n        {id: '1', name: 'home'},\n        {id: '2', name: 'work'},\n        {id: '3', name: 'gym'},\n        {id: '4', name: 'groceries'},\n        {id: '5', name: 'gifts'},\n      ],\n    },\n    {\n      id: '2',\n      name: 'Storage',\n      items: [\n        {id: '1', name: 'gift ideas'},\n        {id: '2', name: 'checklists'},\n        {id: '3', name: 'book summaries'},\n        {id: '4', name: 'meeting notes'},\n        {id: '5', name: 'receipts'},\n      ],\n    },\n  ]);\n\n  const renderGroup = useCallback(\n    ({item}) => {\n      return (\n        <List\n          addButtonPlaceholder=\"Project title...\"\n          addButtonTitle=\"Add project\"\n          borderRadius={config.borderRadius}\n          cardColor={color.surface}\n          key={item.id}\n          list={item}\n          listColor={color.background}\n          padding={config.padding}\n        />\n      );\n    },\n    [color.background, color.surface],\n  );\n\n  const onAddGroup = useCallback((name: string) => {\n    const date = Date.now().toString();\n    setGroups((p) => [...p, {id: date, name, items: []}]);\n  }, []);\n\n  const renderFooter = useCallback(() => {\n    return (\n      <AddItem\n        backgroundColor={color.background}\n        borderRadius={config.borderRadius}\n        buttonTitle=\"Add group\"\n        inputPlaceholder=\"Group title...\"\n        inputType=\"h4\"\n        onAdd={onAddGroup}\n        padding={config.padding}\n      />\n    );\n  }, [color.background, onAddGroup]);\n\n  return (\n    <Screen onRightPress={navNext} title=\"Projects\">\n      <View\n        style={{\n          flex: 1,\n          backgroundColor: color.surface,\n        }}>\n        <FlatList\n          ListFooterComponent={renderFooter}\n          contentContainerStyle={{padding: config.padding}}\n          data={groups}\n          keyboardShouldPersistTaps=\"handled\"\n          renderItem={renderGroup}\n        />\n      </View>\n    </Screen>\n  );\n});\n","import {scaleLinear, scaleTime} from 'd3-scale';\nimport * as shape from 'd3-shape';\nimport * as React from 'react';\nimport {StyleSheet, View} from 'react-native';\nimport Svg, {Defs, LinearGradient, Path, Stop} from 'react-native-svg';\n\ninterface DataPoint {\n  date: number;\n  value: number;\n}\n\ninterface GraphProps {\n  data: DataPoint[];\n  width: number;\n  height: number;\n}\n\nconst strokeWidth = 4;\nconst padding = strokeWidth / 2;\nconst getDomain = (domain: number[]) => [\n  Math.min(...domain),\n  Math.max(...domain),\n];\n\nexport const Graph = ({\n  data,\n  width,\n  height,\n}: GraphProps): React.ReactElement => {\n  const scaleX = scaleTime()\n    .domain(getDomain(data.map((d) => d.date)))\n    .range([0, width]);\n  const scaleY = scaleLinear()\n    .domain(getDomain(data.map((d) => d.value)))\n    .range([height - padding, padding]);\n  const d = shape\n    .line<DataPoint>()\n    .x((p) => scaleX(p.date))\n    .y((p) => scaleY(p.value))\n    .curve(shape.curveBasis)(data) as string;\n  return (\n    <View style={{width, height}}>\n      <Svg style={StyleSheet.absoluteFill}>\n        <Defs>\n          <LinearGradient id=\"gradient\" x1=\"50%\" x2=\"50%\" y1=\"0%\" y2=\"100%\">\n            <Stop offset=\"0%\" stopColor=\"#cee3f9\" />\n            <Stop offset=\"80%\" stopColor=\"#ddedfa\" />\n            <Stop offset=\"100%\" stopColor=\"#feffff\" />\n          </LinearGradient>\n        </Defs>\n        <Path\n          d={`${d}L ${width} ${height} L 0 ${height}`}\n          fill=\"url(#gradient)\"\n        />\n        <Path fill=\"transparent\" stroke=\"#3977e3\" {...{d, strokeWidth}} />\n      </Svg>\n    </View>\n  );\n};\n","import React, {memo} from 'react';\nimport {Dimensions, ScrollView, View} from 'react-native';\nimport {Calendar, Screen, Text} from '../../../../components';\nimport {useColor} from '../../../../hooks';\nimport {Theme} from '../../../../utils';\nimport {Card} from '../../components/Card';\nimport {config} from '../../configs';\nimport {Graph} from './Graph';\n\n// TODO: add journal\n// TODO: add historical data\n// TODO: add purpose\n// TODO: add goals\n\ntype TitleProps = {name: string};\n\nconst Title = ({name}: TitleProps) => {\n  return (\n    <Text\n      emphasis=\"high\"\n      style={{paddingBottom: config.padding}}\n      title={name}\n      type=\"h4\"\n    />\n  );\n};\n\nconst data = [\n  {date: new Date(2018, 9, 1).getTime(), value: 0},\n  {date: new Date(2018, 9, 16).getTime(), value: 0},\n  {date: new Date(2018, 9, 17).getTime(), value: 200},\n  {date: new Date(2018, 10, 1).getTime(), value: 200},\n  {date: new Date(2018, 10, 2).getTime(), value: 300},\n  {date: new Date(2018, 10, 5).getTime(), value: 300},\n];\n\nexport const Reflect = memo(function Reflect() {\n  const color = useColor();\n\n  return (\n    <Screen title=\"Reflect\">\n      <ScrollView\n        contentContainerStyle={{\n          padding: Theme.padding.p04,\n          backgroundColor: color.surface,\n        }}\n        style={{backgroundColor: color.surface}}>\n        <Card\n          backgroundColor={color.background}\n          borderRadius={config.borderRadius}\n          padding={config.padding}>\n          <View>\n            <Title name=\"Purpose\" />\n            <Text title=\"Make a significant positive difference in global productivity\" />\n          </View>\n        </Card>\n        <Card\n          backgroundColor={color.background}\n          borderRadius={config.borderRadius}\n          padding={config.padding}>\n          <View>\n            <Title name=\"Goals\" />\n            <Text title=\"Top 3\" />\n            <Text title=\"Deep Focus\" />\n            <Text title=\"Smile\" />\n            <Text title=\"1 More Rep\" />\n          </View>\n        </Card>\n        <Card\n          backgroundColor={color.background}\n          borderRadius={config.borderRadius}\n          padding={config.padding}>\n          <View>\n            <Title name=\"Review (Progress)\" />\n            <View\n              style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>\n              <Graph\n                data={data}\n                height={200}\n                width={Dimensions.get('window').width - config.padding * 4}\n              />\n            </View>\n          </View>\n        </Card>\n        <Card\n          backgroundColor={color.background}\n          borderRadius={config.borderRadius}\n          padding={config.padding}>\n          <View>\n            <Title name=\"Reflect (Journal)\" />\n            <Calendar />\n          </View>\n        </Card>\n      </ScrollView>\n    </Screen>\n  );\n});\n","import {\n  BottomTabBarOptions,\n  createBottomTabNavigator,\n} from '@react-navigation/bottom-tabs';\nimport {Route} from '@react-navigation/native';\nimport {\n  createStackNavigator,\n  StackNavigationOptions,\n} from '@react-navigation/stack';\nimport React, {memo, useCallback} from 'react';\nimport {Icon} from '../../components';\nimport {useColor} from '../../hooks';\nimport {Capture} from './screens/Capture';\nimport {Project} from './screens/Project';\nimport {Projects} from './screens/Projects';\nimport {Reflect} from './screens/Reflect';\n\nconst noHeader: StackNavigationOptions = {headerShown: false};\nconst RootTab = createBottomTabNavigator();\nconst ProjectsStack = createStackNavigator();\n\ntype Tabs = 'Capture' | 'Focus' | 'Reflect' | 'Account';\ntype TabIcons = {\n  [key in Tabs]: {focused: string; unfocused: string};\n};\n\nconst tabIcons: TabIcons = {\n  Capture: {\n    focused: 'pencil-plus-outline',\n    unfocused: 'pencil-plus-outline',\n  },\n  Focus: {\n    focused: 'checkbox-multiple-marked-outline',\n    unfocused: 'checkbox-multiple-marked-outline',\n  },\n  Reflect: {focused: 'finance', unfocused: 'finance'},\n  Account: {focused: 'account', unfocused: 'account-outline'},\n};\n\ntype ScreenOptionsProps = {\n  route: Route<string, Record<string, unknown> | undefined>;\n};\n\ntype TabBarIconProps = {\n  focused: boolean;\n  size: number;\n};\n\nconst Focus = () => {\n  return (\n    <ProjectsStack.Navigator screenOptions={noHeader}>\n      <ProjectsStack.Screen component={Projects} name=\"Projects\" />\n      <ProjectsStack.Screen component={Project} name=\"Project\" />\n    </ProjectsStack.Navigator>\n  );\n};\n\nexport default memo(function Complete() {\n  const color = useColor();\n  const tabBarOptions: BottomTabBarOptions = {\n    keyboardHidesTabBar: true,\n    activeTintColor: color.primary,\n    inactiveTintColor: color.text,\n    showLabel: false,\n  };\n  const screenOptions = useCallback(\n    ({route}: ScreenOptionsProps) => ({\n      tabBarIcon: function tabBarIcon({focused, size}: TabBarIconProps) {\n        const focus = focused ? 'focused' : 'unfocused';\n        const iconColor = focused ? color.primary : color.text;\n        const name = (tabIcons as any)[route.name][focus];\n        return <Icon color={iconColor} name={name} size={size} />;\n      },\n    }),\n    [color],\n  );\n\n  return (\n    <RootTab.Navigator\n      screenOptions={screenOptions as any}\n      tabBarOptions={tabBarOptions}>\n      <RootTab.Screen component={Capture} name=\"Capture\" />\n      <RootTab.Screen component={Focus} name=\"Focus\" />\n      <RootTab.Screen component={Reflect} name=\"Reflect\" />\n    </RootTab.Navigator>\n  );\n});\n"],"sourceRoot":""}