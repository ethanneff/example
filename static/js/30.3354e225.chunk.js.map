{"version":3,"sources":["apps/Playground/screens/Ball/index.tsx"],"names":["memo","height","useRootSelector","getHeight","width","getWidth","nav","useNav","ballPosition","Animated","ValueXY","x","y","useDriver","useNativeDriver","color","useColor","styles","StyleSheet","create","ball","borderColor","text","borderRadius","borderWidth","marginLeft","marginTop","button","flexDirection","justifyContent","animate","dx","dy","spring","toValue","start","onLeftPress","to","title","View","style","getLayout","onPress","Math","random"],"mappings":"qGAAA,kFAOeA,0BAAK,WAClB,IAAMC,EAASC,YAAgBC,KACzBC,EAAQF,YAAgBG,KACxBC,EAAMC,cACNC,EAAe,IAAIC,IAASC,QAAQ,CAACC,EAAGP,EAAQ,EAAGQ,EAAGX,EAAS,IAC/DY,EAAYC,cACZC,EAAQC,cACRC,EAASC,IAAWC,OAAO,CAC/BC,KAAM,CACJC,YAAaN,EAAMO,KACnBC,aAAc,GACdC,YAAa,GACbvB,OAAQ,GACRwB,YAAa,GACbC,WAAY,GACZtB,MAAO,IAETuB,OAAQ,CACNC,cAAe,MACfC,eAAgB,kBAGdC,EAAU,SAACC,EAAYC,GAC3BvB,IAASwB,OAAOzB,EAAc,CAC5B0B,QAAS,CAACvB,EAAGP,EAAQ2B,EAAInB,EAAGX,EAAS+B,GACrClB,gBAAiBD,IAChBsB,SAIL,OACE,kBAAC,IAAD,CAAQC,YAAa9B,EAAI+B,GAAG,cAAeC,MAAM,QAC/C,kBAAC,IAASC,KAAV,CAAeC,MAAO,CAAChC,EAAaiC,YAAaxB,EAAOG,QACxD,kBAAC,IAAD,CAAMoB,MAAOvB,EAAOU,QAClB,kBAAC,IAAD,CAAQW,MAAM,UAAUI,QANP,kBAAMZ,EAAQ,GAAK,OAOpC,kBAAC,IAAD,CAAQQ,MAAM,SAASI,QANP,kBAAMZ,EAAQa,KAAKC,SAAUD,KAAKC","file":"static/js/30.3354e225.chunk.js","sourcesContent":["import React, {memo} from 'react';\nimport {Animated, StyleSheet, View} from 'react-native';\nimport {Button, Screen} from '../../../../components';\nimport {getHeight, getWidth} from '../../../../models';\nimport {useColor, useNativeDriver, useNav} from '../../../../hooks';\nimport {useRootSelector} from '../../../../utils';\n\nexport default memo(function PlaygroundBall() {\n  const height = useRootSelector(getHeight);\n  const width = useRootSelector(getWidth);\n  const nav = useNav();\n  const ballPosition = new Animated.ValueXY({x: width / 2, y: height / 2});\n  const useDriver = useNativeDriver();\n  const color = useColor();\n  const styles = StyleSheet.create({\n    ball: {\n      borderColor: color.text,\n      borderRadius: 30,\n      borderWidth: 30,\n      height: 60,\n      marginLeft: -30,\n      marginTop: -30,\n      width: 60,\n    },\n    button: {\n      flexDirection: 'row',\n      justifyContent: 'space-around',\n    },\n  });\n  const animate = (dx: number, dy: number) => {\n    Animated.spring(ballPosition, {\n      toValue: {x: width * dx, y: height * dy},\n      useNativeDriver: useDriver,\n    }).start();\n  };\n  const onInitialPress = () => animate(0.5, 0.5);\n  const onRandomPress = () => animate(Math.random(), Math.random());\n  return (\n    <Screen onLeftPress={nav.to('playground')} title=\"Ball\">\n      <Animated.View style={[ballPosition.getLayout(), styles.ball]} />\n      <View style={styles.button}>\n        <Button title=\"initial\" onPress={onInitialPress} />\n        <Button title=\"random\" onPress={onRandomPress} />\n      </View>\n    </Screen>\n  );\n});\n"],"sourceRoot":""}