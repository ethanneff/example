{"version":3,"sources":["apps/Debug/screens/Questionnaire/screens/Questionnaires.tsx","apps/Debug/screens/Questionnaire/index.tsx"],"names":["mapDispatchToProps","createQuestionnaire","removeQuestionnaire","selectQuestionnaire","updateQuestionnaire","Questionnaires","connect","state","questionnaires","getQuestionnaireArray","selected","props","useState","actionSheet","setActionSheet","handleLongPress","useCallback","id","handleItemPress","handleActionSheetClose","handleCreate","String","Date","now","handleItemMenu","renderItem","item","length","questions","subtitle","onPress","onLongPress","View","style","flexDirection","justifyContent","flex","h3","title","caption","icon","FlatList","keyExtractor","data","extraData","fab","contained","right","dropShadow","onBackgroundPress","Container","choices","key","next","type","output","width","Dimensions","get","tableView","currentIndex","onViewableItemsChanged","viewableItems","index","onProgress","direction","onFinish","scrollToIndex","animated","onSelection","choice","setRef","ref","items","map","nav","to","navigate","onLeftPress","this","scrollEnabled","removeClippedSubviews","showsHorizontalScrollIndicator","showsVerticalScrollIndicator","viewabilityConfig","itemVisiblePercentThreshold","horizontal","pagingEnabled","React","PureComponent"],"mappings":"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","file":"static/js/32.8a9d6135.chunk.js","sourcesContent":["import React, { useState, useCallback } from \"react\";\nimport { FlatList, View } from \"react-native\";\nimport { connect } from \"react-redux\";\nimport { Button, Card, Dialog, Text } from \"../../../../../components\";\nimport { RootState } from \"../../../../../containers\";\nimport {\n  Questionnaire,\n  createQuestionnaire,\n  getQuestionnaireArray,\n  removeQuestionnaire,\n  selectQuestionnaire,\n  updateQuestionnaire\n} from \"../models\";\n\ninterface StateProps {\n  questionnaires: Questionnaire[];\n  selected?: string;\n}\ninterface DispatchProps {\n  removeQuestionnaire: typeof removeQuestionnaire;\n  selectQuestionnaire: typeof selectQuestionnaire;\n  updateQuestionnaire: typeof updateQuestionnaire;\n  createQuestionnaire: typeof createQuestionnaire;\n}\ntype Props = StateProps & DispatchProps;\n\nconst Container = (props: Props) => {\n  const [actionSheet, setActionSheet] = useState(false);\n  const handleLongPress = useCallback(\n    (id: string) => () => props.removeQuestionnaire(id),\n    [props]\n  );\n  const handleItemPress = useCallback(\n    (id: string) => () => props.selectQuestionnaire(id),\n    [props]\n  );\n  const handleActionSheetClose = useCallback(() => setActionSheet(false), []);\n  const handleCreate = useCallback(\n    () => props.createQuestionnaire(String(Date.now())),\n    [props]\n  );\n  const handleItemMenu = useCallback(() => {\n    setActionSheet(state => !state);\n  }, []);\n  const renderItem = useCallback(\n    ({ item }) => {\n      const length = item.questions.length;\n      const subtitle = `${length} question${length === 1 ? \"\" : \"s\"}`;\n      return (\n        <Card\n          onPress={handleItemPress(item.id)}\n          onLongPress={handleLongPress(item.id)}\n          selected={props.selected === item.id}\n        >\n          <View\n            style={{\n              flexDirection: \"row\",\n              justifyContent: \"space-between\"\n            }}\n          >\n            <View style={{ flex: 0.9 }}>\n              <Text h3 title={item.title} />\n              <Text caption title={subtitle} />\n            </View>\n            <Button icon=\"dots-horizontal\" onPress={handleItemMenu} />\n          </View>\n        </Card>\n      );\n    },\n    [handleItemMenu, handleItemPress, handleLongPress, props.selected]\n  );\n\n  return (\n    <>\n      <FlatList\n        keyExtractor={item => item.id}\n        data={props.questionnaires}\n        extraData={props.selected}\n        renderItem={renderItem}\n      />\n      <Button\n        icon=\"plus\"\n        fab\n        contained\n        right\n        dropShadow\n        onPress={handleCreate}\n      />\n      {actionSheet && \n        <Dialog title=\"hello\" onBackgroundPress={handleActionSheetClose} />\n      }\n    </>\n  );\n};\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  questionnaires: getQuestionnaireArray(state),\n  selected: state.questionnaires.selected\n});\n\nconst mapDispatchToProps: DispatchProps = {\n  createQuestionnaire,\n  removeQuestionnaire,\n  selectQuestionnaire,\n  updateQuestionnaire\n};\n\nexport const Questionnaires = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Container);\n","import React from \"react\";\nimport { Dimensions, FlatList, View } from \"react-native\";\nimport { connect } from \"react-redux\";\nimport { Button, Screen, Text } from \"../../../../components\";\nimport { NavigationScreen, navigate } from \"../../../../models\";\nimport { Questionnaires } from \"./screens/Questionnaires\";\n\ninterface DispatchProps {\n  navigate: typeof navigate;\n}\n\ntype Props = DispatchProps;\n\nclass Container extends React.PureComponent<Props> {\n  private readonly data = [\n    {\n      choices: [\n        {\n          key: \"1\",\n          selected: false,\n          title: \"individual\"\n        },\n        {\n          key: \"2\",\n          selected: false,\n          title: \"couple\"\n        },\n        {\n          key: \"3\",\n          selected: false,\n          title: \"teen\"\n        }\n      ],\n      key: \"1\",\n      next: \"2\",\n      title: \"What type of counseling are you looking for\",\n      type: \"radio\"\n    },\n    { key: \"2\", title: \"2\" },\n    { key: \"3\", title: \"3\" },\n    { key: \"4\", title: \"4\" },\n    { key: \"5\", title: \"5\" }\n  ];\n  private output: any = {};\n  private readonly width = Dimensions.get(\"window\").width;\n  private tableView: any;\n  private currentIndex = 0;\n\n  public onViewableItemsChanged = ({ viewableItems }: any) => {\n    this.currentIndex = viewableItems[0].index || 0;\n  };\n\n  public onProgress = (direction = 1) => {\n    const index = this.currentIndex + direction;\n    if (index < 0) {\n      return;\n    }\n    if (index >= this.data.length) {\n      this.onFinish();\n      return;\n    }\n    this.tableView.scrollToIndex({\n      animated: true,\n      index\n    });\n  };\n\n  public onSelection = (item: any, choice: any) => {\n    this.output = {\n      ...this.output,\n      [item.key]: {\n        ...this.output[item.key],\n        [choice.key]: true\n      }\n    };\n\n    // this.onProgress();\n  };\n\n  public onFinish = () => undefined;\n\n  setRef = (ref: any) => {\n    this.tableView = ref;\n  };\n\n  renderItem = ({ item }: { item: any }) => {\n    let items: any = <View style={{ flex: 1 }} />;\n\n    if (item.choices) {\n      items = \n        <View style={{ flex: 1 }}>\n          {item.choices.map((choice: any) => {\n            return (\n              <Button\n                key={choice.title}\n                title={choice.title}\n                onPress={() => {\n                  this.onSelection(item, choice);\n                }}\n              />\n            );\n          })}\n        </View>\n      ;\n    }\n\n    return (\n      <View style={{ width: this.width }}>\n        <Text title={item.title} />\n        {items}\n        <View\n          style={{\n            flexDirection: \"row\",\n            justifyContent: \"space-around\"\n          }}\n        >\n          <Button title=\"prev\" onPress={() => this.onProgress(-1)} />\n          <Button title=\"next\" onPress={() => this.onProgress(1)} />\n          <Button title=\"next2\" onPress={() => this.onProgress(2)} />\n        </View>\n      </View>\n    );\n  };\n\n  public render() {\n    return (\n      <Screen onLeftPress={this.nav(\"debug\")}>\n        <FlatList\n          scrollEnabled={false}\n          ref={this.setRef}\n          removeClippedSubviews\n          showsHorizontalScrollIndicator={false}\n          showsVerticalScrollIndicator={false}\n          onViewableItemsChanged={this.onViewableItemsChanged}\n          viewabilityConfig={{\n            itemVisiblePercentThreshold: 50\n          }}\n          horizontal\n          pagingEnabled\n          data={this.data}\n          renderItem={this.renderItem}\n        />\n        <Questionnaires />\n      </Screen>\n    );\n  }\n  private nav = (to: NavigationScreen) => () => this.props.navigate(to);\n}\n\nconst mapDispatchToProps: DispatchProps = { navigate };\n\nexport default connect(null, mapDispatchToProps)(Container);\n"],"sourceRoot":""}