{"version":3,"sources":["apps/Focus/ListSection.tsx","apps/Focus/ListItem.tsx","apps/Focus/List.tsx","apps/Focus/Home.tsx","apps/Focus/index.tsx"],"names":["ListSection","memo","item","color","useColor","View","style","alignItems","borderTopColor","secondary","borderTopWidth","flexDirection","justifyContent","marginTop","Theme","padding","p02","title","dayOfMonth","type","month","dayOfWeek","ListItem","showSection","onItemPress","currentItem","future","id","Date","now","iconColor","success","action","onPress","useCallback","borderColor","primary","background","borderLeftWidth","p01","flex","disabled","height","p10","paddingHorizontal","p04","paddingVertical","width","p20","name","size","paddingRight","hour","zone","ellipsizeMode","numberOfLines","itemHeight","initialIndex","dayjs","startOf","add","diff","getItemLayout","_","index","length","offset","getCurrentItem","currentTime","before","setHours","getHours","after","getFirstItemOfDay","items","keyExtractor","String","List","onEndReached","onEndReachedThreshold","useState","loading","setLoading","styles","StyleSheet","create","list","opacity","position","onLoad","setTimeout","useEffect","renderItem","FlatList","data","initialNumToRender","initialScrollIndex","inverted","ActivityIndicator","editItem","visible","Home","modalItemEdit","setModalItemEdit","modalProfile","modalLogin","setItems","goBack","useNavigation","generateMoreItems","group","i","lastItem","valueOf","next","subtract","push","Math","random","format","handleItemPress","handleLoad","handleModalEditBackgroundPress","state","navBack","border","onLeftPress","duration","onBackgroundPress","testID","noHeader","headerShown","Stack","createStackNavigator","Navigator","screenOptions","Screen","component"],"mappings":"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","file":"static/js/10.76e32d97.chunk.js","sourcesContent":["import React, {memo} from 'react';\nimport {View} from 'react-native';\nimport {Text} from '../../components';\nimport {Theme} from '../../utils';\nimport {useColor} from '../../hooks';\nimport {Item} from './List';\n\ninterface Props {\n  item: Item;\n}\n\nexport const ListSection = memo(function ListSection({item}: Props) {\n  const color = useColor();\n  return (\n    <View\n      style={{\n        alignItems: 'center',\n        borderTopColor: color.secondary,\n        borderTopWidth: 1,\n        flexDirection: 'row',\n        justifyContent: 'center',\n        marginTop: Theme.padding.p02,\n        padding: Theme.padding.p02,\n      }}>\n      <Text title={item.dayOfMonth} type=\"h3\" />\n      <Text title={` ${item.month}, ${item.dayOfWeek}`} type=\"overline\" />\n    </View>\n  );\n});\n","import React, {memo, useCallback} from 'react';\nimport {View} from 'react-native';\nimport {Icon, Text, TouchableOpacity} from '../../components';\nimport {Theme} from '../../utils';\nimport {useColor} from '../../hooks';\nimport {Item} from './List';\nimport {ListSection} from './ListSection';\n\ninterface Props {\n  showSection: boolean;\n  item: Item;\n  currentItem: boolean;\n  onItemPress(item: Item): void;\n}\n\nexport const ListItem = memo(function ListItem({\n  showSection,\n  item,\n  onItemPress,\n  currentItem,\n}: Props) {\n  const color = useColor();\n  const future = item.id > Date.now();\n  const iconColor = future ? color.secondary : color.success;\n  const title = currentItem ? 'current' : future ? 'future' : item.action;\n\n  const onPress = useCallback(() => onItemPress(item), [item, onItemPress]);\n\n  return (\n    <View\n      style={{\n        borderColor: currentItem ? color.primary : color.background,\n        borderLeftWidth: Theme.padding.p01,\n        flex: 1,\n      }}>\n      <TouchableOpacity\n        disabled={future}\n        onPress={onPress}\n        style={{\n          flex: 1,\n          flexDirection: 'row',\n          height: Theme.padding.p10,\n          paddingHorizontal: Theme.padding.p04,\n          paddingVertical: Theme.padding.p02,\n        }}>\n        <View\n          style={{\n            flexDirection: 'row',\n            width: Theme.padding.p20,\n          }}>\n          <Icon\n            color={iconColor}\n            name={future ? 'cancel' : 'checkbox-blank-circle'}\n            size={14}\n            style={{paddingRight: Theme.padding.p01}}\n          />\n          <Text title={`${item.hour} ${item.zone}`} />\n        </View>\n        <Text\n          ellipsizeMode=\"tail\"\n          numberOfLines={1}\n          style={{\n            color: color.secondary,\n            flex: 1,\n          }}\n          title={title}\n          type=\"body1\"\n        />\n      </TouchableOpacity>\n      {showSection && <ListSection item={item} />}\n    </View>\n  );\n});\n","import dayjs from 'dayjs';\nimport React, {memo, useCallback, useEffect, useState} from 'react';\nimport {ActivityIndicator, FlatList, StyleSheet} from 'react-native';\nimport {Theme} from '../../utils';\nimport {ListItem} from './ListItem';\n\nexport interface Item {\n  action: string;\n  dayOfMonth: string;\n  dayOfWeek: string;\n  hour: string;\n  id: number;\n  month: string;\n  zone: string;\n}\n\ninterface Props {\n  items: Item[];\n  onEndReached(): void;\n  onEndReachedThreshold: number;\n  onItemPress(item: Item): void;\n}\n\nconst itemHeight = Theme.padding.p10;\n\nconst initialIndex =\n  dayjs().startOf('day').add(2, 'day').diff(dayjs(), 'hour') - 4;\n\nconst getItemLayout = (_: Item[] | null | undefined, index: number) => ({\n  length: itemHeight,\n  offset: itemHeight * index,\n  index,\n});\n\nconst getCurrentItem = (item: Item): boolean => {\n  const currentTime = new Date();\n  const before = currentTime.setHours(currentTime.getHours() - 1);\n  const after = currentTime.setHours(currentTime.getHours() + 1);\n  const between = item.id > before && item.id < after;\n  return between;\n};\n\nconst getFirstItemOfDay = (index: number, item: Item, items: Item[]) =>\n  index < 1 ? false : item.dayOfMonth !== items[index - 1].dayOfMonth;\n\nconst keyExtractor = (item: Item) => String(item.id);\n\nexport const List = memo(\n  ({items, onItemPress, onEndReached, onEndReachedThreshold}: Props) => {\n    const [loading, setLoading] = useState(true);\n    const styles = StyleSheet.create({\n      list: {\n        opacity: loading ? 0 : 1,\n      },\n      loading: {\n        height: '100%',\n        position: 'absolute',\n        width: '100%',\n      },\n    });\n\n    const onLoad = useCallback(() => {\n      setTimeout(() => {\n        setLoading(false);\n      }, 1000);\n    }, []);\n\n    useEffect(() => onLoad(), [onLoad]);\n\n    const renderItem = useCallback(\n      ({item, index}) => (\n        <ListItem\n          currentItem={getCurrentItem(item)}\n          item={item}\n          onItemPress={onItemPress}\n          showSection={getFirstItemOfDay(index, item, items)}\n        />\n      ),\n      [items, onItemPress],\n    );\n\n    return (\n      <>\n        <FlatList\n          data={items}\n          getItemLayout={getItemLayout}\n          initialNumToRender={0}\n          initialScrollIndex={initialIndex}\n          inverted\n          keyExtractor={keyExtractor}\n          onEndReached={onEndReached}\n          onEndReachedThreshold={onEndReachedThreshold}\n          renderItem={renderItem}\n          style={styles.list}\n        />\n        {loading && <ActivityIndicator size=\"large\" style={styles.loading} />}\n      </>\n    );\n  },\n);\n","import {useNavigation} from '@react-navigation/native';\nimport dayjs from 'dayjs';\nimport React, {memo, useCallback, useEffect, useState} from 'react';\nimport {Dialog, Screen} from '../../components';\nimport {Item, List} from './List';\n\n// TODO: flatlist on web\n// TODO: rename item.action to item.title\n// TODO: fix refresh scroll jitter\n// TODO: re-rendering everything because dialog is same level as list\n\nconst infiniteScrollRegeneration = 100;\nconst editItem: {visible: boolean; item: Item | null} = {\n  visible: false,\n  item: null,\n};\n\nexport const Home = memo(function Home() {\n  const [modalItemEdit, setModalItemEdit] = useState(editItem);\n  const [modalProfile] = useState(false);\n  const [modalLogin] = useState(false);\n  const [items, setItems] = useState<Item[]>([]);\n  const {goBack} = useNavigation();\n\n  const generateMoreItems = useCallback(() => {\n    const group = [...items];\n    for (let i = 0; i < infiniteScrollRegeneration; i++) {\n      const lastItem =\n        group.length === 0\n          ? dayjs().startOf('day').add(2, 'day').valueOf()\n          : group[group.length - 1].id;\n      const next = dayjs(lastItem).subtract(1, 'hour');\n      const id = next.valueOf();\n      group.push({\n        action: String(Math.random()) + String(Math.random()),\n        dayOfMonth: next.format('D'),\n        dayOfWeek: next.format('ddd'),\n        hour: next.format('h'),\n        id,\n        month: next.format('MMM'),\n        zone: next.format('a'),\n      });\n    }\n    setItems(group);\n  }, [items]);\n\n  const handleItemPress = useCallback((item: Item) => {\n    setModalItemEdit({visible: true, item});\n  }, []);\n\n  const handleLoad = useCallback(() => {\n    if (items.length > 0) {\n      return;\n    }\n    generateMoreItems();\n  }, [generateMoreItems, items.length]);\n\n  const handleModalEditBackgroundPress = useCallback(() => {\n    setModalItemEdit((state) => ({...state, visible: false}));\n  }, []);\n\n  useEffect(() => handleLoad(), [handleLoad]);\n\n  const navBack = useCallback(() => goBack(), [goBack]);\n  return (\n    <>\n      <Screen border onLeftPress={navBack} title=\"Focus\">\n        {items.length > 0 && (\n          <List\n            items={items}\n            onEndReached={generateMoreItems}\n            onEndReachedThreshold={0.5}\n            onItemPress={handleItemPress}\n          />\n        )}\n      </Screen>\n      {modalItemEdit.visible && (\n        <Dialog\n          duration={2000}\n          onBackgroundPress={handleModalEditBackgroundPress}\n          testID=\"editItem\"\n          title={modalItemEdit.item ? modalItemEdit.item.action : 'empty'}\n        />\n      )}\n      {modalProfile && (\n        <Dialog\n          onBackgroundPress={handleModalEditBackgroundPress}\n          testID=\"editItem\"\n          title=\"hello\"\n        />\n      )}\n      {modalLogin && (\n        <Dialog\n          onBackgroundPress={handleModalEditBackgroundPress}\n          testID=\"editItem\"\n          title=\"hello\"\n        />\n      )}\n    </>\n  );\n});\n","import React, {memo} from 'react';\nimport {createStackNavigator} from '@react-navigation/stack';\nimport {Home} from './Home';\n\nconst noHeader = {headerShown: false};\nconst Stack = createStackNavigator();\n\nexport default memo(function Focus() {\n  return (\n    <Stack.Navigator screenOptions={noHeader}>\n      <Stack.Screen component={Home} name=\"home\" />\n    </Stack.Navigator>\n  );\n});\n"],"sourceRoot":""}