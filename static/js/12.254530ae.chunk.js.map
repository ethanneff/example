{"version":3,"sources":["apps/Complete/configs.tsx","apps/Complete/components/TextInputWithIcons.tsx","apps/Complete/components/AddButton.tsx","apps/Complete/components/AddItem.tsx","apps/Complete/components/AddList.tsx","apps/Complete/components/Card.tsx","apps/Complete/components/ListHeader.tsx","apps/Complete/components/ListItem.tsx","apps/Complete/components/ListItems.tsx","apps/Complete/components/List.tsx","apps/Complete/components/Board.tsx","apps/Complete/components/DeleteModal.tsx","apps/Complete/components/ItemDetailHeader.tsx","apps/Complete/components/ItemContext.tsx","apps/Complete/components/ItemEdit.tsx","apps/Complete/screens/Account/factory.ts","apps/Complete/screens/Account/index.tsx","apps/Complete/screens/Capture/index.tsx","apps/Complete/screens/ItemDetail/index.tsx","apps/Complete/screens/Landing/index.tsx","apps/Complete/screens/ListDetail/index.tsx","apps/Complete/screens/Project/index.tsx","apps/Complete/screens/Projects/index.tsx","apps/Complete/screens/Reflect/Graph.tsx","apps/Complete/screens/Reflect/index.tsx","apps/Complete/index.tsx"],"names":["config","borderRadius","Theme","padding","p02","p04","alert","width","height","TextInputWithIcons","memo","value","multiline","maxIconHeight","p06","placeholder","backgroundColor","editable","pointerEvents","focusOnLoad","icons","type","onSubmit","blurOnSubmit","onFocus","notRequired","numberOfLines","onBlur","onRef","color","useColor","bgColor","background","useState","text","setText","showControls","setShowControls","onTextChange","useCallback","change","onFocusInternal","onSubmitInternal","result","trim","length","onBlurInternal","onIconPressInternal","callback","containerHeight","setContainerHeight","iconHeight","clampIconHeight","onLayout","e","nativeEvent","layout","onIconParentPress","preventDefault","useEffect","View","style","flex","flexDirection","alignItems","onChangeText","onSubmitEditing","returnKeyType","onPress","map","icon","hidden","focus","disabled","required","name","padded","size","AddButton","title","textInputRef","useRef","showInput","setShowInput","onAddItemPress","p","onItemTitleClose","onItemTitleSubmit","current","primary","p12","justifyContent","center","AddItem","listId","dispatch","useRootDispatch","userId","useRootSelector","s","completeUser","id","Error","itemId","v4","date","Date","now","item","active","createdAt","updatedAt","createItem","updateListAddItem","AddList","boardId","list","default","items","createList","updateBoardAddList","Card","children","margin","marginRight","marginBottom","ListHeader","navigate","useNavigation","completeList","onSave","updateListTitle","Keyboard","dismiss","onDetail","setActiveBoard","setActiveList","ListItem","completeItem","updateItem","onItemNav","childBoardId","onItemDetails","setActiveItem","onItemLongPress","onItemPress","onLongPress","surface","ListItems","maxHeight","listItems","cardsRef","cardsLength","onKeyExtractor","onCardSizeChange","scrollToEnd","onRenderItem","FlatList","data","keyExtractor","keyboardShouldPersistTaps","onContentSizeChange","ref","renderItem","showsVerticalScrollIndicator","List","orientation","listWidth","listMaxHeight","Board","listSize","board","completeBoard","getItemId","getItemLayout","_","index","offset","renderAddList","renderList","ListFooterComponent","contentContainerStyle","lists","decelerationRate","horizontal","showsHorizontalScrollIndicator","snapToAlignment","snapToInterval","DeleteModal","onCancel","onDelete","onBackgroundPress","showOverlay","widthPercent","paddingBottom","ItemDetailHeader","emphasis","ItemContext","ItemEdit","description","onClose","defaults","Account","goBack","navBack","onLogin","inboxItems","inboxList","inboxBoard","homeItems","homeLists","homeBoard","projectItems","projectsList","listsItems","listsList","categoryBoard","user","boards","getDefaultUserTemplate","createBoard","createUser","onLogout","removeUser","onSetActive","setActiveUser","onNavToAdmin","initialState","container","button","Capture","keyboardHeight","state","device","dimensions","setDimensions","android","Platform","OS","listHeight","getInboxBoardId","noListItems","onOrganize","key","event","navToAccount","onRightPress","rightIcon","render","disable","ItemDetail","deleteModal","setDeleteModal","onItemDelete","removeItem","updateListRemoveItem","onItemSubmit","onDeletePress","onDeleteClose","Landing","navPortfolioLogin","slides","info","warning","success","brand","ListDetail","onListDelete","removeList","updateBoardRemoveList","onListSubmit","updateList","Project","screenWidth","getSmallestDimension","setContainer","onLeftPress","Projects","getCategoryBoardId","listIds","getDomain","domain","Math","min","max","Graph","scaleX","scaleTime","d","range","scaleY","scaleLinear","strokeWidth","shape","x","y","curve","StyleSheet","absoluteFill","x1","x2","y1","y2","stopColor","fill","stroke","Title","getTime","Reflect","Dimensions","get","noHeader","headerShown","RootTab","createBottomTabNavigator","RootStack","createStackNavigator","ProjectsStack","tabIcons","capture","focused","unfocused","reflect","Focus","Navigator","screenOptions","Screen","component","Tabs","tabBarOptions","keyboardHidesTabBar","activeTintColor","inactiveTintColor","secondary","showLabel","route","tabBarIcon","iconColor","Main","mode","rootMode","rootScreenOptions","Notification","Modal"],"mappings":"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","file":"static/js/12.254530ae.chunk.js","sourcesContent":["import {Theme} from '../../utils';\n\nexport const config = {\n  borderRadius: Theme.padding.p02,\n  padding: Theme.padding.p04,\n  alert: {\n    width: 0.8,\n    height: 0.6,\n  },\n};\n","import React, {\n  memo,\n  MutableRefObject,\n  useCallback,\n  useEffect,\n  useState,\n} from 'react';\nimport {LayoutChangeEvent, TextInput as Original, View} from 'react-native';\nimport {Icon, TextInput} from '../../../components';\nimport {PointerEvents} from '../../../components/TextInput/types';\nimport {TouchableWithoutFeedback} from '../../../conversions';\nimport {useColor} from '../../../hooks';\nimport {FontType, Theme} from '../../../utils';\n\ntype Icon = {\n  name: string;\n  onPress: (text: string) => void;\n  hidden?: boolean;\n  color?: string;\n  focus?: boolean;\n  required?: boolean;\n};\n\ntype TextInputWithIconsProps = {\n  value: string;\n  placeholder: string;\n  icons: Icon[];\n  onRef?: MutableRefObject<Original | null>;\n  onSubmit: (text: string) => void;\n  backgroundColor?: string;\n  pointerEvents?: PointerEvents;\n  type?: FontType;\n  focusOnLoad?: boolean;\n  onBlur?: () => void;\n  onFocus?: () => void;\n  blurOnSubmit?: boolean;\n  multiline?: boolean;\n  maxIconHeight?: number;\n  editable?: boolean;\n  notRequired?: boolean;\n  numberOfLines?: number;\n};\n\nexport const TextInputWithIcons = memo(function TextInputWithIcons({\n  value,\n  multiline,\n  maxIconHeight = Theme.padding.p06,\n  placeholder,\n  backgroundColor,\n  editable,\n  pointerEvents,\n  focusOnLoad,\n  icons,\n  type,\n  onSubmit,\n  blurOnSubmit,\n  onFocus,\n  notRequired,\n  numberOfLines,\n  onBlur,\n  onRef,\n}: TextInputWithIconsProps) {\n  const color = useColor();\n  const bgColor = backgroundColor || color.background;\n  const [text, setText] = useState(value);\n  const [showControls, setShowControls] = useState(false);\n\n  const onTextChange = useCallback((change) => {\n    setText(change);\n  }, []);\n\n  const onFocusInternal = useCallback(() => {\n    setShowControls(true);\n    if (onFocus) onFocus();\n  }, [onFocus]);\n\n  const onSubmitInternal = useCallback(() => {\n    const result = text.trim();\n    if (!notRequired && result.length === 0) return;\n    onSubmit(result);\n    if (value === '') setText('');\n  }, [notRequired, onSubmit, text, value]);\n\n  const onBlurInternal = useCallback(() => {\n    setText(value);\n    setShowControls(false);\n    if (onBlur) onBlur();\n  }, [onBlur, value]);\n\n  const onIconPressInternal = useCallback(\n    (callback) => () => {\n      callback(text);\n      if (value === '') setText('');\n    },\n    [text, value],\n  );\n  const [containerHeight, setContainerHeight] = useState(0);\n  const iconHeight = containerHeight - Theme.padding.p04;\n  const clampIconHeight =\n    iconHeight > maxIconHeight ? maxIconHeight : iconHeight;\n\n  const onLayout = useCallback(\n    (e: LayoutChangeEvent) => {\n      if (containerHeight) return;\n      setContainerHeight(e.nativeEvent.layout.height);\n    },\n    [containerHeight],\n  );\n\n  const onIconParentPress = useCallback((e) => e.preventDefault(), []);\n\n  useEffect(() => {\n    setText(value);\n  }, [value]);\n\n  return (\n    <View\n      onLayout={onLayout}\n      style={{flex: 1, flexDirection: 'row', alignItems: 'center'}}>\n      <TextInput\n        backgroundColor={bgColor}\n        blurOnSubmit={blurOnSubmit}\n        editable={editable}\n        flex\n        focusOnLoad={focusOnLoad}\n        multiline={multiline}\n        numberOfLines={numberOfLines}\n        onBlur={onBlurInternal}\n        onChangeText={onTextChange}\n        onFocus={onFocusInternal}\n        onRef={onRef}\n        onSubmitEditing={onSubmitInternal}\n        placeholder={placeholder}\n        pointerEvents={pointerEvents}\n        returnKeyType=\"done\"\n        type={type}\n        value={text}\n      />\n      <TouchableWithoutFeedback\n        onPress={onIconParentPress}\n        style={{flexDirection: 'row'}}>\n        {icons.map((icon) =>\n          icon.hidden ||\n          (showControls && !icon.focus) ||\n          (!showControls && icon.focus) ? null : (\n            <Icon\n              color={icon.color}\n              disabled={icon.required && text.trim().length === 0}\n              key={`${icon.name}-focus`}\n              name={icon.name}\n              onPress={onIconPressInternal(icon.onPress)}\n              padded\n              size={clampIconHeight}\n            />\n          ),\n        )}\n      </TouchableWithoutFeedback>\n    </View>\n  );\n});\n","import React, {memo, useCallback, useRef, useState} from 'react';\nimport {TextInput as OriginalTextInput, View} from 'react-native';\nimport {Button} from '../../../components';\nimport {useColor} from '../../../hooks';\nimport {Theme} from '../../../utils';\nimport {config} from '../configs';\nimport {TextInputWithIcons} from './TextInputWithIcons';\n\ntype AddButtonProps = {\n  width?: number;\n  placeholder: string;\n  title: string;\n  onSubmit: (value: string) => void;\n};\n\nexport const AddButton = memo(function AddButton({\n  width,\n  placeholder,\n  title,\n  onSubmit,\n}: AddButtonProps) {\n  const color = useColor();\n  const textInputRef = useRef<OriginalTextInput | null>(null);\n  const [showInput, setShowInput] = useState(false);\n  const onAddItemPress = useCallback(() => setShowInput((p) => !p), []);\n\n  const onItemTitleClose = useCallback(() => {\n    setShowInput(false);\n  }, []);\n\n  const onItemTitleSubmit = useCallback(\n    (text) => {\n      onSubmit(text);\n      textInputRef.current?.focus();\n    },\n    [onSubmit],\n  );\n\n  const onBlur = useCallback(() => {\n    setShowInput(false);\n  }, []);\n\n  const icons = [\n    {name: 'close', onPress: onItemTitleClose, focus: true},\n    {\n      name: 'send',\n      onPress: onItemTitleSubmit,\n      color: color.primary,\n      focus: true,\n      required: true,\n    },\n  ];\n\n  return (\n    <View\n      style={{\n        width,\n        height: Theme.padding.p12,\n        borderRadius: config.borderRadius,\n        backgroundColor: color.background,\n        justifyContent: 'center',\n      }}>\n      {showInput ? (\n        <TextInputWithIcons\n          blurOnSubmit={false}\n          focusOnLoad\n          icons={icons}\n          onBlur={onBlur}\n          onSubmit={onItemTitleSubmit}\n          placeholder={placeholder}\n          value=\"\"\n        />\n      ) : (\n        <Button center color=\"primary\" onPress={onAddItemPress} title={title} />\n      )}\n    </View>\n  );\n});\n","import React, {memo, useCallback} from 'react';\nimport {v4} from 'uuid';\nimport {useRootDispatch, useRootSelector} from '../../../utils';\nimport {createItem, Item, updateListAddItem} from '../models';\nimport {AddButton} from './AddButton';\n\ntype AddItemProps = {\n  listId: string;\n  placeholder: string;\n  title: string;\n};\n\nexport const AddItem = memo(function AddItem({\n  placeholder,\n  title,\n  listId,\n}: AddItemProps) {\n  const dispatch = useRootDispatch();\n  const userId = useRootSelector((s) => s.completeUser?.id);\n  if (!userId) throw new Error('missing user id on add item');\n  const onSubmit = useCallback(\n    (value: string) => {\n      const itemId = v4();\n      const date = Date.now();\n      const item: Item = {\n        id: itemId,\n        userId,\n        active: true,\n        title: value,\n        createdAt: date,\n        updatedAt: date,\n      };\n      dispatch(createItem(item));\n      dispatch(updateListAddItem({listId, itemId}));\n    },\n    [dispatch, listId, userId],\n  );\n\n  return (\n    <AddButton onSubmit={onSubmit} placeholder={placeholder} title={title} />\n  );\n});\n","import React, {memo, useCallback} from 'react';\nimport {v4} from 'uuid';\nimport {useRootDispatch, useRootSelector} from '../../../utils';\nimport {createList, List, updateBoardAddList} from '../models';\nimport {AddButton} from './AddButton';\n\ntype AddListProps = {\n  boardId: string;\n  placeholder: string;\n  title: string;\n  width: number;\n};\n\nexport const AddList = memo(function AddList({\n  placeholder,\n  title,\n  boardId,\n  width,\n}: AddListProps) {\n  const dispatch = useRootDispatch();\n  const userId = useRootSelector((s) => s.completeUser?.id);\n  if (!userId) throw new Error('missing user id on add list');\n  const onSubmit = useCallback(\n    (value: string) => {\n      const listId = v4();\n      const date = Date.now();\n      const list: List = {\n        id: listId,\n        userId,\n        default: false,\n        active: true,\n        title: value,\n        createdAt: date,\n        updatedAt: date,\n        items: [],\n      };\n      dispatch(createList(list));\n      dispatch(updateBoardAddList({boardId, listId}));\n    },\n    [boardId, dispatch, userId],\n  );\n\n  return (\n    <AddButton\n      onSubmit={onSubmit}\n      placeholder={placeholder}\n      title={title}\n      width={width}\n    />\n  );\n});\n","import React, {memo, ReactElement} from 'react';\nimport {LayoutChangeEvent, View} from 'react-native';\nimport {useColor} from '../../../hooks';\nimport {config} from '../configs';\n\n// TODO: combine card components with global card\n\ntype CardProps = {\n  onLayout?: (event: LayoutChangeEvent) => void;\n  children: ReactElement | ReactElement[];\n  margin?: 'bottom' | 'right' | 'none';\n  width?: number;\n  flex?: boolean;\n};\n\nexport const Card = memo(function Card({\n  children,\n  onLayout,\n  margin = 'none',\n  width,\n  flex,\n}: CardProps) {\n  const color = useColor();\n  return (\n    <View\n      onLayout={onLayout}\n      style={{\n        flex: flex ? 1 : 0,\n        width,\n        borderRadius: config.borderRadius,\n        backgroundColor: color.background,\n        padding: config.padding / 2,\n        marginRight: margin === 'right' ? config.padding : 0,\n        marginBottom: margin === 'bottom' ? config.padding : 0,\n      }}>\n      {children}\n    </View>\n  );\n});\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback} from 'react';\nimport {Keyboard, View} from 'react-native';\nimport {useColor} from '../../../hooks';\nimport {useRootDispatch, useRootSelector} from '../../../utils';\nimport {setActiveBoard, setActiveList, updateListTitle} from '../models';\nimport {TextInputWithIcons} from './TextInputWithIcons';\n\ntype ListHeaderProps = {\n  listId: string;\n  boardId: string;\n};\n\nexport const ListHeader = memo(function ListHeader({\n  listId,\n  boardId,\n}: ListHeaderProps) {\n  const dispatch = useRootDispatch();\n  const {navigate} = useNavigation();\n  const color = useColor();\n  const list = useRootSelector((s) => s.completeList.items[listId]);\n\n  const onSave = useCallback(\n    (title) => {\n      dispatch(updateListTitle({listId, title}));\n      Keyboard.dismiss();\n    },\n    [dispatch, listId],\n  );\n\n  const onDetail = useCallback(() => {\n    dispatch(setActiveBoard(boardId));\n    dispatch(setActiveList(listId));\n    navigate('list-detail');\n  }, [boardId, dispatch, listId, navigate]);\n\n  const onClose = useCallback(() => Keyboard.dismiss(), []);\n\n  const icons = [\n    {name: 'close', onPress: onClose, focus: true},\n    {\n      name: 'send',\n      onPress: onSave,\n      color: color.primary,\n      focus: true,\n      required: true,\n    },\n    {name: 'dots-horizontal', onPress: onDetail},\n  ];\n\n  return (\n    <View\n      style={{\n        flexDirection: 'row',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n      }}>\n      <TextInputWithIcons\n        editable={!list.default}\n        icons={icons}\n        onSubmit={onSave}\n        placeholder=\"List title...\"\n        type=\"h4\"\n        value={list.title}\n      />\n    </View>\n  );\n});\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback, useRef} from 'react';\nimport {Keyboard, TextInput as OriginalTextInput} from 'react-native';\nimport {TouchableWithoutFeedback} from '../../../conversions';\nimport {useColor} from '../../../hooks';\nimport {useRootDispatch, useRootSelector} from '../../../utils';\nimport {config} from '../configs';\nimport {\n  setActiveBoard,\n  setActiveItem,\n  setActiveList,\n  updateItem,\n} from '../models';\nimport {TextInputWithIcons} from './TextInputWithIcons';\n\ntype ListItemProps = {\n  itemId: string;\n  listId: string;\n};\n\nexport const ListItem = memo(function ListItem({\n  itemId,\n  listId,\n}: ListItemProps) {\n  const item = useRootSelector((s) => s.completeItem.items[itemId]);\n  const textInputRef = useRef<OriginalTextInput | null>(null);\n  const dispatch = useRootDispatch();\n  const {navigate} = useNavigation();\n  const color = useColor();\n\n  const onItemTitleClose = useCallback(() => {\n    Keyboard.dismiss();\n  }, []);\n\n  const onItemTitleSubmit = useCallback(\n    (title: string) => {\n      dispatch(updateItem({...item, title}));\n      Keyboard.dismiss();\n    },\n    [dispatch, item],\n  );\n\n  const onItemNav = useCallback(() => {\n    if (!item.childBoardId)\n      throw new Error('item does not have a board to navigate to');\n    dispatch(setActiveBoard(item.childBoardId));\n    navigate('board');\n  }, [dispatch, item.childBoardId, navigate]);\n\n  const onItemDetails = useCallback(() => {\n    dispatch(setActiveItem(itemId));\n    dispatch(setActiveList(listId));\n    navigate('item-detail');\n  }, [dispatch, itemId, listId, navigate]);\n\n  const onItemLongPress = useCallback(() => undefined, []);\n\n  const onItemPress = useCallback(() => {\n    textInputRef.current?.focus();\n  }, []);\n\n  const icons = [\n    {name: 'close', onPress: onItemTitleClose, focus: true},\n    {\n      name: 'send',\n      onPress: onItemTitleSubmit,\n      color: color.primary,\n      focus: true,\n      required: true,\n    },\n    {name: 'dots-horizontal', onPress: onItemDetails},\n    {name: 'chevron-right', onPress: onItemNav, hidden: !item.childBoardId},\n  ];\n\n  return (\n    <TouchableWithoutFeedback\n      key={item.id}\n      onLongPress={onItemLongPress}\n      onPress={onItemPress}\n      style={{\n        flex: 1,\n        borderRadius: config.borderRadius,\n        margin: config.padding / 2,\n        backgroundColor: color.surface,\n        flexDirection: 'row',\n      }}>\n      <TextInputWithIcons\n        backgroundColor={color.surface}\n        icons={icons}\n        onRef={textInputRef}\n        onSubmit={onItemTitleSubmit}\n        placeholder=\"Item name...\"\n        pointerEvents=\"none\"\n        value={item.title}\n      />\n    </TouchableWithoutFeedback>\n  );\n});\n","import React, {memo, useCallback, useRef} from 'react';\nimport {FlatList, ListRenderItem} from 'react-native';\nimport {useRootSelector} from '../../../utils';\nimport {ListItem} from './ListItem';\n\ntype ListItemsProps = {\n  listId: string;\n  maxHeight?: number;\n};\n\nexport const ListItems = memo(function ListItems({\n  listId,\n  maxHeight,\n}: ListItemsProps) {\n  const listItems = useRootSelector((s) => s.completeList.items[listId].items);\n  const cardsRef = useRef<FlatList | null>(null);\n  const cardsLength = useRef(listItems.length);\n\n  const onKeyExtractor = useCallback((item) => item, []);\n\n  const onCardSizeChange = useCallback(() => {\n    if (listItems.length > cardsLength.current) {\n      cardsRef.current?.scrollToEnd();\n      cardsLength.current = listItems.length;\n    }\n  }, [listItems.length]);\n\n  const onRenderItem: ListRenderItem<string> = useCallback(\n    ({item}) => {\n      return <ListItem itemId={item} key={item} listId={listId} />;\n    },\n    [listId],\n  );\n\n  return (\n    <FlatList\n      data={listItems}\n      keyExtractor={onKeyExtractor}\n      keyboardShouldPersistTaps=\"handled\"\n      onContentSizeChange={onCardSizeChange}\n      ref={cardsRef}\n      renderItem={onRenderItem}\n      showsVerticalScrollIndicator={false}\n      style={{maxHeight}}\n    />\n  );\n});\n","import React, {memo} from 'react';\nimport {View} from 'react-native';\nimport {AddItem} from './AddItem';\nimport {Card} from './Card';\nimport {ListHeader} from './ListHeader';\nimport {ListItems} from './ListItems';\n\ntype ListProps = {\n  listWidth?: number;\n  listId: string;\n  boardId: string;\n  listMaxHeight: number;\n  orientation?: 'vertical' | 'horizontal';\n  title: string;\n  placeholder: string;\n};\n\nexport const List = memo(function List({\n  listId,\n  orientation,\n  listWidth,\n  listMaxHeight,\n  title,\n  placeholder,\n  boardId,\n}: ListProps) {\n  const margin = orientation === 'horizontal' ? 'right' : 'bottom';\n  return (\n    <View>\n      <Card margin={margin} width={listWidth}>\n        <ListHeader boardId={boardId} listId={listId} />\n        <ListItems listId={listId} maxHeight={listMaxHeight} />\n        <AddItem listId={listId} placeholder={placeholder} title={title} />\n      </Card>\n    </View>\n  );\n});\n","import React, {memo, useCallback} from 'react';\nimport {FlatList} from 'react-native';\nimport {useRootSelector} from '../../../utils';\nimport {config} from '../configs';\nimport {AddList} from './AddList';\nimport {List} from './List';\n\ntype BoardProps = {\n  boardId: string;\n  listMaxHeight: number;\n  listWidth: number;\n};\n\nexport const Board = memo(function Board({\n  boardId,\n  listMaxHeight,\n  listWidth,\n}: BoardProps) {\n  const listSize = listWidth + config.padding;\n  const board = useRootSelector((s) => s.completeBoard.items[boardId]);\n  const getItemId = useCallback((item) => item, []);\n\n  const getItemLayout = useCallback(\n    (_, index) => ({\n      length: listSize,\n      offset: listSize * index,\n      index,\n    }),\n    [listSize],\n  );\n\n  const renderAddList = useCallback(() => {\n    return (\n      <AddList\n        boardId={boardId}\n        placeholder=\"List title...\"\n        title=\"Add list\"\n        width={listWidth}\n      />\n    );\n  }, [boardId, listWidth]);\n\n  const renderList = useCallback(\n    ({item}) => {\n      return (\n        <List\n          boardId={boardId}\n          key={item}\n          listId={item}\n          listMaxHeight={listMaxHeight}\n          listWidth={listWidth}\n          orientation=\"horizontal\"\n          placeholder=\"Item title...\"\n          title=\"Add item\"\n        />\n      );\n    },\n    [boardId, listMaxHeight, listWidth],\n  );\n\n  return (\n    <FlatList\n      ListFooterComponent={renderAddList}\n      contentContainerStyle={{padding: config.padding}}\n      data={board.lists}\n      decelerationRate=\"fast\"\n      getItemLayout={getItemLayout}\n      horizontal\n      keyExtractor={getItemId}\n      keyboardShouldPersistTaps=\"handled\"\n      renderItem={renderList}\n      showsHorizontalScrollIndicator={false}\n      snapToAlignment=\"center\"\n      snapToInterval={listSize}\n      style={{height: '100%'}}\n    />\n  );\n});\n","import React, {memo} from 'react';\nimport {View} from 'react-native';\nimport {Button, Modal, Text} from '../../../components';\nimport {Theme} from '../../../utils';\n\ntype DeleteModalProps = {\n  onDelete: () => void;\n  onCancel: () => void;\n};\n\nexport const DeleteModal = memo(function DeleteModal({\n  onCancel,\n  onDelete,\n}: DeleteModalProps) {\n  return (\n    <Modal onBackgroundPress={onCancel} showOverlay widthPercent={0.5}>\n      <View style={{alignItems: 'center'}}>\n        <Text\n          style={{paddingBottom: Theme.padding.p02}}\n          title=\"Are you sure?\"\n          type=\"h4\"\n        />\n        <View style={{flexDirection: 'row', justifyContent: 'center'}}>\n          <Button onPress={onCancel} title=\"close\" />\n          <Button color=\"danger\" onPress={onDelete} title=\"delete\" />\n        </View>\n      </View>\n    </Modal>\n  );\n});\n","import React, {memo} from 'react';\nimport {Text} from '../../../components';\nimport {Theme} from '../../../utils';\n\ntype ItemDetailHeaderProps = {\n  title: string;\n};\n\nexport const ItemDetailHeader = memo(function ItemDetailHeader({\n  title,\n}: ItemDetailHeaderProps) {\n  return (\n    <Text\n      emphasis=\"medium\"\n      style={{padding: Theme.padding.p02}}\n      title={title}\n      type=\"overline\"\n    />\n  );\n});\n","import React, {memo} from 'react';\nimport {View} from 'react-native';\nimport {RelativeDate, Text} from '../../../components';\nimport {Theme} from '../../../utils';\nimport {Card} from './Card';\nimport {ItemDetailHeader} from './ItemDetailHeader';\n\ntype ItemContextProps = {\n  userId: string;\n  createdAt: number;\n  updatedAt: number;\n};\n\nexport const ItemContext = memo(function ItemContext({\n  userId,\n  createdAt,\n  updatedAt,\n}: ItemContextProps) {\n  return (\n    <View>\n      <Card margin=\"bottom\">\n        <ItemDetailHeader title=\"Creator\" />\n        <Text style={{padding: Theme.padding.p02}} title={userId} />\n        <ItemDetailHeader title=\"Created\" />\n        <RelativeDate date={createdAt} style={{padding: Theme.padding.p02}} />\n        <ItemDetailHeader title=\"Updated\" />\n        <RelativeDate date={updatedAt} style={{padding: Theme.padding.p02}} />\n      </Card>\n    </View>\n  );\n});\n","import React, {memo, useCallback} from 'react';\nimport {Keyboard, View} from 'react-native';\nimport {useColor} from '../../../hooks';\nimport {Card} from './Card';\nimport {ItemDetailHeader} from './ItemDetailHeader';\nimport {TextInputWithIcons} from './TextInputWithIcons';\n\ntype ItemEditProps = {\n  title: string;\n  description?: string;\n  placeholder: string;\n  onSubmit: (type: string) => (text: string) => void;\n};\n\nexport const ItemEdit = memo(function ItemEdit({\n  title,\n  description = '',\n  placeholder,\n  onSubmit,\n}: ItemEditProps) {\n  const color = useColor();\n  const onClose = useCallback(() => Keyboard.dismiss(), []);\n\n  const icons = useCallback(\n    (type: string) => [\n      {name: 'close', onPress: onClose, focus: true},\n      {\n        name: 'send',\n        onPress: onSubmit(type),\n        color: color.primary,\n        focus: true,\n        required: true,\n      },\n    ],\n    [color.primary, onClose, onSubmit],\n  );\n\n  return (\n    <View>\n      <Card margin=\"bottom\">\n        <ItemDetailHeader title=\"Title\" />\n        <TextInputWithIcons\n          icons={icons('title')}\n          onSubmit={onSubmit('title')}\n          placeholder={`${placeholder} title...`}\n          value={title}\n        />\n        <ItemDetailHeader title=\"Details\" />\n        <TextInputWithIcons\n          icons={icons('description')}\n          multiline\n          notRequired\n          onSubmit={onSubmit('description')}\n          placeholder={`${placeholder} details...`}\n          value={description || ''}\n        />\n      </Card>\n    </View>\n  );\n});\n","import {v4} from 'uuid';\nimport {Board, Item, List, User} from '../../models';\n\ntype GetDefaultUserTemplate = {\n  user: User;\n  boards: Board[];\n  lists: List[];\n  items: Item[];\n};\n\nconst date = Date.now();\nconst userId = v4();\nconst defaults = () => ({\n  id: v4(),\n  userId,\n  active: true,\n  createdAt: date,\n  updatedAt: date,\n});\n\nexport const getDefaultUserTemplate = (): GetDefaultUserTemplate => {\n  // inbox\n  const inboxItems: Item[] = [\n    {...defaults(), title: 'do dishes'},\n    {...defaults(), title: 'schedule meeting with Jim'},\n    {...defaults(), title: 'run 4 miles'},\n    {...defaults(), title: 'change oil'},\n    {...defaults(), title: 'what is the best mediation'},\n    {...defaults(), title: 'record Kelly birthday on Sep 22'},\n    {...defaults(), title: 'drink water'},\n    {...defaults(), title: 'intensity + focus = deep work'},\n    {...defaults(), title: 'put $20 in phone'},\n    {...defaults(), title: 'clear emails'},\n  ];\n  const inboxList: List = {\n    ...defaults(),\n    default: true,\n    title: 'Inbox',\n    items: inboxItems.map((item) => item.id),\n  };\n  const inboxBoard: Board = {\n    ...defaults(),\n    title: 'Inbox',\n    lists: [inboxList.id],\n  };\n\n  // sub category\n  const homeItems: Item[] = [\n    {...defaults(), title: 'clean desk'},\n    {...defaults(), title: 'clean room'},\n    {...defaults(), title: 'walk dog'},\n    {...defaults(), title: 'brush teeth'},\n    {...defaults(), title: 'do laundry'},\n    {...defaults(), title: 'fix sink'},\n  ];\n  const homeLists: List[] = [\n    {\n      ...defaults(),\n      default: false,\n      title: 'Backlog',\n      items: homeItems.map((item) => item.id),\n    },\n    {...defaults(), default: false, title: 'Todo', items: []},\n    {...defaults(), default: false, title: 'In Progress', items: []},\n    {...defaults(), default: false, title: 'Done', items: []},\n  ];\n  const homeBoard: Board = {\n    ...defaults(),\n    title: 'Home',\n    lists: homeLists.map((item) => item.id),\n  };\n\n  // category\n  const projectItems: Item[] = [\n    {...defaults(), title: 'at home', childBoardId: homeBoard.id},\n    {...defaults(), title: 'at town'},\n    {...defaults(), title: 'at work'},\n    {...defaults(), title: 'at gym'},\n    {...defaults(), title: 'app release'},\n  ];\n  const projectsList: List = {\n    ...defaults(),\n    title: 'Projects',\n    default: true,\n    items: projectItems.map((item) => item.id),\n  };\n  const listsItems: Item[] = [\n    {...defaults(), title: 'meeting notes'},\n    {...defaults(), title: 'book summaries'},\n    {...defaults(), title: 'gift ideas'},\n    {...defaults(), title: 'checklists'},\n    {...defaults(), title: 'code languages'},\n  ];\n  const listsList: List = {\n    ...defaults(),\n    title: 'Lists',\n    default: true,\n    items: listsItems.map((item) => item.id),\n  };\n  const categoryBoard: Board = {\n    ...defaults(),\n    title: 'Categories',\n    lists: [projectsList.id, listsList.id],\n  };\n\n  // user\n  const user: User = {\n    ...defaults(),\n    id: userId,\n    name: 'Bob Smith',\n    boards: [inboxBoard.id, categoryBoard.id],\n  };\n\n  return {\n    user,\n    boards: [homeBoard, inboxBoard, categoryBoard],\n    lists: [inboxList, ...homeLists, projectsList, listsList],\n    items: [...inboxItems, ...homeItems, ...projectItems, ...listsItems],\n  };\n};\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback} from 'react';\nimport {Button, Modal, Text} from '../../../../components';\nimport {useColor} from '../../../../hooks';\nimport {Theme, useRootDispatch} from '../../../../utils';\nimport {Card} from '../../components';\nimport {\n  createBoard,\n  createItem,\n  createList,\n  createUser,\n  removeUser,\n  setActiveUser,\n} from '../../models';\nimport {getDefaultUserTemplate} from './factory';\n\n// TODO: figure out a place for this\n// TODO: add reminders\n// TODO: add profile information\n// TODO: add payment\n\nexport const Account = memo(function Account() {\n  const color = useColor();\n  const dispatch = useRootDispatch();\n  const {goBack, navigate} = useNavigation();\n  const navBack = useCallback(() => goBack(), [goBack]);\n\n  const onLogin = useCallback(() => {\n    const {user, boards, lists, items} = getDefaultUserTemplate();\n    items.map((item) => dispatch(createItem(item)));\n    lists.map((list) => dispatch(createList(list)));\n    boards.map((board) => dispatch(createBoard(board)));\n    dispatch(createUser(user));\n    goBack();\n  }, [dispatch, goBack]);\n  const onLogout = useCallback(() => {\n    dispatch(removeUser());\n    navigate('main');\n  }, [dispatch, navigate]);\n  const onSetActive = useCallback(() => {\n    dispatch(setActiveUser(true));\n  }, [dispatch]);\n\n  const onNavToAdmin = useCallback(() => navigate('admin'), [navigate]);\n\n  return (\n    <Modal backgroundColor={color.surface} onBackgroundPress={navBack}>\n      <Card>\n        <Text\n          style={{paddingBottom: Theme.padding.p04}}\n          title=\"Profile\"\n          type=\"h3\"\n        />\n        <Text center emphasis=\"medium\" title=\"...\" type=\"h4\" />\n      </Card>\n      <Card>\n        <Text\n          style={{paddingBottom: Theme.padding.p04}}\n          title=\"Reminders\"\n          type=\"h3\"\n        />\n        <Text center emphasis=\"medium\" title=\"...\" type=\"h4\" />\n      </Card>\n      <Card>\n        <Text\n          style={{paddingBottom: Theme.padding.p04}}\n          title=\"Payment\"\n          type=\"h3\"\n        />\n        <Text center emphasis=\"medium\" title=\"...\" type=\"h4\" />\n      </Card>\n      <Card>\n        <Text\n          style={{paddingBottom: Theme.padding.p04}}\n          title=\"Feedback\"\n          type=\"h3\"\n        />\n        <Text center emphasis=\"medium\" title=\"...\" type=\"h4\" />\n      </Card>\n      <Button onPress={onLogin} title=\"login\" />\n      <Button onPress={onLogout} title=\"logout\" />\n      <Button onPress={onSetActive} title=\"set active\" />\n      <Button onPress={onNavToAdmin} title=\"go to admin\" />\n    </Modal>\n  );\n});\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback, useState} from 'react';\nimport {LayoutChangeEvent, Platform, View} from 'react-native';\nimport {Button, KeyboardHandler, Screen, Text} from '../../../../components';\nimport {useColor} from '../../../../hooks';\nimport {useRootSelector} from '../../../../utils';\nimport {Card, List} from '../../components';\nimport {config} from '../../configs';\nimport {getInboxBoardId} from '../../models';\n\nconst initialState = {container: 0, button: 0};\nexport const Capture = memo(function Capture() {\n  const color = useColor();\n  const {navigate} = useNavigation();\n\n  const keyboardHeight = useRootSelector(\n    (state) => state.device.keyboardHeight,\n  );\n  const [dimensions, setDimensions] = useState(initialState);\n  const android = Platform.OS === 'android';\n\n  const listHeight =\n    keyboardHeight === 0\n      ? dimensions.container -\n        dimensions.button -\n        (android ? config.padding * 8 : config.padding * 11)\n      : dimensions.container -\n        keyboardHeight -\n        (android ? config.padding * 3 : config.padding * 5);\n\n  const boardId = useRootSelector(getInboxBoardId);\n  const listId = useRootSelector(\n    (s) => s.completeBoard.items[boardId].lists[0],\n  );\n  const noListItems = useRootSelector(\n    (s) => s.completeList.items[listId].items.length === 0,\n  );\n\n  const onOrganize = useCallback(() => undefined, []);\n\n  const onLayout = useCallback(\n    (key: keyof typeof initialState) => (event: LayoutChangeEvent) => {\n      const {height} = event.nativeEvent.layout;\n      const {container, button} = dimensions;\n      const preventMultipleUpdates = container > 0 && button > 0;\n      if (preventMultipleUpdates) return;\n      setDimensions((p) => ({...p, [key]: height}));\n    },\n    [dimensions],\n  );\n\n  const navToAccount = useCallback(() => navigate('account'), [navigate]);\n\n  return (\n    <Screen onRightPress={navToAccount} rightIcon=\"account\" title=\"Capture\">\n      <KeyboardHandler\n        backgroundColor={color.surface}\n        onLayout={onLayout('container')}\n        render={dimensions.container > 0}>\n        {listId ? (\n          <View style={{padding: config.padding}}>\n            <List\n              boardId={boardId}\n              listId={listId}\n              listMaxHeight={listHeight}\n              placeholder=\"Item title...\"\n              title=\"Add item\"\n            />\n            <Card onLayout={onLayout('button')}>\n              <Button\n                center\n                color=\"primary\"\n                disable={noListItems}\n                onPress={onOrganize}\n                title=\"Organize\"\n              />\n            </Card>\n          </View>\n        ) : (\n          <Text title=\"missing account\" />\n        )}\n      </KeyboardHandler>\n    </Screen>\n  );\n});\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback, useState} from 'react';\nimport {Keyboard, View} from 'react-native';\nimport {Button, Modal, Text} from '../../../../components';\nimport {useColor} from '../../../../hooks';\nimport {Theme, useRootDispatch, useRootSelector} from '../../../../utils';\nimport {Card, DeleteModal, ItemContext, ItemEdit} from '../../components';\nimport {removeItem, updateItem, updateListRemoveItem} from '../../models';\n\nexport const ItemDetail = memo(function ItemDetail() {\n  const dispatch = useRootDispatch();\n  const {goBack} = useNavigation();\n  const color = useColor();\n  const navBack = useCallback(() => goBack(), [goBack]);\n  const itemId = useRootSelector((s) => s.completeItem.active);\n  const listId = useRootSelector((s) => s.completeList.active);\n  const item = useRootSelector((s) => s.completeItem.items[itemId || '']);\n  const [deleteModal, setDeleteModal] = useState(false);\n\n  const onItemDelete = useCallback(() => {\n    if (!itemId || !listId)\n      throw new Error('missing listId or itemId on item detail screen');\n    dispatch(removeItem(itemId));\n    dispatch(updateListRemoveItem({listId, itemId}));\n    setDeleteModal(false);\n    goBack();\n  }, [dispatch, goBack, itemId, listId]);\n\n  const onItemSubmit = useCallback(\n    (type: string) => (text: string) => {\n      dispatch(updateItem({...item, [type]: text}));\n      Keyboard.dismiss();\n    },\n    [dispatch, item],\n  );\n\n  const onDeletePress = useCallback(() => setDeleteModal(true), []);\n  const onDeleteClose = useCallback(() => setDeleteModal(false), []);\n\n  return !item ? null : (\n    <>\n      <Modal backgroundColor={color.surface} onBackgroundPress={navBack}>\n        {!item ? (\n          <Text title=\"missing item\" />\n        ) : (\n          <View>\n            <ItemEdit\n              description={item.description}\n              onSubmit={onItemSubmit}\n              placeholder=\"Item\"\n              title={item.title}\n            />\n            <Card margin=\"bottom\">\n              <Text title=\"Reminders\" />\n            </Card>\n            <Card margin=\"bottom\">\n              <Text title=\"Tags\" />\n            </Card>\n            <Card margin=\"bottom\">\n              <Text title=\"Comments\" />\n            </Card>\n            <ItemContext\n              createdAt={item.createdAt}\n              updatedAt={item.updatedAt}\n              userId={item.userId}\n            />\n            <View\n              style={{\n                flexDirection: 'row',\n                flex: 1,\n                justifyContent: 'space-between',\n              }}>\n              <Card flex>\n                <Button center onPress={navBack} title=\"close\" />\n              </Card>\n              <View style={{padding: Theme.padding.p02}} />\n              <Card flex>\n                <Button\n                  center\n                  color=\"danger\"\n                  onPress={onDeletePress}\n                  title=\"delete\"\n                />\n              </Card>\n            </View>\n          </View>\n        )}\n      </Modal>\n      {!deleteModal ? null : (\n        <DeleteModal onCancel={onDeleteClose} onDelete={onItemDelete} />\n      )}\n    </>\n  );\n});\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback} from 'react';\nimport {Button, Carousel, Screen} from '../../../../components';\nimport {Slide} from '../../../../components/Carousel/types';\nimport {useColor} from '../../../../hooks';\n\nexport const Landing = memo(function Landing() {\n  const {navigate} = useNavigation();\n  const color = useColor();\n  const navPortfolioLogin = useCallback(() => navigate('account'), [navigate]);\n\n  const slides: Slide[] = [\n    {id: '1', text: 'hello', color: color.info},\n    {id: '2', text: 'bob', color: color.warning},\n    {id: '3', text: 'steve', color: color.success},\n    {id: '4', text: 'jill', color: color.brand},\n  ];\n\n  return (\n    <Screen title=\"Landing\">\n      <Carousel slides={slides} />\n      <Button center onPress={navPortfolioLogin} title=\"Login\" />\n    </Screen>\n  );\n});\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback, useState} from 'react';\nimport {Keyboard, View} from 'react-native';\nimport {Button, Modal, Text} from '../../../../components';\nimport {useColor} from '../../../../hooks';\nimport {useRootDispatch, useRootSelector} from '../../../../utils';\nimport {Card, DeleteModal, ItemEdit} from '../../components';\nimport {ItemContext} from '../../components/ItemContext';\nimport {removeList, updateBoardRemoveList, updateList} from '../../models';\n\nexport const ListDetail = memo(function ListDetail() {\n  const dispatch = useRootDispatch();\n  const {goBack} = useNavigation();\n  const color = useColor();\n  const navBack = useCallback(() => goBack(), [goBack]);\n  const boardId = useRootSelector((s) => s.completeBoard.active);\n  const listId = useRootSelector((s) => s.completeList.active);\n  const list = useRootSelector((s) => s.completeList.items[listId || '']);\n  const [deleteModal, setDeleteModal] = useState(false);\n  if (!boardId || !listId)\n    throw new Error('missing listId or boardId on list detail screen');\n\n  const onListDelete = useCallback(() => {\n    dispatch(removeList(listId));\n    dispatch(updateBoardRemoveList({listId, boardId}));\n    setDeleteModal(false);\n    goBack();\n  }, [boardId, dispatch, goBack, listId]);\n\n  const onDeletePress = useCallback(() => setDeleteModal(true), []);\n  const onDeleteClose = useCallback(() => setDeleteModal(false), []);\n\n  const onListSubmit = useCallback(\n    (type: string) => (text: string) => {\n      dispatch(updateList({...list, [type]: text}));\n      Keyboard.dismiss();\n    },\n    [dispatch, list],\n  );\n\n  return !list ? null : (\n    <>\n      <Modal backgroundColor={color.surface} onBackgroundPress={navBack}>\n        {!list ? (\n          <Text title=\"missing list\" />\n        ) : (\n          <View>\n            <ItemEdit\n              description={list.description}\n              onSubmit={onListSubmit}\n              placeholder=\"List\"\n              title={list.title}\n            />\n            <ItemContext\n              createdAt={list.createdAt}\n              updatedAt={list.updatedAt}\n              userId={list.userId}\n            />\n            {list.default ? null : (\n              <Card>\n                <Button\n                  center\n                  color=\"danger\"\n                  onPress={onDeletePress}\n                  title=\"delete\"\n                />\n              </Card>\n            )}\n          </View>\n        )}\n      </Modal>\n      {!deleteModal ? null : (\n        <DeleteModal onCancel={onDeleteClose} onDelete={onListDelete} />\n      )}\n    </>\n  );\n});\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback, useState} from 'react';\nimport {LayoutChangeEvent, Platform} from 'react-native';\nimport {KeyboardHandler, Screen, Text} from '../../../../components';\nimport {useColor} from '../../../../hooks';\nimport {getSmallestDimension} from '../../../../models';\nimport {useRootSelector} from '../../../../utils';\nimport {Board} from '../../components';\nimport {config} from '../../configs';\n\n// TODO: figure out centering of list\n\nexport const Project = memo(function Project() {\n  const {goBack} = useNavigation();\n  const color = useColor();\n  const screenWidth = useRootSelector(getSmallestDimension);\n  const boardId = useRootSelector((s) => s.completeBoard.active);\n  const listWidth = screenWidth * 0.7;\n  const [container, setContainer] = useState(0);\n  const android = Platform.OS === 'android';\n  const keyboardHeight = useRootSelector(\n    (state) => state.device.keyboardHeight,\n  );\n\n  const listMaxHeight =\n    keyboardHeight === 0\n      ? container - (android ? config.padding * 8 : config.padding * 13)\n      : container -\n        keyboardHeight -\n        (android ? config.padding * 3 : config.padding * 8);\n\n  const onLayout = useCallback(\n    (event: LayoutChangeEvent) => {\n      const {height} = event.nativeEvent.layout;\n      if (container > 0) return;\n\n      setContainer(height);\n    },\n    [container],\n  );\n\n  const navBack = useCallback(() => {\n    goBack();\n  }, [goBack]);\n\n  return (\n    <Screen onLeftPress={navBack} title=\"Focus\">\n      {!boardId ? (\n        <Text title=\"missing board\" />\n      ) : (\n        <KeyboardHandler\n          backgroundColor={color.surface}\n          onLayout={onLayout}\n          render={container > 0}>\n          <Board\n            boardId={boardId}\n            listMaxHeight={listMaxHeight}\n            listWidth={listWidth}\n          />\n        </KeyboardHandler>\n      )}\n    </Screen>\n  );\n});\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback, useState} from 'react';\nimport {LayoutChangeEvent, View} from 'react-native';\nimport {KeyboardHandler, Screen} from '../../../../components';\nimport {useColor} from '../../../../hooks';\nimport {useRootSelector} from '../../../../utils';\nimport {List} from '../../components';\nimport {config} from '../../configs';\nimport {getCategoryBoardId} from '../../models';\n\n// TODO: add journal\n// TODO: add historical data\n// TODO: add purpose\n// TODO: add goals\n\n// TODO: render as <Board />\n\nexport const Projects = memo(function Projects() {\n  const color = useColor();\n  const {navigate} = useNavigation();\n  const boardId = useRootSelector(getCategoryBoardId);\n  const listIds = useRootSelector((s) => s.completeBoard.items[boardId].lists);\n  const [dimensions, setDimensions] = useState(0);\n\n  const onLayout = useCallback(\n    (event: LayoutChangeEvent) => {\n      const {height} = event.nativeEvent.layout;\n      if (dimensions > 0) return;\n\n      setDimensions(height);\n    },\n    [dimensions],\n  );\n\n  const maxHeight = dimensions / 2 - config.padding * 11;\n\n  const navToAccount = useCallback(() => navigate('account'), [navigate]);\n\n  return (\n    <Screen onRightPress={navToAccount} rightIcon=\"account\" title=\"Projects\">\n      <KeyboardHandler\n        backgroundColor={color.surface}\n        onLayout={onLayout}\n        render={dimensions > 0}>\n        <View style={{padding: config.padding}}>\n          {listIds.map((listId) => (\n            <List\n              boardId={boardId}\n              key={listId}\n              listId={listId}\n              listMaxHeight={maxHeight}\n              placeholder=\"List title...\"\n              title=\"Add list\"\n            />\n          ))}\n        </View>\n      </KeyboardHandler>\n    </Screen>\n  );\n});\n","import {scaleLinear, scaleTime} from 'd3-scale';\nimport * as shape from 'd3-shape';\nimport * as React from 'react';\nimport {StyleSheet, View} from 'react-native';\nimport Svg, {Defs, LinearGradient, Path, Stop} from 'react-native-svg';\n\ninterface DataPoint {\n  date: number;\n  value: number;\n}\n\ninterface GraphProps {\n  data: DataPoint[];\n  width: number;\n  height: number;\n}\n\nconst strokeWidth = 4;\nconst padding = strokeWidth / 2;\nconst getDomain = (domain: number[]) => [\n  Math.min(...domain),\n  Math.max(...domain),\n];\n\nexport const Graph = ({\n  data,\n  width,\n  height,\n}: GraphProps): React.ReactElement => {\n  const scaleX = scaleTime()\n    .domain(getDomain(data.map((d) => d.date)))\n    .range([0, width]);\n  const scaleY = scaleLinear()\n    .domain(getDomain(data.map((d) => d.value)))\n    .range([height - padding, padding]);\n  const d = shape\n    .line<DataPoint>()\n    .x((p) => scaleX(p.date))\n    .y((p) => scaleY(p.value))\n    .curve(shape.curveBasis)(data) as string;\n  return (\n    <View style={{width, height}}>\n      <Svg style={StyleSheet.absoluteFill}>\n        <Defs>\n          <LinearGradient id=\"gradient\" x1=\"50%\" x2=\"50%\" y1=\"0%\" y2=\"100%\">\n            <Stop offset=\"0%\" stopColor=\"#cee3f9\" />\n            <Stop offset=\"80%\" stopColor=\"#ddedfa\" />\n            <Stop offset=\"100%\" stopColor=\"#feffff\" />\n          </LinearGradient>\n        </Defs>\n        <Path\n          d={`${d}L ${width} ${height} L 0 ${height}`}\n          fill=\"url(#gradient)\"\n        />\n        <Path fill=\"transparent\" stroke=\"#3977e3\" {...{d, strokeWidth}} />\n      </Svg>\n    </View>\n  );\n};\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback} from 'react';\nimport {Dimensions, View} from 'react-native';\nimport {Calendar, Screen, Text} from '../../../../components';\nimport {ScrollView} from '../../../../conversions';\nimport {useColor} from '../../../../hooks';\nimport {Theme} from '../../../../utils';\nimport {Card} from '../../components/Card';\nimport {config} from '../../configs';\nimport {Graph} from './Graph';\n\n// TODO: add journal\n// TODO: add historical data\n// TODO: add purpose\n// TODO: add goals\n\ntype TitleProps = {name: string};\n\nconst Title = ({name}: TitleProps) => {\n  return (\n    <Text\n      emphasis=\"high\"\n      style={{paddingBottom: config.padding}}\n      title={name}\n      type=\"h4\"\n    />\n  );\n};\n\nconst data = [\n  {date: new Date(2018, 9, 1).getTime(), value: 0},\n  {date: new Date(2018, 9, 16).getTime(), value: 0},\n  {date: new Date(2018, 9, 17).getTime(), value: 200},\n  {date: new Date(2018, 10, 1).getTime(), value: 200},\n  {date: new Date(2018, 10, 2).getTime(), value: 300},\n  {date: new Date(2018, 10, 5).getTime(), value: 300},\n];\n\nexport const Reflect = memo(function Reflect() {\n  const color = useColor();\n  const {navigate} = useNavigation();\n  const navToAccount = useCallback(() => navigate('account'), [navigate]);\n\n  return (\n    <Screen onRightPress={navToAccount} rightIcon=\"account\" title=\"Reflect\">\n      <ScrollView\n        contentContainerStyle={{\n          padding: Theme.padding.p04,\n          backgroundColor: color.surface,\n        }}\n        style={{backgroundColor: color.surface}}>\n        <Card margin=\"bottom\">\n          <View>\n            <Title name=\"Purpose\" />\n            <Text title=\"Make a significant positive difference in global productivity\" />\n          </View>\n        </Card>\n        <Card margin=\"bottom\">\n          <View>\n            <Title name=\"Goals\" />\n            <Text title=\"Top 3\" />\n            <Text title=\"Deep Focus\" />\n            <Text title=\"Smile\" />\n            <Text title=\"1 More Rep\" />\n          </View>\n        </Card>\n        <Card margin=\"bottom\">\n          <View>\n            <Title name=\"Review (Progress)\" />\n            <View\n              style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>\n              <Graph\n                data={data}\n                height={200}\n                width={Dimensions.get('window').width - config.padding * 4}\n              />\n            </View>\n          </View>\n        </Card>\n        <Card>\n          <View>\n            <Title name=\"Reflect (Journal)\" />\n            <Calendar />\n          </View>\n        </Card>\n      </ScrollView>\n    </Screen>\n  );\n});\n","import {\n  BottomTabBarOptions,\n  createBottomTabNavigator,\n} from '@react-navigation/bottom-tabs';\nimport {Route} from '@react-navigation/native';\nimport {\n  createStackNavigator,\n  StackNavigationOptions,\n} from '@react-navigation/stack';\nimport React, {memo, useCallback} from 'react';\nimport {Icon, Modal, Notification} from '../../components';\nimport {useColor} from '../../hooks';\nimport {rootMode, rootScreenOptions} from '../../providers/Navigation/configs';\nimport {useRootSelector} from '../../utils';\nimport {\n  Account,\n  Capture,\n  ItemDetail,\n  Landing,\n  ListDetail,\n  Project,\n  Projects,\n  Reflect,\n} from './screens';\n\nconst noHeader: StackNavigationOptions = {headerShown: false};\nconst RootTab = createBottomTabNavigator();\nconst RootStack = createStackNavigator();\nconst ProjectsStack = createStackNavigator();\n\ntype Tabs = 'capture' | 'focus' | 'reflect';\ntype TabIcons = {\n  [key in Tabs]: {focused: string; unfocused: string};\n};\n\nconst tabIcons: TabIcons = {\n  capture: {\n    focused: 'pencil-plus-outline',\n    unfocused: 'pencil-plus-outline',\n  },\n  focus: {\n    focused: 'checkbox-multiple-marked-outline',\n    unfocused: 'checkbox-multiple-marked-outline',\n  },\n  reflect: {focused: 'finance', unfocused: 'finance'},\n};\n\ntype ScreenOptionsProps = {\n  route: Route<string, Record<string, unknown> | undefined>;\n};\n\ntype TabBarIconProps = {\n  focused: boolean;\n  size: number;\n};\n\nconst Focus = () => {\n  return (\n    <ProjectsStack.Navigator screenOptions={noHeader}>\n      <ProjectsStack.Screen component={Projects} name=\"boards\" />\n      <ProjectsStack.Screen component={Project} name=\"board\" />\n    </ProjectsStack.Navigator>\n  );\n};\n\nconst Tabs = () => {\n  const color = useColor();\n  const tabBarOptions: BottomTabBarOptions = {\n    keyboardHidesTabBar: true,\n    activeTintColor: color.text,\n    inactiveTintColor: color.secondary,\n    showLabel: false,\n  };\n  const screenOptions = useCallback(\n    ({route}: ScreenOptionsProps) => ({\n      tabBarIcon: function tabBarIcon({focused, size}: TabBarIconProps) {\n        const focus = focused ? 'focused' : 'unfocused';\n        const iconColor = focused ? color.text : color.secondary;\n        const name = (tabIcons as any)[route.name][focus];\n        return <Icon color={iconColor} name={name} size={size} />;\n      },\n    }),\n    [color],\n  );\n\n  return (\n    <RootTab.Navigator\n      screenOptions={screenOptions as any}\n      tabBarOptions={tabBarOptions}>\n      <RootTab.Screen component={Capture} name=\"capture\" />\n      <RootTab.Screen component={Focus} name=\"focus\" />\n      <RootTab.Screen component={Reflect} name=\"reflect\" />\n    </RootTab.Navigator>\n  );\n};\n\nexport default memo(function Complete() {\n  const user = useRootSelector((s) => s.completeUser);\n  const Main = user ? Tabs : Landing;\n  return (\n    <RootStack.Navigator mode={rootMode} screenOptions={rootScreenOptions}>\n      <RootStack.Screen component={Main} name=\"main\" />\n      <RootStack.Screen component={Account} name=\"account\" />\n      <RootStack.Screen component={Notification} name=\"notification\" />\n      <RootStack.Screen component={Modal} name=\"alert\" />\n      <RootStack.Screen component={ItemDetail} name=\"item-detail\" />\n      <RootStack.Screen component={ListDetail} name=\"list-detail\" />\n    </RootStack.Navigator>\n  );\n});\n\n/*\n\n# Data\n\n- user\n-> collections [projects, lists]\n-> boards [home, work, town] | [meeting notes, book summaries, checklists]\n-> lists [backlog, todo, in progress, done] | [draft, final]\n-> item [find comb, clear emails, daily standup]\n\n# Screens\n\n## Capture\n\n### Inbox (list -> item -> details)\n- \"add grey list\" -> @app\n- \"find comb\" -> @home\n- \"clear emails\" -> @work\n- \"put $20 in phone\" -> @town\n- \"drink water\" -> @after-waking-up\n- \"intensity + focus = deep work\" -> book summaries\n\n## Organize\n\n### Projects (item -> lists -> item -> details )\n- @home -> (backlog, todo, in progress, done xx, done xx)\n- @town\n- @work\n- @gym\n- @app\n\n### Lists (item -> list -> item -> detail)\n- meeting notes\n - one-on-one\n - daily standup\n- book summaries\n - the one thing\n - getting things done\n - eat that frog\n- gift ideas\n - mom\n - dad\n - girlfriend\n- checklists\n - after waking up\n - after entering bathroom\n\n## Reflect\n\n### Purpose\n\n### Goals\n\n### Review (Progress)\n\n### Reflect (Journal)\n\n## Account\n\n### Profile\n\n### Notifications\n\n### Payment\n*/\n"],"sourceRoot":""}