{"version":3,"sources":["apps/Debug/screens/GameOfLife/utils.ts","apps/Debug/screens/GameOfLife/Cell.tsx","apps/Debug/screens/GameOfLife/index.tsx"],"names":["operations","generateBoard","size","random","board","i","j","Math","Cell","memo","props","color","useColor","TouchableOpacity","onPress","onItemPress","x","y","key","style","height","width","backgroundColor","row","primary","surface","borderWidth","borderColor","light","useState","run","delay","count","form","setForm","setBoard","runRef","useRef","delayRef","timeoutRef","useRootSelector","getSmallestDimension","nav","useNav","styles","StyleSheet","create","container","background","onClear","useCallback","state","map","rows","item","swapBoardItem","onRandom","loop","current","_","neighbors","length","forEach","newI","newK","determineBoardItem","setTimeout","onStart","onCountSlide","value","onDelaySlide","useEffect","clearTimeout","onLeftPress","to","title","View","flexDirection","h4","alignSelf","flex","maximumValue","minimumValue","step","onSlidingComplete","floor","justifyContent"],"mappings":"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","file":"static/js/27.5737b9a5.chunk.js","sourcesContent":["const operations = [\n  [0, 1],\n  [0, -1],\n  [1, -1],\n  [-1, 1],\n  [1, 1],\n  [-1, -1],\n  [1, 0],\n  [-1, 0]\n];\n\ntype BoardItem = 0 | 1;\n\nexport type Board = Array<Array<BoardItem>>;\n\nexport const generateBoard = (size: number, random = 0) => {\n  const board: Board = [];\n  for (let i = 0; i < size; i++) {\n    board[i] = [];\n    for (let j = 0; j < size; j++) {\n      board[i][j] = Math.random() > random ? 0 : 1;\n    }\n  }\n  return board;\n};\n\nexport const determineBoardItem = (board: Board, i: number, j: number) => {\n  let neighbors = 0;\n  const item = board[i][j];\n  const length = board.length;\n  operations.forEach(([x, y]) => {\n    const newI = i + x;\n    const newK = j + y;\n    if (newI >= 0 && newI < length && newK >= 0 && newK < length) {\n      neighbors += board[newI][newK];\n    }\n  });\n\n  return neighbors < 2 || neighbors > 3\n    ? 0\n    : item === 0 && neighbors === 3\n    ? 1\n    : item;\n};\n\nexport const swapBoardItem = (\n  item: BoardItem,\n  x: number,\n  y: number,\n  i: number,\n  j: number\n) => {\n  return i === x && y === j ? item ? 0 : 1 : item;\n};\n","import React, { memo } from \"react\";\nimport { useColor } from \"../../../../hooks\";\nimport { TouchableOpacity } from \"react-native\";\n\ninterface CellProps {\n  x: number;\n  y: number;\n  row: number;\n  size: number;\n  onItemPress(x: number, y: number): () => void;\n}\n\nexport const Cell = memo(function Cell(props: CellProps) {\n  const color = useColor();\n  return (\n    <TouchableOpacity\n      onPress={props.onItemPress(props.x, props.y)}\n      key={`${props.x}-${props.y}`}\n      style={{\n        height: props.size,\n        width: props.size,\n        backgroundColor: props.row ? color.primary : color.surface,\n        borderWidth: 1,\n        borderColor: color.light\n      }}\n    />\n  );\n});\n","import React, { useState, useRef, useCallback, memo, useEffect } from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport { Screen, Button, Slider, Text } from \"../../../../components\";\nimport { useColor, useNav } from \"../../../../hooks\";\nimport { useRootSelector } from \"../../../../utils\";\nimport { getSmallestDimension } from \"../../../../models\";\nimport { generateBoard, swapBoardItem, determineBoardItem } from \"./utils\";\nimport { Cell } from \"./Cell\";\n\nexport default memo(function DebugGameOfLife() {\n  const color = useColor();\n  const [form, setForm] = useState({\n    run: false,\n    delay: 16,\n    count: 20\n  });\n  const [board, setBoard] = useState(generateBoard(form.count, 0.5));\n  const runRef = useRef(form.run);\n  const delayRef = useRef(form.delay);\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const smallest = useRootSelector(getSmallestDimension);\n  const size = smallest / form.count;\n  const nav = useNav();\n  const styles = StyleSheet.create({\n    container: {\n      backgroundColor: color.background\n    }\n  });\n\n  const onClear = useCallback(() => setBoard(generateBoard(form.count)), [\n    form.count\n  ]);\n\n  const onItemPress = useCallback(\n    (x: number, y: number) => () => {\n      setBoard(state =>\n        state.map((rows, i) =>\n          rows.map((item, j) => swapBoardItem(item, x, y, i, j))\n        )\n      );\n    },\n    []\n  );\n\n  const onRandom = useCallback(() => setBoard(generateBoard(form.count, 0.5)), [\n    form.count\n  ]);\n\n  const loop = useCallback(() => {\n    if (!runRef.current) {\n      return;\n    }\n\n    setBoard(state =>\n      state.map((rows, i) =>\n        rows.map((_, j) => determineBoardItem(state, i, j))\n      )\n    );\n\n    timeoutRef.current = setTimeout(loop, delayRef.current);\n  }, []);\n\n  const onStart = useCallback(() => {\n    setForm(state => ({ ...state, run: !state.run }));\n    runRef.current = !runRef.current;\n    loop();\n  }, [loop]);\n\n  const onCountSlide = useCallback((value: number) => {\n    setForm(state => ({ ...state, count: value }));\n    setBoard(generateBoard(value, 0.5));\n  }, []);\n\n  const onDelaySlide = useCallback((value: number) => {\n    setForm(state => ({ ...state, delay: value }));\n    delayRef.current = value;\n  }, []);\n\n  useEffect(() => {\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, [timeoutRef]);\n\n  return (\n    <Screen onLeftPress={nav.to(\"debug\")} title=\"Game of life\">\n      <View style={{ flexDirection: \"row\" }}>\n        <Text\n          title={`count: ${form.count}`}\n          h4\n          style={{ alignSelf: \"center\" }}\n        />\n        <Slider\n          style={{ flex: 1 }}\n          value={10}\n          maximumValue={100}\n          minimumValue={1}\n          step={1}\n          onSlidingComplete={onCountSlide}\n        />\n      </View>\n      <View style={{ flexDirection: \"row\" }}>\n        <Text\n          title={`delay: ${Math.floor(form.delay)}`}\n          h4\n          style={{ alignSelf: \"center\" }}\n        />\n        <Slider\n          style={{ flex: 1 }}\n          value={10}\n          maximumValue={100}\n          minimumValue={1}\n          step={1}\n          onSlidingComplete={onDelaySlide}\n        />\n      </View>\n      <View style={styles.container}>\n        <View style={{ flexDirection: \"row\", justifyContent: \"center\" }}>\n          <Button title={form.run ? \"stop\" : \"start\"} onPress={onStart} />\n          <Button title=\"random\" onPress={onRandom} />\n          <Button title=\"clear\" onPress={onClear} />\n        </View>\n        <View>\n          {board.map((rows, x) => \n            <View\n              key={`${x}`}\n              style={{ flexDirection: \"row\", justifyContent: \"center\" }}\n            >\n              {rows.map((row, y) => \n                <Cell\n                  key={`${x}-${y}`}\n                  row={row}\n                  x={x}\n                  y={y}\n                  size={size}\n                  onItemPress={onItemPress}\n                />\n              )}\n            </View>\n          )}\n        </View>\n      </View>\n    </Screen>\n  );\n});\n"],"sourceRoot":""}