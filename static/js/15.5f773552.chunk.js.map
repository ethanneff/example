{"version":3,"sources":["../node_modules/react-native-web/dist/vendor/react-native/TouchHistoryMath/index.js","../node_modules/react-native-web/dist/vendor/react-native/PanResponder/index.js","../node_modules/react-native-web/dist/exports/PanResponder/index.js","apps/Games/Snake/utils.ts","apps/Games/Snake/Cell.tsx","apps/Games/Snake/Board.tsx","apps/Games/Snake/useGameLoop.ts","apps/Games/Snake/EndGame.tsx","apps/Games/Snake/index.tsx","apps/Games/Snake/useGesture.ts"],"names":["TouchHistoryMath","centroidDimension","touchHistory","touchesChangedAfter","isXAxis","ofCurrent","touchBank","total","count","oneTouchData","numberActiveTouches","indexOfSingleActiveTouch","touchActive","currentTimeStamp","currentPageX","currentPageY","previousPageX","previousPageY","i","length","touchTrack","undefined","noCentroid","currentCentroidXOfTouchesChangedAfter","currentCentroidYOfTouchesChangedAfter","previousCentroidXOfTouchesChangedAfter","previousCentroidYOfTouchesChangedAfter","currentCentroidX","currentCentroidY","PanResponder","_initializeGestureState","gestureState","moveX","moveY","x0","y0","dx","dy","vx","vy","_accountsForMovesUpTo","_updateGestureStateOnMove","movedAfter","prevX","x","prevY","y","nextDX","nextDY","dt","mostRecentTimeStamp","create","config","interactionState","handle","stateID","Math","random","panHandlers","onStartShouldSetResponder","event","onStartShouldSetPanResponder","onMoveShouldSetResponder","onMoveShouldSetPanResponder","onStartShouldSetResponderCapture","nativeEvent","touches","onStartShouldSetPanResponderCapture","onMoveShouldSetResponderCapture","onMoveShouldSetPanResponderCapture","onResponderGrant","InteractionManager","createInteractionHandle","onPanResponderGrant","onShouldBlockNativeResponder","onResponderReject","clearInteractionHandle","onPanResponderReject","onResponderRelease","onPanResponderRelease","onResponderStart","onPanResponderStart","onResponderMove","onPanResponderMove","onResponderEnd","onPanResponderEnd","onResponderTerminate","onPanResponderTerminate","onResponderTerminationRequest","onPanResponderTerminationRequest","getInteractionHandle","callback","generateRandom","size","floor","generateBoard","board","j","center","addStarting","addFood","used","combo","Object","keys","Cell","memo","value","color","useColor","width","useRootSelector","getSmallestDimension","backgroundColor","light","success","danger","View","style","flex","height","Board","justifyContent","map","key","flexDirection","initialFrame","start","Date","now","current","EndGame","onPress","title","nav","useNav","useState","state","game","setGame","gesture","direction","setDirection","_","g","abs","useGesture","off","useRef","frame","loop","useCallback","setTimeout","stop","useEffect","useGameLoop","prev","reset","onLeftPress","to"],"mappings":"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","file":"static/js/15.5f773552.chunk.js","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\nvar TouchHistoryMath = {\n  /**\n   * This code is optimized and not intended to look beautiful. This allows\n   * computing of touch centroids that have moved after `touchesChangedAfter`\n   * timeStamp. You can compute the current centroid involving all touches\n   * moves after `touchesChangedAfter`, or you can compute the previous\n   * centroid of all touches that were moved after `touchesChangedAfter`.\n   *\n   * @param {TouchHistoryMath} touchHistory Standard Responder touch track\n   * data.\n   * @param {number} touchesChangedAfter timeStamp after which moved touches\n   * are considered \"actively moving\" - not just \"active\".\n   * @param {boolean} isXAxis Consider `x` dimension vs. `y` dimension.\n   * @param {boolean} ofCurrent Compute current centroid for actively moving\n   * touches vs. previous centroid of now actively moving touches.\n   * @return {number} value of centroid in specified dimension.\n   */\n  centroidDimension: function centroidDimension(touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {\n    var touchBank = touchHistory.touchBank;\n    var total = 0;\n    var count = 0;\n    var oneTouchData = touchHistory.numberActiveTouches === 1 ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;\n\n    if (oneTouchData !== null) {\n      if (oneTouchData.touchActive && oneTouchData.currentTimeStamp > touchesChangedAfter) {\n        total += ofCurrent && isXAxis ? oneTouchData.currentPageX : ofCurrent && !isXAxis ? oneTouchData.currentPageY : !ofCurrent && isXAxis ? oneTouchData.previousPageX : oneTouchData.previousPageY;\n        count = 1;\n      }\n    } else {\n      for (var i = 0; i < touchBank.length; i++) {\n        var touchTrack = touchBank[i];\n\n        if (touchTrack !== null && touchTrack !== undefined && touchTrack.touchActive && touchTrack.currentTimeStamp >= touchesChangedAfter) {\n          var toAdd = void 0; // Yuck, program temporarily in invalid state.\n\n          if (ofCurrent && isXAxis) {\n            toAdd = touchTrack.currentPageX;\n          } else if (ofCurrent && !isXAxis) {\n            toAdd = touchTrack.currentPageY;\n          } else if (!ofCurrent && isXAxis) {\n            toAdd = touchTrack.previousPageX;\n          } else {\n            toAdd = touchTrack.previousPageY;\n          }\n\n          total += toAdd;\n          count++;\n        }\n      }\n    }\n\n    return count > 0 ? total / count : TouchHistoryMath.noCentroid;\n  },\n  currentCentroidXOfTouchesChangedAfter: function currentCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, // isXAxis\n    true // ofCurrent\n    );\n  },\n  currentCentroidYOfTouchesChangedAfter: function currentCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, // isXAxis\n    true // ofCurrent\n    );\n  },\n  previousCentroidXOfTouchesChangedAfter: function previousCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, // isXAxis\n    false // ofCurrent\n    );\n  },\n  previousCentroidYOfTouchesChangedAfter: function previousCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, // isXAxis\n    false // ofCurrent\n    );\n  },\n  currentCentroidX: function currentCentroidX(touchHistory) {\n    return TouchHistoryMath.centroidDimension(touchHistory, 0, // touchesChangedAfter\n    true, // isXAxis\n    true // ofCurrent\n    );\n  },\n  currentCentroidY: function currentCentroidY(touchHistory) {\n    return TouchHistoryMath.centroidDimension(touchHistory, 0, // touchesChangedAfter\n    false, // isXAxis\n    true // ofCurrent\n    );\n  },\n  noCentroid: -1\n};\nexport default TouchHistoryMath;","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport InteractionManager from '../../../exports/InteractionManager';\nimport TouchHistoryMath from '../TouchHistoryMath';\nvar currentCentroidXOfTouchesChangedAfter = TouchHistoryMath.currentCentroidXOfTouchesChangedAfter;\nvar currentCentroidYOfTouchesChangedAfter = TouchHistoryMath.currentCentroidYOfTouchesChangedAfter;\nvar previousCentroidXOfTouchesChangedAfter = TouchHistoryMath.previousCentroidXOfTouchesChangedAfter;\nvar previousCentroidYOfTouchesChangedAfter = TouchHistoryMath.previousCentroidYOfTouchesChangedAfter;\nvar currentCentroidX = TouchHistoryMath.currentCentroidX;\nvar currentCentroidY = TouchHistoryMath.currentCentroidY;\n/**\n * `PanResponder` reconciles several touches into a single gesture. It makes\n * single-touch gestures resilient to extra touches, and can be used to\n * recognize simple multi-touch gestures.\n *\n * By default, `PanResponder` holds an `InteractionManager` handle to block\n * long-running JS events from interrupting active gestures.\n *\n * It provides a predictable wrapper of the responder handlers provided by the\n * [gesture responder system](docs/gesture-responder-system.html).\n * For each handler, it provides a new `gestureState` object alongside the\n * native event object:\n *\n * ```\n * onPanResponderMove: (event, gestureState) => {}\n * ```\n *\n * A native event is a synthetic touch event with the following form:\n *\n *  - `nativeEvent`\n *      + `changedTouches` - Array of all touch events that have changed since the last event\n *      + `identifier` - The ID of the touch\n *      + `locationX` - The X position of the touch, relative to the element\n *      + `locationY` - The Y position of the touch, relative to the element\n *      + `pageX` - The X position of the touch, relative to the root element\n *      + `pageY` - The Y position of the touch, relative to the root element\n *      + `target` - The node id of the element receiving the touch event\n *      + `timestamp` - A time identifier for the touch, useful for velocity calculation\n *      + `touches` - Array of all current touches on the screen\n *\n * A `gestureState` object has the following:\n *\n *  - `stateID` - ID of the gestureState- persisted as long as there at least\n *     one touch on screen\n *  - `moveX` - the latest screen coordinates of the recently-moved touch\n *  - `moveY` - the latest screen coordinates of the recently-moved touch\n *  - `x0` - the screen coordinates of the responder grant\n *  - `y0` - the screen coordinates of the responder grant\n *  - `dx` - accumulated distance of the gesture since the touch started\n *  - `dy` - accumulated distance of the gesture since the touch started\n *  - `vx` - current velocity of the gesture\n *  - `vy` - current velocity of the gesture\n *  - `numberActiveTouches` - Number of touches currently on screen\n *\n * ### Basic Usage\n *\n * ```\n *   componentWillMount: function() {\n *     this._panResponder = PanResponder.create({\n *       // Ask to be the responder:\n *       onStartShouldSetPanResponder: (evt, gestureState) => true,\n *       onStartShouldSetPanResponderCapture: (evt, gestureState) => true,\n *       onMoveShouldSetPanResponder: (evt, gestureState) => true,\n *       onMoveShouldSetPanResponderCapture: (evt, gestureState) => true,\n *\n *       onPanResponderGrant: (evt, gestureState) => {\n *         // The gesture has started. Show visual feedback so the user knows\n *         // what is happening!\n *\n *         // gestureState.d{x,y} will be set to zero now\n *       },\n *       onPanResponderMove: (evt, gestureState) => {\n *         // The most recent move distance is gestureState.move{X,Y}\n *\n *         // The accumulated gesture distance since becoming responder is\n *         // gestureState.d{x,y}\n *       },\n *       onPanResponderTerminationRequest: (evt, gestureState) => true,\n *       onPanResponderRelease: (evt, gestureState) => {\n *         // The user has released all touches while this view is the\n *         // responder. This typically means a gesture has succeeded\n *       },\n *       onPanResponderTerminate: (evt, gestureState) => {\n *         // Another component has become the responder, so this gesture\n *         // should be cancelled\n *       },\n *       onShouldBlockNativeResponder: (evt, gestureState) => {\n *         // Returns whether this component should block native components from becoming the JS\n *         // responder. Returns true by default. Is currently only supported on android.\n *         return true;\n *       },\n *     });\n *   },\n *\n *   render: function() {\n *     return (\n *       <View {...this._panResponder.panHandlers} />\n *     );\n *   },\n *\n * ```\n *\n * ### Working Example\n *\n * To see it in action, try the\n * [PanResponder example in RNTester](https://github.com/facebook/react-native/blob/master/RNTester/js/PanResponderExample.js)\n */\n\nvar PanResponder = {\n  /**\n   *\n   * A graphical explanation of the touch data flow:\n   *\n   * +----------------------------+             +--------------------------------+\n   * | ResponderTouchHistoryStore |             |TouchHistoryMath                |\n   * +----------------------------+             +----------+---------------------+\n   * |Global store of touchHistory|             |Allocation-less math util       |\n   * |including activeness, start |             |on touch history (centroids     |\n   * |position, prev/cur position.|             |and multitouch movement etc)    |\n   * |                            |             |                                |\n   * +----^-----------------------+             +----^---------------------------+\n   *      |                                          |\n   *      | (records relevant history                |\n   *      |  of touches relevant for                 |\n   *      |  implementing higher level               |\n   *      |  gestures)                               |\n   *      |                                          |\n   * +----+-----------------------+             +----|---------------------------+\n   * | ResponderEventPlugin       |             |    |   Your App/Component      |\n   * +----------------------------+             +----|---------------------------+\n   * |Negotiates which view gets  | Low level   |    |             High level    |\n   * |onResponderMove events.     | events w/   |  +-+-------+     events w/     |\n   * |Also records history into   | touchHistory|  |   Pan   |     multitouch +  |\n   * |ResponderTouchHistoryStore. +---------------->Responder+-----> accumulative|\n   * +----------------------------+ attached to |  |         |     distance and  |\n   *                                 each event |  +---------+     velocity.     |\n   *                                            |                                |\n   *                                            |                                |\n   *                                            +--------------------------------+\n   *\n   *\n   *\n   * Gesture that calculates cumulative movement over time in a way that just\n   * \"does the right thing\" for multiple touches. The \"right thing\" is very\n   * nuanced. When moving two touches in opposite directions, the cumulative\n   * distance is zero in each dimension. When two touches move in parallel five\n   * pixels in the same direction, the cumulative distance is five, not ten. If\n   * two touches start, one moves five in a direction, then stops and the other\n   * touch moves fives in the same direction, the cumulative distance is ten.\n   *\n   * This logic requires a kind of processing of time \"clusters\" of touch events\n   * so that two touch moves that essentially occur in parallel but move every\n   * other frame respectively, are considered part of the same movement.\n   *\n   * Explanation of some of the non-obvious fields:\n   *\n   * - moveX/moveY: If no move event has been observed, then `(moveX, moveY)` is\n   *   invalid. If a move event has been observed, `(moveX, moveY)` is the\n   *   centroid of the most recently moved \"cluster\" of active touches.\n   *   (Currently all move have the same timeStamp, but later we should add some\n   *   threshold for what is considered to be \"moving\"). If a palm is\n   *   accidentally counted as a touch, but a finger is moving greatly, the palm\n   *   will move slightly, but we only want to count the single moving touch.\n   * - x0/y0: Centroid location (non-cumulative) at the time of becoming\n   *   responder.\n   * - dx/dy: Cumulative touch distance - not the same thing as sum of each touch\n   *   distance. Accounts for touch moves that are clustered together in time,\n   *   moving the same direction. Only valid when currently responder (otherwise,\n   *   it only represents the drag distance below the threshold).\n   * - vx/vy: Velocity.\n   */\n  _initializeGestureState: function _initializeGestureState(gestureState) {\n    gestureState.moveX = 0;\n    gestureState.moveY = 0;\n    gestureState.x0 = 0;\n    gestureState.y0 = 0;\n    gestureState.dx = 0;\n    gestureState.dy = 0;\n    gestureState.vx = 0;\n    gestureState.vy = 0;\n    gestureState.numberActiveTouches = 0; // All `gestureState` accounts for timeStamps up until:\n\n    gestureState._accountsForMovesUpTo = 0;\n  },\n\n  /**\n   * This is nuanced and is necessary. It is incorrect to continuously take all\n   * active *and* recently moved touches, find the centroid, and track how that\n   * result changes over time. Instead, we must take all recently moved\n   * touches, and calculate how the centroid has changed just for those\n   * recently moved touches, and append that change to an accumulator. This is\n   * to (at least) handle the case where the user is moving three fingers, and\n   * then one of the fingers stops but the other two continue.\n   *\n   * This is very different than taking all of the recently moved touches and\n   * storing their centroid as `dx/dy`. For correctness, we must *accumulate\n   * changes* in the centroid of recently moved touches.\n   *\n   * There is also some nuance with how we handle multiple moved touches in a\n   * single event. With the way `ReactNativeEventEmitter` dispatches touches as\n   * individual events, multiple touches generate two 'move' events, each of\n   * them triggering `onResponderMove`. But with the way `PanResponder` works,\n   * all of the gesture inference is performed on the first dispatch, since it\n   * looks at all of the touches (even the ones for which there hasn't been a\n   * native dispatch yet). Therefore, `PanResponder` does not call\n   * `onResponderMove` passed the first dispatch. This diverges from the\n   * typical responder callback pattern (without using `PanResponder`), but\n   * avoids more dispatches than necessary.\n   */\n  _updateGestureStateOnMove: function _updateGestureStateOnMove(gestureState, touchHistory) {\n    gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n    gestureState.moveX = currentCentroidXOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);\n    gestureState.moveY = currentCentroidYOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);\n    var movedAfter = gestureState._accountsForMovesUpTo;\n    var prevX = previousCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n    var x = currentCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n    var prevY = previousCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n    var y = currentCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n    var nextDX = gestureState.dx + (x - prevX);\n    var nextDY = gestureState.dy + (y - prevY); // TODO: This must be filtered intelligently.\n\n    var dt = touchHistory.mostRecentTimeStamp - gestureState._accountsForMovesUpTo;\n    gestureState.vx = (nextDX - gestureState.dx) / dt;\n    gestureState.vy = (nextDY - gestureState.dy) / dt;\n    gestureState.dx = nextDX;\n    gestureState.dy = nextDY;\n    gestureState._accountsForMovesUpTo = touchHistory.mostRecentTimeStamp;\n  },\n\n  /**\n   * @param {object} config Enhanced versions of all of the responder callbacks\n   * that provide not only the typical `ResponderSyntheticEvent`, but also the\n   * `PanResponder` gesture state.  Simply replace the word `Responder` with\n   * `PanResponder` in each of the typical `onResponder*` callbacks. For\n   * example, the `config` object would look like:\n   *\n   *  - `onMoveShouldSetPanResponder: (e, gestureState) => {...}`\n   *  - `onMoveShouldSetPanResponderCapture: (e, gestureState) => {...}`\n   *  - `onStartShouldSetPanResponder: (e, gestureState) => {...}`\n   *  - `onStartShouldSetPanResponderCapture: (e, gestureState) => {...}`\n   *  - `onPanResponderReject: (e, gestureState) => {...}`\n   *  - `onPanResponderGrant: (e, gestureState) => {...}`\n   *  - `onPanResponderStart: (e, gestureState) => {...}`\n   *  - `onPanResponderEnd: (e, gestureState) => {...}`\n   *  - `onPanResponderRelease: (e, gestureState) => {...}`\n   *  - `onPanResponderMove: (e, gestureState) => {...}`\n   *  - `onPanResponderTerminate: (e, gestureState) => {...}`\n   *  - `onPanResponderTerminationRequest: (e, gestureState) => {...}`\n   *  - `onShouldBlockNativeResponder: (e, gestureState) => {...}`\n   *\n   *  In general, for events that have capture equivalents, we update the\n   *  gestureState once in the capture phase and can use it in the bubble phase\n   *  as well.\n   *\n   *  Be careful with onStartShould* callbacks. They only reflect updated\n   *  `gestureState` for start/end events that bubble/capture to the Node.\n   *  Once the node is the responder, you can rely on every start/end event\n   *  being processed by the gesture and `gestureState` being updated\n   *  accordingly. (numberActiveTouches) may not be totally accurate unless you\n   *  are the responder.\n   */\n  create: function create(config) {\n    var interactionState = {\n      handle: null\n    };\n    var gestureState = {\n      // Useful for debugging\n      stateID: Math.random(),\n      moveX: 0,\n      moveY: 0,\n      x0: 0,\n      y0: 0,\n      dx: 0,\n      dy: 0,\n      vx: 0,\n      vy: 0,\n      numberActiveTouches: 0,\n      _accountsForMovesUpTo: 0\n    };\n    var panHandlers = {\n      onStartShouldSetResponder: function onStartShouldSetResponder(event) {\n        return config.onStartShouldSetPanResponder == null ? false : config.onStartShouldSetPanResponder(event, gestureState);\n      },\n      onMoveShouldSetResponder: function onMoveShouldSetResponder(event) {\n        return config.onMoveShouldSetPanResponder == null ? false : config.onMoveShouldSetPanResponder(event, gestureState);\n      },\n      onStartShouldSetResponderCapture: function onStartShouldSetResponderCapture(event) {\n        // TODO: Actually, we should reinitialize the state any time\n        // touches.length increases from 0 active to > 0 active.\n        if (event.nativeEvent.touches.length === 1) {\n          PanResponder._initializeGestureState(gestureState);\n        }\n\n        gestureState.numberActiveTouches = event.touchHistory.numberActiveTouches;\n        return config.onStartShouldSetPanResponderCapture != null ? config.onStartShouldSetPanResponderCapture(event, gestureState) : false;\n      },\n      onMoveShouldSetResponderCapture: function onMoveShouldSetResponderCapture(event) {\n        var touchHistory = event.touchHistory; // Responder system incorrectly dispatches should* to current responder\n        // Filter out any touch moves past the first one - we would have\n        // already processed multi-touch geometry during the first event.\n\n        if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {\n          return false;\n        }\n\n        PanResponder._updateGestureStateOnMove(gestureState, touchHistory);\n\n        return config.onMoveShouldSetPanResponderCapture ? config.onMoveShouldSetPanResponderCapture(event, gestureState) : false;\n      },\n      onResponderGrant: function onResponderGrant(event) {\n        if (!interactionState.handle) {\n          interactionState.handle = InteractionManager.createInteractionHandle();\n        }\n\n        gestureState.x0 = currentCentroidX(event.touchHistory);\n        gestureState.y0 = currentCentroidY(event.touchHistory);\n        gestureState.dx = 0;\n        gestureState.dy = 0;\n\n        if (config.onPanResponderGrant) {\n          config.onPanResponderGrant(event, gestureState);\n        } // TODO: t7467124 investigate if this can be removed\n\n\n        return config.onShouldBlockNativeResponder == null ? true : config.onShouldBlockNativeResponder(event, gestureState);\n      },\n      onResponderReject: function onResponderReject(event) {\n        clearInteractionHandle(interactionState, config.onPanResponderReject, event, gestureState);\n      },\n      onResponderRelease: function onResponderRelease(event) {\n        clearInteractionHandle(interactionState, config.onPanResponderRelease, event, gestureState);\n\n        PanResponder._initializeGestureState(gestureState);\n      },\n      onResponderStart: function onResponderStart(event) {\n        var touchHistory = event.touchHistory;\n        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n\n        if (config.onPanResponderStart) {\n          config.onPanResponderStart(event, gestureState);\n        }\n      },\n      onResponderMove: function onResponderMove(event) {\n        var touchHistory = event.touchHistory; // Guard against the dispatch of two touch moves when there are two\n        // simultaneously changed touches.\n\n        if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {\n          return;\n        } // Filter out any touch moves past the first one - we would have\n        // already processed multi-touch geometry during the first event.\n\n\n        PanResponder._updateGestureStateOnMove(gestureState, touchHistory);\n\n        if (config.onPanResponderMove) {\n          config.onPanResponderMove(event, gestureState);\n        }\n      },\n      onResponderEnd: function onResponderEnd(event) {\n        var touchHistory = event.touchHistory;\n        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n        clearInteractionHandle(interactionState, config.onPanResponderEnd, event, gestureState);\n      },\n      onResponderTerminate: function onResponderTerminate(event) {\n        clearInteractionHandle(interactionState, config.onPanResponderTerminate, event, gestureState);\n\n        PanResponder._initializeGestureState(gestureState);\n      },\n      onResponderTerminationRequest: function onResponderTerminationRequest(event) {\n        return config.onPanResponderTerminationRequest == null ? true : config.onPanResponderTerminationRequest(event, gestureState);\n      }\n    };\n    return {\n      panHandlers: panHandlers,\n      getInteractionHandle: function getInteractionHandle() {\n        return interactionState.handle;\n      }\n    };\n  }\n};\n\nfunction clearInteractionHandle(interactionState, callback, event, gestureState) {\n  if (interactionState.handle) {\n    InteractionManager.clearInteractionHandle(interactionState.handle);\n    interactionState.handle = null;\n  }\n\n  if (callback) {\n    callback(event, gestureState);\n  }\n}\n\nexport default PanResponder;","import PanResponder from '../../vendor/react-native/PanResponder';\nexport default PanResponder;","export type BoardObject = Array<Array<0 | 1 | 2>>;\n\nexport const generateRandom = (size: number) =>\n  Math.floor(Math.random() * size);\n\nexport const addFood = (\n  board: BoardObject,\n  used: {[key: string]: boolean} = {},\n): boolean => {\n  const x = generateRandom(board.length);\n  const y = generateRandom(board.length);\n\n  const combo = `${x}${y}`;\n  if (Object.keys(used).length === board.length) {\n    return false;\n  }\n  if (combo in used || board[x][y] !== 0) {\n    used[combo] = true;\n    addFood(board, used);\n    return false;\n  }\n  board[y][x] = 2;\n  return true;\n};\n\nexport const addStarting = (board: BoardObject) => {\n  const center = Math.floor(board.length / 2);\n  board[center][center] = 1;\n};\n\nexport const generateBoard = (size: number) => {\n  const board: BoardObject = [];\n  for (let i = 0; i < size; i++) {\n    board[i] = [];\n    for (let j = 0; j < size; j++) {\n      board[i][j] = 0;\n    }\n  }\n\n  addStarting(board);\n  addFood(board);\n  return board;\n};\n\nexport const nextSnakePosition = () => undefined;\nexport const collision = (next: any) => next && false;\nexport const endGame = () => undefined;\nexport const eat = () => undefined;\n","import React, {memo} from 'react';\nimport {useColor} from '../../../hooks';\nimport {useRootSelector} from '../../../utils';\nimport {View} from 'react-native';\nimport {getSmallestDimension} from '../../../models';\n\ninterface CellProps {\n  value: number;\n  length: number;\n}\n\nexport const Cell = memo(function Cell({value, length}: CellProps) {\n  const color = useColor();\n  const width = useRootSelector(getSmallestDimension) / length;\n  const backgroundColor =\n    value === 0 ? color.light : value === 1 ? color.success : color.danger;\n  return (\n    <View\n      style={{\n        flex: 1,\n        width,\n        height: width,\n        backgroundColor,\n      }}\n    />\n  );\n});\n","import {View} from 'react-native';\nimport {BoardObject} from './utils';\nimport React, {memo} from 'react';\nimport {Cell} from './Cell';\n\ninterface BoardProps {\n  board: BoardObject;\n}\n\nexport const Board = memo(function Board({board}: BoardProps) {\n  return (\n    <View style={{flex: 1, justifyContent: 'center'}}>\n      {board.map((x, i) => (\n        <View key={i} style={{flexDirection: 'row'}}>\n          {x.map((y, j) => (\n            <Cell key={`cell-${i}${j}`} value={y} length={board.length} />\n          ))}\n        </View>\n      ))}\n    </View>\n  );\n});\n","import {useCallback, useRef, useEffect} from 'react';\n\nexport type Frame = {\n  start: number;\n  current: number;\n  count: number;\n};\n\nconst initialFrame = {\n  start: Date.now(),\n  current: Date.now(),\n  count: 0,\n};\n\nexport const useGameLoop = (callback: (frame: Frame) => void) => {\n  const fps = 16;\n  const off = useRef(false);\n  const frame = useRef(initialFrame);\n\n  const loop = useCallback(() => {\n    setTimeout(() => {\n      if (off.current) {\n        return;\n      }\n      frame.current = {\n        ...frame.current,\n        current: Date.now(),\n        count: frame.current.count + 1,\n      };\n      callback(frame.current);\n      loop();\n    }, fps);\n  }, [callback]);\n\n  const start = useCallback(() => {\n    off.current = false;\n    loop();\n  }, [loop]);\n\n  const stop = useCallback(() => {\n    off.current = true;\n    frame.current = initialFrame;\n  }, []);\n\n  useEffect(() => {\n    return () => {\n      stop();\n    };\n  }, [stop]);\n\n  return {\n    frame,\n    start,\n    stop,\n  };\n};\n","import React, {memo} from 'react';\nimport {Modal, Text, Button} from '../../../components';\n\ninterface Props {\n  onPress(): void;\n}\n\nexport const EndGame = memo(function EndGame({onPress}: Props) {\n  return (\n    <Modal>\n      <Text title=\"good try\" />\n      <Button title=\"again\" onPress={onPress} />\n    </Modal>\n  );\n});\n","import React, {memo, useState, useCallback} from 'react';\nimport {View} from 'react-native';\nimport {Screen, Button} from '../../../components';\nimport {useColor, useNav} from '../../../hooks';\nimport {BoardObject, generateBoard} from './utils';\nimport {Board} from './Board';\nimport {useGameLoop} from './useGameLoop';\nimport {useGesture} from './useGesture';\nimport {EndGame} from './EndGame';\n\ntype State = 'on' | 'off';\n\ntype Game = {\n  board: BoardObject;\n  state: State;\n};\n\n// TODO: need to save the entire board to redux to load on app open\n\nexport default memo(function Snake() {\n  const color = useColor();\n  const nav = useNav();\n  const size = 20;\n  const [game, setGame] = useState<Game>({\n    board: generateBoard(size),\n    state: 'off',\n  });\n  const gesture = useGesture();\n\n  const {start, stop} = useGameLoop((frame) => {\n    if (frame.count >= 200) {\n      setGame((prev) => ({...prev, state: 'off'}));\n      stop();\n    }\n  });\n\n  const reset = useCallback(() => {\n    setGame({board: generateBoard(size), state: 'on'});\n    start();\n  }, [start]);\n\n  return (\n    <>\n      <Screen onLeftPress={nav.to('portfolioLanding')} title=\"Snake\">\n        <View style={{flexDirection: 'row', justifyContent: 'center'}}>\n          <Button title=\"start\" onPress={start} />\n          <Button title=\"stop\" onPress={stop} />\n        </View>\n        <View\n          style={{flex: 1, backgroundColor: color.success}}\n          {...gesture.panHandlers}>\n          <Board board={game.board} />\n        </View>\n      </Screen>\n      {game.state === 'off' && <EndGame onPress={reset} />}\n    </>\n  );\n});\n","import {useState} from 'react';\nimport {\n  PanResponder,\n  PanResponderInstance,\n  GestureResponderHandlers,\n} from 'react-native';\n\nexport type Direction = 'left' | 'right' | 'up' | 'down';\n\nexport const useGesture = (): {\n  panHandlers: GestureResponderHandlers;\n  direction: Direction;\n} => {\n  const [direction, setDirection] = useState<Direction>('up');\n  const panResponder: PanResponderInstance = PanResponder.create({\n    onStartShouldSetPanResponder: () => true,\n    onPanResponderRelease: (_, g) => {\n      if (Math.abs(g.dx) >= Math.abs(g.dy)) {\n        setDirection(g.dx >= 0 ? 'right' : 'left');\n      } else {\n        setDirection(g.dy >= 0 ? 'down' : 'up');\n      }\n    },\n  });\n\n  return {direction, panHandlers: panResponder.panHandlers};\n};\n"],"sourceRoot":""}