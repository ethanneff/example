{"version":3,"sources":["apps/Playground/Ball/index.tsx"],"names":["memo","height","useRootSelector","getHeight","width","getWidth","nav","useNav","ballPosition","Animated","ValueXY","x","y","useDriver","useNativeDriver","color","useColor","styles","StyleSheet","create","ball","borderColor","text","borderRadius","borderWidth","marginLeft","marginTop","button","flexDirection","justifyContent","animate","useCallback","dx","dy","spring","toValue","start","onInitialPress","onRandomPress","Math","random","onLeftPress","to","title","View","style","getLayout","onPress"],"mappings":"qGAAA,kFAOeA,0BAAK,WAClB,IAAMC,EAASC,YAAgBC,KACzBC,EAAQF,YAAgBG,KACxBC,EAAMC,cACNC,EAAe,IAAIC,IAASC,QAAQ,CAACC,EAAGP,EAAQ,EAAGQ,EAAGX,EAAS,IAC/DY,EAAYC,cACZC,EAAQC,cACRC,EAASC,IAAWC,OAAO,CAC/BC,KAAM,CACJC,YAAaN,EAAMO,KACnBC,aAAc,GACdC,YAAa,GACbvB,OAAQ,GACRwB,YAAa,GACbC,WAAY,GACZtB,MAAO,IAETuB,OAAQ,CACNC,cAAe,MACfC,eAAgB,kBAGdC,EAAUC,uBACd,SAACC,EAAYC,GACXxB,IAASyB,OAAO1B,EAAc,CAC5B2B,QAAS,CAACxB,EAAGP,EAAQ4B,EAAIpB,EAAGX,EAASgC,GACrCnB,gBAAiBD,IAChBuB,UAEL,CAAC5B,EAAcP,EAAQY,EAAWT,IAE9BiC,EAAiBN,uBAAY,kBAAMD,EAAQ,GAAK,MAAM,CAACA,IACvDQ,EAAgBP,uBACpB,kBAAMD,EAAQS,KAAKC,SAAUD,KAAKC,YAClC,CAACV,IAEH,OACE,kBAAC,IAAD,CAAQW,YAAanC,EAAIoC,GAAG,cAAeC,MAAM,QAC/C,kBAAC,IAASC,KAAV,CAAeC,MAAO,CAACrC,EAAasC,YAAa7B,EAAOG,QACxD,kBAAC,IAAD,CAAMyB,MAAO5B,EAAOU,QAClB,kBAAC,IAAD,CAAQoB,QAASV,EAAgBM,MAAM,YACvC,kBAAC,IAAD,CAAQI,QAAST,EAAeK,MAAM","file":"static/js/30.d233aa26.chunk.js","sourcesContent":["import React, {memo, useCallback} from 'react';\nimport {Animated, StyleSheet, View} from 'react-native';\nimport {Button, Screen} from '../../../components';\nimport {getHeight, getWidth} from '../../../models';\nimport {useColor, useNativeDriver, useNav} from '../../../hooks';\nimport {useRootSelector} from '../../../utils';\n\nexport default memo(function PlaygroundBall() {\n  const height = useRootSelector(getHeight);\n  const width = useRootSelector(getWidth);\n  const nav = useNav();\n  const ballPosition = new Animated.ValueXY({x: width / 2, y: height / 2});\n  const useDriver = useNativeDriver();\n  const color = useColor();\n  const styles = StyleSheet.create({\n    ball: {\n      borderColor: color.text,\n      borderRadius: 30,\n      borderWidth: 30,\n      height: 60,\n      marginLeft: -30,\n      marginTop: -30,\n      width: 60,\n    },\n    button: {\n      flexDirection: 'row',\n      justifyContent: 'space-around',\n    },\n  });\n  const animate = useCallback(\n    (dx: number, dy: number) => {\n      Animated.spring(ballPosition, {\n        toValue: {x: width * dx, y: height * dy},\n        useNativeDriver: useDriver,\n      }).start();\n    },\n    [ballPosition, height, useDriver, width],\n  );\n  const onInitialPress = useCallback(() => animate(0.5, 0.5), [animate]);\n  const onRandomPress = useCallback(\n    () => animate(Math.random(), Math.random()),\n    [animate],\n  );\n  return (\n    <Screen onLeftPress={nav.to('playground')} title=\"Ball\">\n      <Animated.View style={[ballPosition.getLayout(), styles.ball]} />\n      <View style={styles.button}>\n        <Button onPress={onInitialPress} title=\"initial\" />\n        <Button onPress={onRandomPress} title=\"random\" />\n      </View>\n    </Screen>\n  );\n});\n"],"sourceRoot":""}