{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toArray.js","apps/Debug/screens/Stopwatch/Timer.tsx","apps/Debug/screens/Stopwatch/ButtonRound.tsx","apps/Debug/screens/Stopwatch/Lap.tsx","apps/Debug/screens/Stopwatch/LapsTable.tsx","apps/Debug/screens/Stopwatch/ButtonsRow.tsx","apps/Debug/screens/Stopwatch/index.tsx"],"names":["_toArray","arr","arrayWithHoles","iterableToArray","unsupportedIterableToArray","nonIterableRest","memo","interval","style","pad","n","toString","minutes","Math","floor","seconds","milliseconds","styles","StyleSheet","create","timerContainer","flexDirection","View","Text","substr","title","color","background","onPress","disabled","button","alignItems","borderRadius","height","justifyContent","width","buttonBorder","borderWidth","buttonTitle","fontSize","backgroundColor","activeOpacity","num","fastest","slowest","lap","borderColor","borderTopWidth","paddingVertical","lapText","fontFamily","lapStyle","laps","timer","finishedLaps","slice","min","Number","MAX_SAFE_INTEGER","max","MIN_SAFE_INTEGER","length","forEach","scrollView","alignSelf","ScrollView","map","index","key","children","buttonsRow","marginBottom","marginTop","nav","useNav","useState","now","start","state","setState","useRef","elapsed","reduce","total","curr","container","flex","paddingHorizontal","paddingTop","fontWeight","useEffect","current","clearTimeout","timestamp","Date","getTime","firstLap","other","run","setInterval","prev","onLeftPress","to","clearInterval"],"mappings":"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","file":"static/js/36.a6bf3297.chunk.js","sourcesContent":["import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _toArray(arr) {\n  return arrayWithHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableRest();\n}","import React, {memo} from 'react';\nimport {View, StyleSheet, Text, TextStyle, StyleProp} from 'react-native';\n\ninterface TimerProps {\n  interval: number;\n  style: StyleProp<TextStyle>;\n}\n\nexport default memo(function Timer({interval, style}: TimerProps) {\n  const pad = (n: number): string =>\n    (n < 10 ? '0' + n.toString() : n).toString();\n  const minutes = Math.floor(interval / 60000);\n  const seconds = Math.floor((interval % 60000) / 1000);\n  const milliseconds = Math.floor((interval % 60000) % 1000);\n  const styles = StyleSheet.create({\n    timerContainer: {\n      flexDirection: 'row',\n    },\n  });\n  return (\n    <View style={styles.timerContainer}>\n      <Text style={style}>{pad(minutes)}:</Text>\n      <Text style={style}>{pad(seconds)}.</Text>\n      <Text style={style}>{pad(milliseconds).substr(0, 2)}</Text>\n    </View>\n  );\n});\n","import React, {memo} from 'react';\nimport {StyleSheet, View, Text} from 'react-native';\nimport {TouchableOpacity} from '../../../../components';\n\ninterface RoundButtonProps {\n  title: string;\n  color: string;\n  background: string;\n  disabled?: boolean;\n  onPress(): void;\n}\n\nexport default memo(function ButtonRound({\n  title,\n  color,\n  background,\n  onPress,\n  disabled = false,\n}: RoundButtonProps) {\n  const styles = StyleSheet.create({\n    button: {\n      alignItems: 'center',\n      borderRadius: 40,\n      height: 80,\n      justifyContent: 'center',\n      width: 80,\n    },\n    buttonBorder: {\n      alignItems: 'center',\n      borderRadius: 38,\n      borderWidth: 1,\n      height: 76,\n      justifyContent: 'center',\n      width: 76,\n    },\n    buttonTitle: {\n      fontSize: 18,\n    },\n  });\n\n  return (\n    <TouchableOpacity\n      onPress={() => !disabled && onPress()}\n      style={[styles.button, {backgroundColor: background}]}\n      activeOpacity={disabled ? 1.0 : 0.7}>\n      <View style={styles.buttonBorder}>\n        <Text style={[styles.buttonTitle, {color}]}>{title}</Text>\n      </View>\n    </TouchableOpacity>\n  );\n});\n","import React, {memo} from 'react';\nimport {View, StyleSheet, Text} from 'react-native';\nimport Timer from './Timer';\n\ninterface LapProps {\n  num: number;\n  interval: number;\n  fastest: boolean;\n  slowest: boolean;\n}\n\nexport default memo(function Lap({num, interval, fastest, slowest}: LapProps) {\n  const styles = StyleSheet.create({\n    fastest: {\n      color: '#4BC05F',\n    },\n    lap: {\n      borderColor: '#151515',\n      borderTopWidth: 1,\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      paddingVertical: 10,\n    },\n    lapText: {\n      color: '#FFFFFF',\n      fontFamily: 'Courier',\n      fontSize: 18,\n    },\n    slowest: {\n      color: '#CC3531',\n    },\n  });\n  const lapStyle = [\n    styles.lapText,\n    fastest && styles.fastest,\n    slowest && styles.slowest,\n  ];\n\n  return (\n    <View style={styles.lap}>\n      <Text style={lapStyle}>Lap {num}</Text>\n      <Timer style={lapStyle} interval={interval} />\n    </View>\n  );\n});\n","import React, {memo} from 'react';\nimport {ScrollView, StyleSheet} from 'react-native';\nimport Lap from './Lap';\n\ninterface LapTableProps {\n  laps: number[];\n  timer: number;\n}\n\nexport default memo(function LapsTable({laps, timer}: LapTableProps) {\n  const finishedLaps = laps.slice(1);\n  let min = Number.MAX_SAFE_INTEGER;\n  let max = Number.MIN_SAFE_INTEGER;\n  if (finishedLaps.length >= 2) {\n    finishedLaps.forEach((lap) => {\n      if (lap < min) {\n        min = lap;\n      }\n      if (lap > max) {\n        max = lap;\n      }\n    });\n  }\n  const styles = StyleSheet.create({\n    scrollView: {\n      alignSelf: 'stretch',\n    },\n  });\n  return (\n    <ScrollView style={styles.scrollView}>\n      {laps.map((lap, index) => (\n        <Lap\n          num={laps.length - index}\n          key={laps.length - index}\n          interval={index === 0 ? timer + lap : lap}\n          fastest={lap === min}\n          slowest={lap === max}\n        />\n      ))}\n    </ScrollView>\n  );\n});\n","import React, {memo} from 'react';\nimport {View, StyleSheet} from 'react-native';\n\ninterface ButtonRowProps {\n  children: React.ReactElement | React.ReactElement[];\n}\n\nexport default memo(function ButtonsRow({children}: ButtonRowProps) {\n  const styles = StyleSheet.create({\n    buttonsRow: {\n      alignSelf: 'stretch',\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      marginBottom: 30,\n      marginTop: 80,\n    },\n  });\n  return <View style={styles.buttonsRow}>{children}</View>;\n});\n","import React, {memo, useState, useRef, useEffect} from 'react';\nimport {StyleSheet} from 'react-native';\nimport {Screen} from '../../../../components';\nimport {useNav} from '../../../../hooks';\nimport Timer from './Timer';\nimport RoundButton from './ButtonRound';\nimport LapsTable from './LapsTable';\nimport ButtonsRow from './ButtonsRow';\n\ninterface State {\n  laps: number[];\n  now: number;\n  start: number;\n}\n\nexport default memo(function DebugStopWatch() {\n  const nav = useNav();\n  const [state, setState] = useState<State>({\n    laps: [],\n    now: 0,\n    start: 0,\n  });\n  const timer = useRef<NodeJS.Timeout | null>(null);\n  const elapsed = state.now - state.start;\n  const interval =\n    state.laps.reduce((total, curr) => total + curr, 0) + elapsed;\n\n  const styles = StyleSheet.create({\n    container: {\n      alignItems: 'center',\n      backgroundColor: '#0D0D0D',\n      flex: 1,\n      paddingHorizontal: 20,\n      paddingTop: 130,\n    },\n    timer: {\n      color: '#FFFFFF',\n      fontFamily: 'Courier',\n      fontSize: 54,\n      fontWeight: '200',\n    },\n  });\n\n  useEffect(() => {\n    return () => {\n      if (timer.current) {\n        clearTimeout(timer.current);\n      }\n    };\n  }, [timer]);\n\n  const lap = () => {\n    const timestamp = new Date().getTime();\n    const {laps, now, start} = state;\n    const [firstLap, ...other] = laps;\n    setState({\n      laps: [0, firstLap + now - start, ...other],\n      now: timestamp,\n      start: timestamp,\n    });\n  };\n\n  const stop = () => {\n    if (timer.current) {\n      clearInterval(timer.current);\n    }\n    const {laps, now, start} = state;\n    const [firstLap, ...other] = laps;\n    setState({laps: [firstLap + now - start, ...other], now: 0, start: 0});\n  };\n\n  const reset = () => {\n    setState({laps: [], now: 0, start: 0});\n  };\n\n  const run = () => {\n    timer.current = setInterval(() => {\n      setState((prev) => ({...prev, now: new Date().getTime()}));\n    }, 100);\n  };\n\n  const start = () => {\n    const now = new Date().getTime();\n    setState({laps: [0], now, start: now});\n    run();\n  };\n\n  const resume = () => {\n    const now = new Date().getTime();\n    setState((prev) => ({\n      ...prev,\n      now,\n      start: now,\n    }));\n    run();\n  };\n\n  return (\n    <Screen onLeftPress={nav.to('debug')} style={styles.container}>\n      <Timer interval={interval} style={styles.timer} />\n      {state.laps.length === 0 && (\n        <ButtonsRow>\n          <RoundButton\n            title=\"Lap\"\n            color=\"#8B8B90\"\n            background=\"#151515\"\n            onPress={lap}\n            disabled\n          />\n          <RoundButton\n            title=\"Start\"\n            color=\"#50D167\"\n            background=\"#1B361F\"\n            onPress={start}\n          />\n        </ButtonsRow>\n      )}\n      {state.start > 0 && (\n        <ButtonsRow>\n          <RoundButton\n            title=\"Lap\"\n            color=\"#FFFFFF\"\n            background=\"#3D3D3D\"\n            onPress={lap}\n          />\n          <RoundButton\n            title=\"Stop\"\n            color=\"#E33935\"\n            background=\"#3C1715\"\n            onPress={stop}\n          />\n        </ButtonsRow>\n      )}\n      {state.laps.length > 0 && state.start === 0 && (\n        <ButtonsRow>\n          <RoundButton\n            title=\"Reset\"\n            color=\"#FFFFFF\"\n            background=\"#3D3D3D\"\n            onPress={reset}\n          />\n          <RoundButton\n            title=\"Start\"\n            color=\"#50D167\"\n            background=\"#1B361F\"\n            onPress={resume}\n          />\n        </ButtonsRow>\n      )}\n      <LapsTable laps={state.laps} timer={elapsed} />\n    </Screen>\n  );\n});\n"],"sourceRoot":""}