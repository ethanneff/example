{"version":3,"sources":["apps/Complete/configs.tsx","apps/Complete/components/TextInputWithIcons.tsx","apps/Complete/components/AddButton.tsx","apps/Complete/components/AddItem.tsx","apps/Complete/components/AddList.tsx","apps/Complete/components/Card.tsx","apps/Complete/components/ListHeader.tsx","apps/Complete/components/ListItem.tsx","apps/Complete/components/ListItems.tsx","apps/Complete/components/List.tsx","apps/Complete/components/Board.tsx","apps/Complete/components/OrganizeButton.tsx","apps/Complete/screens/Account/factory.ts","apps/Complete/screens/Account/index.tsx","apps/Complete/screens/Capture/index.tsx","apps/Complete/screens/ItemDetail/index.tsx","apps/Complete/screens/Landing/index.tsx","apps/Complete/screens/Project/index.tsx","apps/Complete/screens/Projects/index.tsx","apps/Complete/screens/Reflect/Graph.tsx","apps/Complete/screens/Reflect/index.tsx","apps/Complete/index.tsx"],"names":["config","borderRadius","Theme","padding","p02","p04","alert","width","height","TextInputWithIcons","memo","value","placeholder","backgroundColor","pointerEvents","focusOnLoad","icons","type","onSubmit","onFocus","onBlur","onRef","color","useColor","bgColor","background","useState","text","setText","showControls","setShowControls","onTextChange","useCallback","change","onFocusInternal","onSubmitInternal","trim","length","onBlurInternal","onIconPressInternal","callback","View","style","flex","flexDirection","onChangeText","onSubmitEditing","returnKeyType","alignItems","map","icon","hidden","focus","disabled","required","name","onPress","padded","AddButton","title","textInputRef","useRef","showInput","setShowInput","onAddItemPress","p","onItemTitleClose","onItemTitleSubmit","current","primary","p12","justifyContent","center","AddItem","listId","dispatch","useRootDispatch","itemId","v4","date","Date","now","item","id","active","createdAt","updatedAt","createItem","updateListAddItem","AddList","boardId","list","items","createList","updateBoardAddList","Card","children","onLayout","margin","marginRight","marginBottom","ListHeader","listTitle","useRootSelector","s","completeList","onSave","updateListTitle","Keyboard","dismiss","onDetail","ListItem","completeItem","navigate","useNavigation","updateItem","onItemNav","board","Error","setActiveBoard","onItemDetails","setActiveItem","setActiveList","onItemLongPress","console","log","onItemPress","TouchableOpacity","activeOpacity","onLongPress","surface","ListItems","maxHeight","listItems","cardsRef","cardsLength","onKeyExtractor","onCardSizeChange","scrollToEnd","onRenderItem","FlatList","data","keyExtractor","keyboardShouldPersistTaps","onContentSizeChange","ref","renderItem","showsVerticalScrollIndicator","List","orientation","listWidth","listMaxHeight","Board","listSize","completeBoard","getItemId","getItemLayout","_","index","offset","renderAddList","renderList","ListFooterComponent","contentContainerStyle","lists","decelerationRate","horizontal","showsHorizontalScrollIndicator","snapToAlignment","snapToInterval","OrganizeButton","disable","defaults","Account","goBack","navBack","onLogin","inboxItems","inboxList","inboxBoard","homeItems","homeLists","homeBoard","projectItems","projectsList","listsItems","listsList","categoryBoard","user","boards","getDefaultUserTemplate","createBoard","createUser","onLogout","removeUser","onSetActive","setActiveUser","onNavToAdmin","onBackgroundPress","paddingBottom","emphasis","Capture","keyboardHeight","state","device","container","button","dimensions","setDimensions","android","Platform","OS","listHeight","getInboxListId","onOrganize","key","event","nativeEvent","layout","navToAccount","onRightPress","rightIcon","render","ItemDetail","setTitle","description","setDescription","onTitleChange","v","onDescriptionChange","onItemSave","onItemDelete","removeItem","updateListRemoveItem","Landing","navPortfolioLogin","slides","info","warning","success","brand","Project","screenWidth","getSmallestDimension","setContainer","onLeftPress","Projects","listIds","getCategoryListIds","getDomain","domain","Math","min","max","Graph","scaleX","scaleTime","d","range","scaleY","scaleLinear","strokeWidth","shape","x","y","curve","StyleSheet","absoluteFill","x1","x2","y1","y2","stopColor","fill","stroke","Title","getTime","Reflect","ScrollView","Dimensions","get","noHeader","headerShown","RootTab","createBottomTabNavigator","RootStack","createStackNavigator","ProjectsStack","tabIcons","capture","focused","unfocused","reflect","Focus","Navigator","screenOptions","Screen","component","Tabs","tabBarOptions","keyboardHidesTabBar","activeTintColor","inactiveTintColor","secondary","showLabel","route","tabBarIcon","size","iconColor","Main","completeUser","mode","rootMode","rootScreenOptions","Notification","Modal"],"mappings":"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","file":"static/js/12.1a2d4832.chunk.js","sourcesContent":["import {Theme} from '../../utils';\n\nexport const config = {\n  borderRadius: Theme.padding.p02,\n  padding: Theme.padding.p04,\n  alert: {\n    width: 0.8,\n    height: 0.6,\n  },\n};\n","import React, {memo, MutableRefObject, useCallback, useState} from 'react';\nimport {TextInput as Original, View} from 'react-native';\nimport {Icon, TextInput} from '../../../components';\nimport {PointerEvents} from '../../../components/TextInput/types';\nimport {useColor} from '../../../hooks';\nimport {FontType} from '../../../utils';\n\ntype Icon = {\n  name: string;\n  onPress: (text: string) => void;\n  hidden?: boolean;\n  color?: string;\n  focus?: boolean;\n  required?: boolean;\n};\n\ntype TextInputWithIconsProps = {\n  value: string;\n  placeholder: string;\n  icons: Icon[];\n  onRef?: MutableRefObject<Original | null>;\n  onSubmit: (text: string) => void;\n  backgroundColor?: string;\n  pointerEvents?: PointerEvents;\n  type?: FontType;\n  focusOnLoad?: boolean;\n  onBlur?: () => void;\n  onFocus?: () => void;\n};\n\nexport const TextInputWithIcons = memo(function TextInputWithIcons({\n  value,\n  placeholder,\n  backgroundColor,\n  pointerEvents,\n  focusOnLoad,\n  icons,\n  type,\n  onSubmit,\n  onFocus,\n  onBlur,\n  onRef,\n}: TextInputWithIconsProps) {\n  const color = useColor();\n  const bgColor = backgroundColor || color.background;\n  const [text, setText] = useState(value);\n  const [showControls, setShowControls] = useState(false);\n\n  const onTextChange = useCallback((change) => {\n    setText(change);\n  }, []);\n\n  const onFocusInternal = useCallback(() => {\n    setShowControls(true);\n    if (onFocus) onFocus();\n  }, [onFocus]);\n\n  const onSubmitInternal = useCallback(() => {\n    if (text.trim().length === 0) return;\n    onSubmit(text);\n    setText('');\n  }, [onSubmit, text]);\n\n  const onBlurInternal = useCallback(() => {\n    setText(value);\n    setShowControls(false);\n    if (onBlur) onBlur();\n  }, [onBlur, value]);\n\n  const onIconPressInternal = useCallback(\n    (callback) => () => {\n      callback(text);\n      setText('');\n    },\n    [text],\n  );\n\n  return (\n    <View style={{flex: 1, flexDirection: 'row'}}>\n      <TextInput\n        backgroundColor={bgColor}\n        flex\n        focusOnLoad={focusOnLoad}\n        onBlur={onBlurInternal}\n        onChangeText={onTextChange}\n        onFocus={onFocusInternal}\n        onRef={onRef}\n        onSubmitEditing={onSubmitInternal}\n        placeholder={placeholder}\n        pointerEvents={pointerEvents}\n        returnKeyType=\"done\"\n        type={type}\n        value={text}\n      />\n      <View style={{flexDirection: 'row', alignItems: 'center'}}>\n        {icons.map((icon) =>\n          icon.hidden ||\n          (showControls && !icon.focus) ||\n          (!showControls && icon.focus) ? null : (\n            <Icon\n              color={icon.color}\n              disabled={icon.required && text.trim().length === 0}\n              key={`${icon.name}-focus`}\n              name={icon.name}\n              onPress={onIconPressInternal(icon.onPress)}\n              padded\n            />\n          ),\n        )}\n      </View>\n    </View>\n  );\n});\n","import React, {memo, useCallback, useRef, useState} from 'react';\nimport {TextInput as OriginalTextInput, View} from 'react-native';\nimport {Button} from '../../../components';\nimport {useColor} from '../../../hooks';\nimport {Theme} from '../../../utils';\nimport {config} from '../configs';\nimport {TextInputWithIcons} from './TextInputWithIcons';\n\ntype AddButtonProps = {\n  width?: number;\n  placeholder: string;\n  title: string;\n  onSubmit: (value: string) => void;\n};\n\nexport const AddButton = memo(function AddButton({\n  width,\n  placeholder,\n  title,\n  onSubmit,\n}: AddButtonProps) {\n  const color = useColor();\n  const textInputRef = useRef<OriginalTextInput | null>(null);\n  const [showInput, setShowInput] = useState(false);\n  const onAddItemPress = useCallback(() => setShowInput((p) => !p), []);\n\n  const onItemTitleClose = useCallback(() => {\n    setShowInput(false);\n  }, []);\n\n  const onItemTitleSubmit = useCallback(\n    (text) => {\n      onSubmit(text);\n      textInputRef.current?.focus();\n    },\n    [onSubmit],\n  );\n\n  const onBlur = useCallback(() => {\n    setShowInput(false);\n  }, []);\n\n  const icons = [\n    {name: 'close', onPress: onItemTitleClose, focus: true},\n    {\n      name: 'send',\n      onPress: onItemTitleSubmit,\n      color: color.primary,\n      focus: true,\n      required: true,\n    },\n  ];\n\n  return (\n    <View\n      style={{\n        width,\n        height: Theme.padding.p12,\n        borderRadius: config.borderRadius,\n        backgroundColor: color.background,\n        justifyContent: 'center',\n      }}>\n      {showInput ? (\n        <TextInputWithIcons\n          focusOnLoad\n          icons={icons}\n          onBlur={onBlur}\n          onSubmit={onItemTitleSubmit}\n          placeholder={placeholder}\n          value=\"\"\n        />\n      ) : (\n        <Button center color=\"primary\" onPress={onAddItemPress} title={title} />\n      )}\n    </View>\n  );\n});\n","import React, {memo, useCallback} from 'react';\nimport {v4} from 'uuid';\nimport {useRootDispatch} from '../../../utils';\nimport {createItem, Item, updateListAddItem} from '../models';\nimport {AddButton} from './AddButton';\n\ntype AddItemProps = {\n  listId: string;\n  placeholder: string;\n  title: string;\n};\n\nexport const AddItem = memo(function AddItem({\n  placeholder,\n  title,\n  listId,\n}: AddItemProps) {\n  const dispatch = useRootDispatch();\n  const onSubmit = useCallback(\n    (value: string) => {\n      const itemId = v4();\n      const date = Date.now();\n      const item: Item = {\n        id: itemId,\n        active: true,\n        title: value,\n        createdAt: date,\n        updatedAt: date,\n      };\n      dispatch(createItem(item));\n      dispatch(updateListAddItem({listId, itemId}));\n    },\n    [dispatch, listId],\n  );\n\n  return (\n    <AddButton onSubmit={onSubmit} placeholder={placeholder} title={title} />\n  );\n});\n","import React, {memo, useCallback} from 'react';\nimport {v4} from 'uuid';\nimport {useRootDispatch} from '../../../utils';\nimport {createList, List, updateBoardAddList} from '../models';\nimport {AddButton} from './AddButton';\n\ntype AddListProps = {\n  boardId: string;\n  placeholder: string;\n  title: string;\n  width: number;\n};\n\nexport const AddList = memo(function AddList({\n  placeholder,\n  title,\n  boardId,\n  width,\n}: AddListProps) {\n  const dispatch = useRootDispatch();\n  const onSubmit = useCallback(\n    (value: string) => {\n      const listId = v4();\n      const date = Date.now();\n      const list: List = {\n        id: listId,\n        active: true,\n        title: value,\n        createdAt: date,\n        updatedAt: date,\n        items: [],\n      };\n      dispatch(createList(list));\n      dispatch(updateBoardAddList({boardId, listId}));\n    },\n    [boardId, dispatch],\n  );\n\n  return (\n    <AddButton\n      onSubmit={onSubmit}\n      placeholder={placeholder}\n      title={title}\n      width={width}\n    />\n  );\n});\n","import React, {memo, ReactElement} from 'react';\nimport {LayoutChangeEvent, View} from 'react-native';\nimport {useColor} from '../../../hooks';\nimport {config} from '../configs';\n\n// TODO: combine card components with global card\n\ntype CardProps = {\n  onLayout?: (event: LayoutChangeEvent) => void;\n  children: ReactElement | ReactElement[];\n  margin?: 'bottom' | 'right';\n  width?: number;\n};\n\nexport const Card = memo(function Card({\n  children,\n  onLayout,\n  margin = 'bottom',\n  width,\n}: CardProps) {\n  const color = useColor();\n  return (\n    <View\n      onLayout={onLayout}\n      style={{\n        width,\n        borderRadius: config.borderRadius,\n        backgroundColor: color.background,\n        padding: config.padding / 2,\n        marginRight: margin === 'right' ? config.padding : 0,\n        marginBottom: margin === 'bottom' ? config.padding : 0,\n      }}>\n      {children}\n    </View>\n  );\n});\n","import React, {memo, useCallback} from 'react';\nimport {Keyboard, View} from 'react-native';\nimport {useColor} from '../../../hooks';\nimport {useRootDispatch, useRootSelector} from '../../../utils';\nimport {updateListTitle} from '../models';\nimport {TextInputWithIcons} from './TextInputWithIcons';\n\ntype ListHeaderProps = {\n  listId: string;\n};\n\nexport const ListHeader = memo(function ListHeader({listId}: ListHeaderProps) {\n  const dispatch = useRootDispatch();\n  const color = useColor();\n  const listTitle = useRootSelector((s) => s.completeList.items[listId].title);\n\n  const onSave = useCallback(\n    (title) => {\n      dispatch(updateListTitle({listId, title}));\n      Keyboard.dismiss();\n    },\n    [dispatch, listId],\n  );\n\n  const onDetail = useCallback(() => undefined, []);\n\n  const onClose = useCallback(() => Keyboard.dismiss(), []);\n\n  const icons = [\n    {name: 'close', onPress: onClose, focus: true},\n    {\n      name: 'send',\n      onPress: onSave,\n      color: color.primary,\n      focus: true,\n      required: true,\n    },\n    {name: 'dots-horizontal', onPress: onDetail},\n  ];\n\n  return (\n    <View\n      style={{\n        flexDirection: 'row',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n      }}>\n      <TextInputWithIcons\n        icons={icons}\n        onSubmit={onSave}\n        placeholder=\"List title...\"\n        type=\"h4\"\n        value={listTitle}\n      />\n    </View>\n  );\n});\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback, useRef} from 'react';\nimport {\n  Keyboard,\n  TextInput as OriginalTextInput,\n  TouchableOpacity,\n} from 'react-native';\nimport {useColor} from '../../../hooks';\nimport {useRootDispatch, useRootSelector} from '../../../utils';\nimport {config} from '../configs';\nimport {\n  setActiveBoard,\n  setActiveItem,\n  setActiveList,\n  updateItem,\n} from '../models';\nimport {TextInputWithIcons} from './TextInputWithIcons';\n\ntype ListItemProps = {\n  itemId: string;\n  listId: string;\n};\n\nexport const ListItem = memo(function ListItem({\n  itemId,\n  listId,\n}: ListItemProps) {\n  const item = useRootSelector((s) => s.completeItem.items[itemId]);\n  const textInputRef = useRef<OriginalTextInput | null>(null);\n  const dispatch = useRootDispatch();\n  const {navigate} = useNavigation();\n  const color = useColor();\n\n  const onItemTitleClose = useCallback(() => {\n    Keyboard.dismiss();\n  }, []);\n\n  const onItemTitleSubmit = useCallback(\n    (title: string) => {\n      dispatch(updateItem({...item, title}));\n      Keyboard.dismiss();\n    },\n    [dispatch, item],\n  );\n\n  const onItemNav = useCallback(() => {\n    if (!item.board)\n      throw new Error('item does not have a board to navigate to');\n    dispatch(setActiveBoard(item.board));\n    navigate('board');\n  }, [dispatch, item.board, navigate]);\n\n  const onItemDetails = useCallback(() => {\n    dispatch(setActiveItem(itemId));\n    dispatch(setActiveList(listId));\n    navigate('item-detail');\n  }, [dispatch, itemId, listId, navigate]);\n\n  const onItemLongPress = useCallback(() => {\n    console.log('long press');\n  }, []);\n\n  const onItemPress = useCallback(() => {\n    textInputRef.current?.focus();\n  }, []);\n\n  const icons = [\n    {name: 'close', onPress: onItemTitleClose, focus: true},\n    {\n      name: 'send',\n      onPress: onItemTitleSubmit,\n      color: color.primary,\n      focus: true,\n      required: true,\n    },\n    {name: 'dots-horizontal', onPress: onItemDetails},\n    {name: 'chevron-right', onPress: onItemNav, hidden: !item.board},\n  ];\n\n  return (\n    <TouchableOpacity\n      activeOpacity={1}\n      key={item.id}\n      onLongPress={onItemLongPress}\n      onPress={onItemPress}\n      style={{\n        flex: 1,\n        borderRadius: config.borderRadius,\n        margin: config.padding / 2,\n        backgroundColor: color.surface,\n        flexDirection: 'row',\n      }}>\n      <TextInputWithIcons\n        backgroundColor={color.surface}\n        icons={icons}\n        onRef={textInputRef}\n        onSubmit={onItemTitleSubmit}\n        placeholder=\"Item name...\"\n        pointerEvents=\"none\"\n        value={item.title}\n      />\n    </TouchableOpacity>\n  );\n});\n","import React, {memo, useCallback, useRef} from 'react';\nimport {FlatList, ListRenderItem} from 'react-native';\nimport {useRootSelector} from '../../../utils';\nimport {ListItem} from './ListItem';\n\ntype ListItemsProps = {\n  listId: string;\n  maxHeight?: number;\n};\n\nexport const ListItems = memo(function ListItems({\n  listId,\n  maxHeight,\n}: ListItemsProps) {\n  const listItems = useRootSelector((s) => s.completeList.items[listId].items);\n  const cardsRef = useRef<FlatList | null>(null);\n  const cardsLength = useRef(listItems.length);\n\n  const onKeyExtractor = useCallback((item) => item, []);\n\n  const onCardSizeChange = useCallback(() => {\n    if (listItems.length > cardsLength.current) {\n      cardsRef.current?.scrollToEnd();\n      cardsLength.current = listItems.length;\n    }\n  }, [listItems.length]);\n\n  const onRenderItem: ListRenderItem<string> = useCallback(\n    ({item}) => {\n      return <ListItem itemId={item} key={item} listId={listId} />;\n    },\n    [listId],\n  );\n\n  return (\n    <FlatList\n      data={listItems}\n      keyExtractor={onKeyExtractor}\n      keyboardShouldPersistTaps=\"handled\"\n      onContentSizeChange={onCardSizeChange}\n      ref={cardsRef}\n      renderItem={onRenderItem}\n      showsVerticalScrollIndicator={false}\n      style={{maxHeight}}\n    />\n  );\n});\n","import React, {memo} from 'react';\nimport {View} from 'react-native';\nimport {AddItem} from './AddItem';\nimport {Card} from './Card';\nimport {ListHeader} from './ListHeader';\nimport {ListItems} from './ListItems';\n\ntype ListProps = {\n  listWidth?: number;\n  listId: string;\n  listMaxHeight: number;\n  orientation?: 'vertical' | 'horizontal';\n  title: string;\n  placeholder: string;\n};\n\nexport const List = memo(function List({\n  listId,\n  orientation,\n  listWidth,\n  listMaxHeight,\n  title,\n  placeholder,\n}: ListProps) {\n  const margin = orientation === 'horizontal' ? 'right' : 'bottom';\n  return (\n    <View>\n      <Card margin={margin} width={listWidth}>\n        <ListHeader listId={listId} />\n        <ListItems listId={listId} maxHeight={listMaxHeight} />\n        <AddItem listId={listId} placeholder={placeholder} title={title} />\n      </Card>\n    </View>\n  );\n});\n","import React, {memo, useCallback} from 'react';\nimport {FlatList} from 'react-native';\nimport {useRootSelector} from '../../../utils';\nimport {config} from '../configs';\nimport {AddList} from './AddList';\nimport {List} from './List';\n\ntype BoardProps = {\n  boardId: string;\n  listMaxHeight: number;\n  listWidth: number;\n};\n\nexport const Board = memo(function Board({\n  boardId,\n  listMaxHeight,\n  listWidth,\n}: BoardProps) {\n  const listSize = listWidth + config.padding;\n  const board = useRootSelector((s) => s.completeBoard.items[boardId]);\n  const getItemId = useCallback((item) => item, []);\n\n  const getItemLayout = useCallback(\n    (_, index) => ({\n      length: listSize,\n      offset: listSize * index,\n      index,\n    }),\n    [listSize],\n  );\n\n  const renderAddList = useCallback(() => {\n    return (\n      <AddList\n        boardId={boardId}\n        placeholder=\"List title...\"\n        title=\"Add list\"\n        width={listWidth}\n      />\n    );\n  }, [boardId, listWidth]);\n\n  const renderList = useCallback(\n    ({item}) => {\n      return (\n        <List\n          key={item}\n          listId={item}\n          listMaxHeight={listMaxHeight}\n          listWidth={listWidth}\n          orientation=\"horizontal\"\n          placeholder=\"List title...\"\n          title=\"Add list\"\n        />\n      );\n    },\n    [listMaxHeight, listWidth],\n  );\n\n  return (\n    <FlatList\n      ListFooterComponent={renderAddList}\n      contentContainerStyle={{padding: config.padding}}\n      data={board.lists}\n      decelerationRate=\"fast\"\n      getItemLayout={getItemLayout}\n      horizontal\n      keyExtractor={getItemId}\n      keyboardShouldPersistTaps=\"handled\"\n      renderItem={renderList}\n      showsHorizontalScrollIndicator={false}\n      snapToAlignment=\"center\"\n      snapToInterval={listSize}\n      style={{height: '100%'}}\n    />\n  );\n});\n","import React, {memo} from 'react';\nimport {LayoutChangeEvent} from 'react-native';\nimport {Button} from '../../../components';\nimport {useRootSelector} from '../../../utils';\nimport {Card} from '../components/Card';\n\ntype OrganizeButtonProps = {\n  listId: string;\n  onPress: () => void;\n  onLayout: (event: LayoutChangeEvent) => void;\n};\n\nexport const OrganizeButton = memo(function OrganizeButton({\n  listId,\n  onPress,\n  onLayout,\n}: OrganizeButtonProps) {\n  const listItems = useRootSelector(\n    (s) => s.completeList.items[listId].items.length,\n  );\n  return (\n    <Card onLayout={onLayout}>\n      <Button\n        center\n        color=\"primary\"\n        disable={listItems === 0}\n        onPress={onPress}\n        title=\"Organize\"\n      />\n    </Card>\n  );\n});\n","import {v4} from 'uuid';\nimport {Board, Item, List, User} from '../../models';\n\ntype GetDefaultUserTemplate = {\n  user: User;\n  boards: Board[];\n  lists: List[];\n  items: Item[];\n};\n\nconst date = Date.now();\nconst defaults = () => ({\n  id: v4(),\n  active: true,\n  createdAt: date,\n  updatedAt: date,\n});\n\nexport const getDefaultUserTemplate = (): GetDefaultUserTemplate => {\n  // inbox\n  const inboxItems: Item[] = [\n    {...defaults(), title: 'do dishes'},\n    {...defaults(), title: 'schedule meeting with Jim'},\n    {...defaults(), title: 'run 4 miles'},\n    {...defaults(), title: 'change oil'},\n    {...defaults(), title: 'what is the best mediation'},\n    {...defaults(), title: 'record Kelly birthday on Sep 22'},\n    {...defaults(), title: 'drink water'},\n    {...defaults(), title: 'intensity + focus = deep work'},\n    {...defaults(), title: 'put $20 in phone'},\n    {...defaults(), title: 'clear emails'},\n  ];\n  const inboxList: List = {\n    ...defaults(),\n    title: 'Inbox',\n    items: inboxItems.map((item) => item.id),\n  };\n  const inboxBoard: Board = {\n    ...defaults(),\n    title: 'Inbox',\n    lists: [inboxList.id],\n  };\n\n  // sub category\n  const homeItems: Item[] = [\n    {...defaults(), title: 'clean desk'},\n    {...defaults(), title: 'clean room'},\n    {...defaults(), title: 'walk dog'},\n    {...defaults(), title: 'brush teeth'},\n    {...defaults(), title: 'do laundry'},\n    {...defaults(), title: 'fix sink'},\n  ];\n  const homeLists: List[] = [\n    {...defaults(), title: 'Backlog', items: homeItems.map((item) => item.id)},\n    {...defaults(), title: 'Todo', items: []},\n    {...defaults(), title: 'In Progress', items: []},\n    {...defaults(), title: 'Done', items: []},\n  ];\n  const homeBoard: Board = {\n    ...defaults(),\n    title: 'Home',\n    lists: homeLists.map((item) => item.id),\n  };\n\n  // category\n  const projectItems: Item[] = [\n    {...defaults(), title: 'at home', board: homeBoard.id},\n    {...defaults(), title: 'at town'},\n    {...defaults(), title: 'at work'},\n    {...defaults(), title: 'at gym'},\n    {...defaults(), title: 'app release'},\n  ];\n  const projectsList: List = {\n    ...defaults(),\n    title: 'Projects',\n    items: projectItems.map((item) => item.id),\n  };\n  const listsItems: Item[] = [\n    {...defaults(), title: 'meeting notes'},\n    {...defaults(), title: 'book summaries'},\n    {...defaults(), title: 'gift ideas'},\n    {...defaults(), title: 'checklists'},\n    {...defaults(), title: 'code languages'},\n  ];\n  const listsList: List = {\n    ...defaults(),\n    title: 'Lists',\n    items: listsItems.map((item) => item.id),\n  };\n  const categoryBoard: Board = {\n    ...defaults(),\n    title: 'Categories',\n    lists: [projectsList.id, listsList.id],\n  };\n\n  // user\n  const user: User = {\n    ...defaults(),\n    name: 'Bob Smith',\n    boards: [inboxBoard.id, categoryBoard.id],\n  };\n\n  return {\n    user,\n    boards: [homeBoard, inboxBoard, categoryBoard],\n    lists: [inboxList, ...homeLists, projectsList, listsList],\n    items: [...inboxItems, ...homeItems, ...projectItems, ...listsItems],\n  };\n};\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback} from 'react';\nimport {Button, Modal, Text} from '../../../../components';\nimport {useColor} from '../../../../hooks';\nimport {Theme, useRootDispatch} from '../../../../utils';\nimport {Card} from '../../components';\nimport {\n  createBoard,\n  createItem,\n  createList,\n  createUser,\n  removeUser,\n  setActiveUser,\n} from '../../models';\nimport {getDefaultUserTemplate} from './factory';\n\n// TODO: figure out a place for this\n// TODO: add reminders\n// TODO: add profile information\n// TODO: add payment\n\nexport const Account = memo(function Account() {\n  const color = useColor();\n  const dispatch = useRootDispatch();\n  const {goBack, navigate} = useNavigation();\n  const navBack = useCallback(() => goBack(), [goBack]);\n\n  const onLogin = useCallback(() => {\n    const {user, boards, lists, items} = getDefaultUserTemplate();\n    items.map((item) => dispatch(createItem(item)));\n    lists.map((list) => dispatch(createList(list)));\n    boards.map((board) => dispatch(createBoard(board)));\n    dispatch(createUser(user));\n    goBack();\n  }, [dispatch, goBack]);\n  const onLogout = useCallback(() => {\n    dispatch(removeUser());\n    navigate('main');\n  }, [dispatch, navigate]);\n  const onSetActive = useCallback(() => {\n    dispatch(setActiveUser(true));\n  }, [dispatch]);\n\n  const onNavToAdmin = useCallback(() => navigate('admin'), [navigate]);\n\n  return (\n    <Modal backgroundColor={color.surface} onBackgroundPress={navBack}>\n      <Card>\n        <Text\n          style={{paddingBottom: Theme.padding.p04}}\n          title=\"Profile\"\n          type=\"h3\"\n        />\n        <Text center emphasis=\"medium\" title=\"...\" type=\"h4\" />\n      </Card>\n      <Card>\n        <Text\n          style={{paddingBottom: Theme.padding.p04}}\n          title=\"Reminders\"\n          type=\"h3\"\n        />\n        <Text center emphasis=\"medium\" title=\"...\" type=\"h4\" />\n      </Card>\n      <Card>\n        <Text\n          style={{paddingBottom: Theme.padding.p04}}\n          title=\"Payment\"\n          type=\"h3\"\n        />\n        <Text center emphasis=\"medium\" title=\"...\" type=\"h4\" />\n      </Card>\n      <Card>\n        <Text\n          style={{paddingBottom: Theme.padding.p04}}\n          title=\"Feedback\"\n          type=\"h3\"\n        />\n        <Text center emphasis=\"medium\" title=\"...\" type=\"h4\" />\n      </Card>\n      <Button onPress={onLogin} title=\"login\" />\n      <Button onPress={onLogout} title=\"logout\" />\n      <Button onPress={onSetActive} title=\"set active\" />\n      <Button onPress={onNavToAdmin} title=\"go to admin\" />\n    </Modal>\n  );\n});\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback, useState} from 'react';\nimport {LayoutChangeEvent, Platform, View} from 'react-native';\nimport {KeyboardHandler, Screen, Text} from '../../../../components';\nimport {useColor} from '../../../../hooks';\nimport {useRootSelector} from '../../../../utils';\nimport {List, OrganizeButton} from '../../components';\nimport {config} from '../../configs';\nimport {getInboxListId} from '../../models';\n\nexport const Capture = memo(function Capture() {\n  const color = useColor();\n  const {navigate} = useNavigation();\n\n  const keyboardHeight = useRootSelector(\n    (state) => state.device.keyboardHeight,\n  );\n  const [dimensions, setDimensions] = useState({container: 0, button: 0});\n  const android = Platform.OS === 'android';\n\n  const listHeight =\n    keyboardHeight === 0\n      ? dimensions.container -\n        dimensions.button -\n        (android ? config.padding * 8 : config.padding * 10)\n      : dimensions.container -\n        keyboardHeight -\n        (android ? config.padding * 3 : config.padding * 4);\n\n  const listId = useRootSelector(getInboxListId);\n\n  const onOrganize = useCallback(() => undefined, []);\n\n  const onLayout = useCallback(\n    (key: string) => (event: LayoutChangeEvent) => {\n      const {height} = event.nativeEvent.layout;\n      const {container, button} = dimensions;\n      const preventMultipleUpdates = container > 0 && button > 0;\n      if (preventMultipleUpdates) return;\n      setDimensions((p) => ({...p, [key]: height}));\n    },\n    [dimensions],\n  );\n\n  const navToAccount = useCallback(() => navigate('account'), [navigate]);\n\n  return (\n    <Screen onRightPress={navToAccount} rightIcon=\"account\" title=\"Capture\">\n      <KeyboardHandler\n        backgroundColor={color.surface}\n        onLayout={onLayout('container')}\n        render={dimensions.container > 0}>\n        {listId ? (\n          <View style={{height: '100%', padding: config.padding}}>\n            <List\n              listId={listId}\n              listMaxHeight={listHeight}\n              placeholder=\"Item title...\"\n              title=\"Add item\"\n            />\n            <OrganizeButton\n              listId={listId}\n              onLayout={onLayout('button')}\n              onPress={onOrganize}\n            />\n          </View>\n        ) : (\n          <Text title=\"missing account\" />\n        )}\n      </KeyboardHandler>\n    </Screen>\n  );\n});\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback, useState} from 'react';\nimport {Keyboard, View} from 'react-native';\nimport {Button, Modal, Text, TextInput} from '../../../../components';\nimport {useColor} from '../../../../hooks';\nimport {Theme, useRootDispatch, useRootSelector} from '../../../../utils';\nimport {Card} from '../../components';\nimport {removeItem, updateItem, updateListRemoveItem} from '../../models';\n\n// TODO: update does not go to previous screen\n// TODO: delete does not go to previous screen\n// TODO: delete needs confirmation alert\n\nexport const ItemDetail = memo(function ItemDetail() {\n  const dispatch = useRootDispatch();\n  const {goBack} = useNavigation();\n  const color = useColor();\n  const navBack = useCallback(() => goBack(), [goBack]);\n  const itemId = useRootSelector((s) => s.completeItem.active);\n  const listId = useRootSelector((s) => s.completeList.active);\n  const item = useRootSelector((s) => s.completeItem.items[itemId || '']);\n\n  const [title, setTitle] = useState(item.title);\n  const [description, setDescription] = useState(item.description || '');\n\n  const onTitleChange = useCallback((v) => setTitle(v), []);\n  const onDescriptionChange = useCallback((v) => setDescription(v), []);\n\n  const onItemSave = useCallback(() => {\n    dispatch(updateItem({...item, title, description}));\n    Keyboard.dismiss();\n  }, [description, dispatch, item, title]);\n\n  const onItemDelete = useCallback(() => {\n    if (!itemId || !listId)\n      throw new Error('missing listId or itemId on item detail screen');\n    dispatch(removeItem(itemId));\n    dispatch(updateListRemoveItem({listId, itemId}));\n  }, [dispatch, itemId, listId]);\n\n  return !item ? null : (\n    <Modal backgroundColor={color.surface} onBackgroundPress={navBack}>\n      {!item ? (\n        <View>\n          <Text title=\"missing item\" />\n        </View>\n      ) : (\n        <View>\n          <Card>\n            <Text\n              style={{paddingBottom: Theme.padding.p04}}\n              title=\"Title\"\n              type=\"h3\"\n            />\n            <TextInput\n              emphasis=\"medium\"\n              flex\n              onBlur={onItemSave}\n              onChangeText={onTitleChange}\n              placeholder=\"list name...\"\n              returnKeyType=\"done\"\n              type=\"h4\"\n              value={title}\n            />\n          </Card>\n          <Card>\n            <Text\n              style={{paddingBottom: Theme.padding.p04}}\n              title=\"Description\"\n              type=\"h3\"\n            />\n            <TextInput\n              emphasis=\"medium\"\n              flex\n              onBlur={onItemSave}\n              onChangeText={onDescriptionChange}\n              placeholder=\"details...\"\n              returnKeyType=\"done\"\n              type=\"h4\"\n              value={description}\n            />\n          </Card>\n          <Card>\n            <Text\n              style={{paddingBottom: Theme.padding.p04}}\n              title=\"Reminders\"\n              type=\"h3\"\n            />\n          </Card>\n          <Card>\n            <Button center onPress={onItemDelete} title=\"delete\" />\n          </Card>\n        </View>\n      )}\n    </Modal>\n  );\n});\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback} from 'react';\nimport {Button, Carousel, Screen} from '../../../../components';\nimport {Slide} from '../../../../components/Carousel/types';\nimport {useColor} from '../../../../hooks';\n\nexport const Landing = memo(function Landing() {\n  const {navigate} = useNavigation();\n  const color = useColor();\n  const navPortfolioLogin = useCallback(() => navigate('account'), [navigate]);\n\n  const slides: Slide[] = [\n    {id: '1', text: 'hello', color: color.info},\n    {id: '2', text: 'bob', color: color.warning},\n    {id: '3', text: 'steve', color: color.success},\n    {id: '4', text: 'jill', color: color.brand},\n  ];\n\n  return (\n    <Screen title=\"Landing\">\n      <Carousel slides={slides} />\n      <Button center onPress={navPortfolioLogin} title=\"Login\" />\n    </Screen>\n  );\n});\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback, useState} from 'react';\nimport {LayoutChangeEvent, Platform} from 'react-native';\nimport {KeyboardHandler, Screen, Text} from '../../../../components';\nimport {useColor} from '../../../../hooks';\nimport {getSmallestDimension} from '../../../../models';\nimport {useRootSelector} from '../../../../utils';\nimport {Board} from '../../components';\nimport {config} from '../../configs';\n\n// TODO: figure out centering of list\n\nexport const Project = memo(function Project() {\n  const {goBack} = useNavigation();\n  const color = useColor();\n  const screenWidth = useRootSelector(getSmallestDimension);\n  const boardId = useRootSelector((s) => s.completeBoard.active);\n  const listWidth = screenWidth * 0.7;\n  const [container, setContainer] = useState(0);\n  const android = Platform.OS === 'android';\n  const keyboardHeight = useRootSelector(\n    (state) => state.device.keyboardHeight,\n  );\n\n  const listMaxHeight =\n    keyboardHeight === 0\n      ? container - (android ? config.padding * 8 : config.padding * 12)\n      : container -\n        keyboardHeight -\n        (android ? config.padding * 3 : config.padding * 7);\n\n  const onLayout = useCallback(\n    (event: LayoutChangeEvent) => {\n      const {height} = event.nativeEvent.layout;\n      if (container > 0) return;\n\n      setContainer(height);\n    },\n    [container],\n  );\n\n  const navBack = useCallback(() => {\n    goBack();\n  }, [goBack]);\n\n  return (\n    <Screen onLeftPress={navBack} title=\"Focus\">\n      {!boardId ? (\n        <Text title=\"missing board\" />\n      ) : (\n        <KeyboardHandler\n          backgroundColor={color.surface}\n          onLayout={onLayout}\n          render={container > 0}>\n          <Board\n            boardId={boardId}\n            listMaxHeight={listMaxHeight}\n            listWidth={listWidth}\n          />\n        </KeyboardHandler>\n      )}\n    </Screen>\n  );\n});\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback, useState} from 'react';\nimport {LayoutChangeEvent, View} from 'react-native';\nimport {KeyboardHandler, Screen} from '../../../../components';\nimport {useColor} from '../../../../hooks';\nimport {useRootSelector} from '../../../../utils';\nimport {List} from '../../components';\nimport {config} from '../../configs';\nimport {getCategoryListIds} from '../../models';\n\n// TODO: add journal\n// TODO: add historical data\n// TODO: add purpose\n// TODO: add goals\n\n// TODO: render as <Board />\n\nexport const Projects = memo(function Projects() {\n  const color = useColor();\n  const {navigate} = useNavigation();\n  const listIds = useRootSelector(getCategoryListIds);\n  const [dimensions, setDimensions] = useState(0);\n\n  const onLayout = useCallback(\n    (event: LayoutChangeEvent) => {\n      const {height} = event.nativeEvent.layout;\n      if (dimensions > 0) return;\n\n      setDimensions(height);\n    },\n    [dimensions],\n  );\n\n  const maxHeight = dimensions / 2 - config.padding * 10;\n\n  const navToAccount = useCallback(() => navigate('account'), [navigate]);\n\n  return (\n    <Screen onRightPress={navToAccount} rightIcon=\"account\" title=\"Projects\">\n      <KeyboardHandler\n        backgroundColor={color.surface}\n        onLayout={onLayout}\n        render={dimensions > 0}>\n        <View style={{padding: config.padding}}>\n          {listIds.map((listId) => (\n            <List\n              key={listId}\n              listId={listId}\n              listMaxHeight={maxHeight}\n              placeholder=\"List title...\"\n              title=\"Add list\"\n            />\n          ))}\n        </View>\n      </KeyboardHandler>\n    </Screen>\n  );\n});\n","import {scaleLinear, scaleTime} from 'd3-scale';\nimport * as shape from 'd3-shape';\nimport * as React from 'react';\nimport {StyleSheet, View} from 'react-native';\nimport Svg, {Defs, LinearGradient, Path, Stop} from 'react-native-svg';\n\ninterface DataPoint {\n  date: number;\n  value: number;\n}\n\ninterface GraphProps {\n  data: DataPoint[];\n  width: number;\n  height: number;\n}\n\nconst strokeWidth = 4;\nconst padding = strokeWidth / 2;\nconst getDomain = (domain: number[]) => [\n  Math.min(...domain),\n  Math.max(...domain),\n];\n\nexport const Graph = ({\n  data,\n  width,\n  height,\n}: GraphProps): React.ReactElement => {\n  const scaleX = scaleTime()\n    .domain(getDomain(data.map((d) => d.date)))\n    .range([0, width]);\n  const scaleY = scaleLinear()\n    .domain(getDomain(data.map((d) => d.value)))\n    .range([height - padding, padding]);\n  const d = shape\n    .line<DataPoint>()\n    .x((p) => scaleX(p.date))\n    .y((p) => scaleY(p.value))\n    .curve(shape.curveBasis)(data) as string;\n  return (\n    <View style={{width, height}}>\n      <Svg style={StyleSheet.absoluteFill}>\n        <Defs>\n          <LinearGradient id=\"gradient\" x1=\"50%\" x2=\"50%\" y1=\"0%\" y2=\"100%\">\n            <Stop offset=\"0%\" stopColor=\"#cee3f9\" />\n            <Stop offset=\"80%\" stopColor=\"#ddedfa\" />\n            <Stop offset=\"100%\" stopColor=\"#feffff\" />\n          </LinearGradient>\n        </Defs>\n        <Path\n          d={`${d}L ${width} ${height} L 0 ${height}`}\n          fill=\"url(#gradient)\"\n        />\n        <Path fill=\"transparent\" stroke=\"#3977e3\" {...{d, strokeWidth}} />\n      </Svg>\n    </View>\n  );\n};\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback} from 'react';\nimport {Dimensions, ScrollView, View} from 'react-native';\nimport {Calendar, Screen, Text} from '../../../../components';\nimport {useColor} from '../../../../hooks';\nimport {Theme} from '../../../../utils';\nimport {Card} from '../../components/Card';\nimport {config} from '../../configs';\nimport {Graph} from './Graph';\n\n// TODO: add journal\n// TODO: add historical data\n// TODO: add purpose\n// TODO: add goals\n\ntype TitleProps = {name: string};\n\nconst Title = ({name}: TitleProps) => {\n  return (\n    <Text\n      emphasis=\"high\"\n      style={{paddingBottom: config.padding}}\n      title={name}\n      type=\"h4\"\n    />\n  );\n};\n\nconst data = [\n  {date: new Date(2018, 9, 1).getTime(), value: 0},\n  {date: new Date(2018, 9, 16).getTime(), value: 0},\n  {date: new Date(2018, 9, 17).getTime(), value: 200},\n  {date: new Date(2018, 10, 1).getTime(), value: 200},\n  {date: new Date(2018, 10, 2).getTime(), value: 300},\n  {date: new Date(2018, 10, 5).getTime(), value: 300},\n];\n\nexport const Reflect = memo(function Reflect() {\n  const color = useColor();\n  const {navigate} = useNavigation();\n  const navToAccount = useCallback(() => navigate('account'), [navigate]);\n\n  return (\n    <Screen onRightPress={navToAccount} rightIcon=\"account\" title=\"Reflect\">\n      <ScrollView\n        contentContainerStyle={{\n          padding: Theme.padding.p04,\n          backgroundColor: color.surface,\n        }}\n        style={{backgroundColor: color.surface}}>\n        <Card>\n          <View>\n            <Title name=\"Purpose\" />\n            <Text title=\"Make a significant positive difference in global productivity\" />\n          </View>\n        </Card>\n        <Card>\n          <View>\n            <Title name=\"Goals\" />\n            <Text title=\"Top 3\" />\n            <Text title=\"Deep Focus\" />\n            <Text title=\"Smile\" />\n            <Text title=\"1 More Rep\" />\n          </View>\n        </Card>\n        <Card>\n          <View>\n            <Title name=\"Review (Progress)\" />\n            <View\n              style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>\n              <Graph\n                data={data}\n                height={200}\n                width={Dimensions.get('window').width - config.padding * 4}\n              />\n            </View>\n          </View>\n        </Card>\n        <Card>\n          <View>\n            <Title name=\"Reflect (Journal)\" />\n            <Calendar />\n          </View>\n        </Card>\n      </ScrollView>\n    </Screen>\n  );\n});\n","import {\n  BottomTabBarOptions,\n  createBottomTabNavigator,\n} from '@react-navigation/bottom-tabs';\nimport {Route} from '@react-navigation/native';\nimport {\n  createStackNavigator,\n  StackNavigationOptions,\n} from '@react-navigation/stack';\nimport React, {memo, useCallback} from 'react';\nimport {Icon, Modal, Notification} from '../../components';\nimport {useColor} from '../../hooks';\nimport {rootMode, rootScreenOptions} from '../../providers/Navigation/configs';\nimport {useRootSelector} from '../../utils';\nimport {\n  Account,\n  Capture,\n  ItemDetail,\n  Landing,\n  Project,\n  Projects,\n  Reflect,\n} from './screens';\n\nconst noHeader: StackNavigationOptions = {headerShown: false};\nconst RootTab = createBottomTabNavigator();\nconst RootStack = createStackNavigator();\nconst ProjectsStack = createStackNavigator();\n\ntype Tabs = 'capture' | 'focus' | 'reflect';\ntype TabIcons = {\n  [key in Tabs]: {focused: string; unfocused: string};\n};\n\nconst tabIcons: TabIcons = {\n  capture: {\n    focused: 'pencil-plus-outline',\n    unfocused: 'pencil-plus-outline',\n  },\n  focus: {\n    focused: 'checkbox-multiple-marked-outline',\n    unfocused: 'checkbox-multiple-marked-outline',\n  },\n  reflect: {focused: 'finance', unfocused: 'finance'},\n};\n\ntype ScreenOptionsProps = {\n  route: Route<string, Record<string, unknown> | undefined>;\n};\n\ntype TabBarIconProps = {\n  focused: boolean;\n  size: number;\n};\n\nconst Focus = () => {\n  return (\n    <ProjectsStack.Navigator screenOptions={noHeader}>\n      <ProjectsStack.Screen component={Projects} name=\"boards\" />\n      <ProjectsStack.Screen component={Project} name=\"board\" />\n    </ProjectsStack.Navigator>\n  );\n};\n\nconst Tabs = () => {\n  const color = useColor();\n  const tabBarOptions: BottomTabBarOptions = {\n    keyboardHidesTabBar: true,\n    activeTintColor: color.text,\n    inactiveTintColor: color.secondary,\n    showLabel: false,\n  };\n  const screenOptions = useCallback(\n    ({route}: ScreenOptionsProps) => ({\n      tabBarIcon: function tabBarIcon({focused, size}: TabBarIconProps) {\n        const focus = focused ? 'focused' : 'unfocused';\n        const iconColor = focused ? color.text : color.secondary;\n        const name = (tabIcons as any)[route.name][focus];\n        return <Icon color={iconColor} name={name} size={size} />;\n      },\n    }),\n    [color],\n  );\n\n  return (\n    <RootTab.Navigator\n      screenOptions={screenOptions as any}\n      tabBarOptions={tabBarOptions}>\n      <RootTab.Screen component={Capture} name=\"capture\" />\n      <RootTab.Screen component={Focus} name=\"focus\" />\n      <RootTab.Screen component={Reflect} name=\"reflect\" />\n    </RootTab.Navigator>\n  );\n};\n\nexport default memo(function Complete() {\n  const user = useRootSelector((s) => s.completeUser);\n  const Main = user ? Tabs : Landing;\n  return (\n    <RootStack.Navigator mode={rootMode} screenOptions={rootScreenOptions}>\n      <RootStack.Screen component={Main} name=\"main\" />\n      <RootStack.Screen component={Account} name=\"account\" />\n      <RootStack.Screen component={Notification} name=\"notification\" />\n      <RootStack.Screen component={Modal} name=\"alert\" />\n      <RootStack.Screen component={ItemDetail} name=\"item-detail\" />\n    </RootStack.Navigator>\n  );\n});\n\n/*\n\n# Data\n\n- user\n-> collections [projects, lists]\n-> boards [home, work, town] | [meeting notes, book summaries, checklists]\n-> lists [backlog, todo, in progress, done] | [draft, final]\n-> item [find comb, clear emails, daily standup]\n\n# Screens\n\n## Capture\n\n### Inbox (list -> item -> details)\n- \"add grey list\" -> @app\n- \"find comb\" -> @home\n- \"clear emails\" -> @work\n- \"put $20 in phone\" -> @town\n- \"drink water\" -> @after-waking-up\n- \"intensity + focus = deep work\" -> book summaries\n\n## Organize\n\n### Projects (item -> lists -> item -> details )\n- @home -> (backlog, todo, in progress, done xx, done xx)\n- @town\n- @work\n- @gym\n- @app\n\n### Lists (item -> list -> item -> detail)\n- meeting notes\n - one-on-one\n - daily standup\n- book summaries\n - the one thing\n - getting things done\n - eat that frog\n- gift ideas\n - mom\n - dad\n - girlfriend\n- checklists\n - after waking up\n - after entering bathroom\n\n## Reflect\n\n### Purpose\n\n### Goals\n\n### Review (Progress)\n\n### Reflect (Journal)\n\n## Account\n\n### Profile\n\n### Notifications\n\n### Payment\n*/\n"],"sourceRoot":""}