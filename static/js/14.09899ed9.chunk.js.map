{"version":3,"sources":["../node_modules/react-native-web/dist/vendor/react-native/TouchHistoryMath/index.js","../node_modules/react-native-web/dist/vendor/react-native/PanResponder/index.js","../node_modules/react-native-web/dist/exports/PanResponder/index.js","apps/Games/Snake/utils.ts","apps/Games/Snake/Cell.tsx","apps/Games/Snake/Board.tsx","apps/Games/Snake/useGesture.ts","apps/Games/Snake/EndGame.tsx","apps/Games/Snake/index.tsx","apps/Games/Snake/useClock.ts"],"names":["TouchHistoryMath","centroidDimension","touchHistory","touchesChangedAfter","isXAxis","ofCurrent","touchBank","total","count","oneTouchData","numberActiveTouches","indexOfSingleActiveTouch","touchActive","currentTimeStamp","currentPageX","currentPageY","previousPageX","previousPageY","i","length","touchTrack","undefined","noCentroid","currentCentroidXOfTouchesChangedAfter","currentCentroidYOfTouchesChangedAfter","previousCentroidXOfTouchesChangedAfter","previousCentroidYOfTouchesChangedAfter","currentCentroidX","currentCentroidY","PanResponder","_initializeGestureState","gestureState","moveX","moveY","x0","y0","dx","dy","vx","vy","_accountsForMovesUpTo","_updateGestureStateOnMove","movedAfter","prevX","x","prevY","y","nextDX","nextDY","dt","mostRecentTimeStamp","create","config","interactionState","handle","stateID","Math","random","panHandlers","onStartShouldSetResponder","event","onStartShouldSetPanResponder","onMoveShouldSetResponder","onMoveShouldSetPanResponder","onStartShouldSetResponderCapture","nativeEvent","touches","onStartShouldSetPanResponderCapture","onMoveShouldSetResponderCapture","onMoveShouldSetPanResponderCapture","onResponderGrant","InteractionManager","createInteractionHandle","onPanResponderGrant","onShouldBlockNativeResponder","onResponderReject","clearInteractionHandle","onPanResponderReject","onResponderRelease","onPanResponderRelease","onResponderStart","onPanResponderStart","onResponderMove","onPanResponderMove","onResponderEnd","onPanResponderEnd","onResponderTerminate","onPanResponderTerminate","onResponderTerminationRequest","onPanResponderTerminationRequest","getInteractionHandle","callback","getBoard","size","center","floor","matrix","j","getBlankMatrix","food","getFood","head","tail","state","available","push","getAvailable","getRandomFood","Cell","memo","value","color","useColor","width","useRootSelector","getSmallestDimension","backgroundColor","light","success","danger","View","style","flex","height","borderWidth","borderColor","surface","Board","justifyContent","map","key","flexDirection","inverse","left","right","up","down","EndGame","onPress","title","nav","useNav","useState","board","points","game","setGame","noReverse","direction","useRef","panResponder","_","g","direct","abs","reverse","current","useGesture","precision","frequency","onUpdate","prev","timeout","loop","useCallback","setTimeout","time","Date","now","stop","clearTimeout","start","useEffect","useClock","next","getNext","nextValue","updateBoard","onStart","onStop","navBack","onLeftPress"],"mappings":"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","file":"static/js/14.09899ed9.chunk.js","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\nvar TouchHistoryMath = {\n  /**\n   * This code is optimized and not intended to look beautiful. This allows\n   * computing of touch centroids that have moved after `touchesChangedAfter`\n   * timeStamp. You can compute the current centroid involving all touches\n   * moves after `touchesChangedAfter`, or you can compute the previous\n   * centroid of all touches that were moved after `touchesChangedAfter`.\n   *\n   * @param {TouchHistoryMath} touchHistory Standard Responder touch track\n   * data.\n   * @param {number} touchesChangedAfter timeStamp after which moved touches\n   * are considered \"actively moving\" - not just \"active\".\n   * @param {boolean} isXAxis Consider `x` dimension vs. `y` dimension.\n   * @param {boolean} ofCurrent Compute current centroid for actively moving\n   * touches vs. previous centroid of now actively moving touches.\n   * @return {number} value of centroid in specified dimension.\n   */\n  centroidDimension: function centroidDimension(touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {\n    var touchBank = touchHistory.touchBank;\n    var total = 0;\n    var count = 0;\n    var oneTouchData = touchHistory.numberActiveTouches === 1 ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;\n\n    if (oneTouchData !== null) {\n      if (oneTouchData.touchActive && oneTouchData.currentTimeStamp > touchesChangedAfter) {\n        total += ofCurrent && isXAxis ? oneTouchData.currentPageX : ofCurrent && !isXAxis ? oneTouchData.currentPageY : !ofCurrent && isXAxis ? oneTouchData.previousPageX : oneTouchData.previousPageY;\n        count = 1;\n      }\n    } else {\n      for (var i = 0; i < touchBank.length; i++) {\n        var touchTrack = touchBank[i];\n\n        if (touchTrack !== null && touchTrack !== undefined && touchTrack.touchActive && touchTrack.currentTimeStamp >= touchesChangedAfter) {\n          var toAdd = void 0; // Yuck, program temporarily in invalid state.\n\n          if (ofCurrent && isXAxis) {\n            toAdd = touchTrack.currentPageX;\n          } else if (ofCurrent && !isXAxis) {\n            toAdd = touchTrack.currentPageY;\n          } else if (!ofCurrent && isXAxis) {\n            toAdd = touchTrack.previousPageX;\n          } else {\n            toAdd = touchTrack.previousPageY;\n          }\n\n          total += toAdd;\n          count++;\n        }\n      }\n    }\n\n    return count > 0 ? total / count : TouchHistoryMath.noCentroid;\n  },\n  currentCentroidXOfTouchesChangedAfter: function currentCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, // isXAxis\n    true // ofCurrent\n    );\n  },\n  currentCentroidYOfTouchesChangedAfter: function currentCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, // isXAxis\n    true // ofCurrent\n    );\n  },\n  previousCentroidXOfTouchesChangedAfter: function previousCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, // isXAxis\n    false // ofCurrent\n    );\n  },\n  previousCentroidYOfTouchesChangedAfter: function previousCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, // isXAxis\n    false // ofCurrent\n    );\n  },\n  currentCentroidX: function currentCentroidX(touchHistory) {\n    return TouchHistoryMath.centroidDimension(touchHistory, 0, // touchesChangedAfter\n    true, // isXAxis\n    true // ofCurrent\n    );\n  },\n  currentCentroidY: function currentCentroidY(touchHistory) {\n    return TouchHistoryMath.centroidDimension(touchHistory, 0, // touchesChangedAfter\n    false, // isXAxis\n    true // ofCurrent\n    );\n  },\n  noCentroid: -1\n};\nexport default TouchHistoryMath;","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport InteractionManager from '../../../exports/InteractionManager';\nimport TouchHistoryMath from '../TouchHistoryMath';\nvar currentCentroidXOfTouchesChangedAfter = TouchHistoryMath.currentCentroidXOfTouchesChangedAfter;\nvar currentCentroidYOfTouchesChangedAfter = TouchHistoryMath.currentCentroidYOfTouchesChangedAfter;\nvar previousCentroidXOfTouchesChangedAfter = TouchHistoryMath.previousCentroidXOfTouchesChangedAfter;\nvar previousCentroidYOfTouchesChangedAfter = TouchHistoryMath.previousCentroidYOfTouchesChangedAfter;\nvar currentCentroidX = TouchHistoryMath.currentCentroidX;\nvar currentCentroidY = TouchHistoryMath.currentCentroidY;\n/**\n * `PanResponder` reconciles several touches into a single gesture. It makes\n * single-touch gestures resilient to extra touches, and can be used to\n * recognize simple multi-touch gestures.\n *\n * By default, `PanResponder` holds an `InteractionManager` handle to block\n * long-running JS events from interrupting active gestures.\n *\n * It provides a predictable wrapper of the responder handlers provided by the\n * [gesture responder system](docs/gesture-responder-system.html).\n * For each handler, it provides a new `gestureState` object alongside the\n * native event object:\n *\n * ```\n * onPanResponderMove: (event, gestureState) => {}\n * ```\n *\n * A native event is a synthetic touch event with the following form:\n *\n *  - `nativeEvent`\n *      + `changedTouches` - Array of all touch events that have changed since the last event\n *      + `identifier` - The ID of the touch\n *      + `locationX` - The X position of the touch, relative to the element\n *      + `locationY` - The Y position of the touch, relative to the element\n *      + `pageX` - The X position of the touch, relative to the root element\n *      + `pageY` - The Y position of the touch, relative to the root element\n *      + `target` - The node id of the element receiving the touch event\n *      + `timestamp` - A time identifier for the touch, useful for velocity calculation\n *      + `touches` - Array of all current touches on the screen\n *\n * A `gestureState` object has the following:\n *\n *  - `stateID` - ID of the gestureState- persisted as long as there at least\n *     one touch on screen\n *  - `moveX` - the latest screen coordinates of the recently-moved touch\n *  - `moveY` - the latest screen coordinates of the recently-moved touch\n *  - `x0` - the screen coordinates of the responder grant\n *  - `y0` - the screen coordinates of the responder grant\n *  - `dx` - accumulated distance of the gesture since the touch started\n *  - `dy` - accumulated distance of the gesture since the touch started\n *  - `vx` - current velocity of the gesture\n *  - `vy` - current velocity of the gesture\n *  - `numberActiveTouches` - Number of touches currently on screen\n *\n * ### Basic Usage\n *\n * ```\n *   componentWillMount: function() {\n *     this._panResponder = PanResponder.create({\n *       // Ask to be the responder:\n *       onStartShouldSetPanResponder: (evt, gestureState) => true,\n *       onStartShouldSetPanResponderCapture: (evt, gestureState) => true,\n *       onMoveShouldSetPanResponder: (evt, gestureState) => true,\n *       onMoveShouldSetPanResponderCapture: (evt, gestureState) => true,\n *\n *       onPanResponderGrant: (evt, gestureState) => {\n *         // The gesture has started. Show visual feedback so the user knows\n *         // what is happening!\n *\n *         // gestureState.d{x,y} will be set to zero now\n *       },\n *       onPanResponderMove: (evt, gestureState) => {\n *         // The most recent move distance is gestureState.move{X,Y}\n *\n *         // The accumulated gesture distance since becoming responder is\n *         // gestureState.d{x,y}\n *       },\n *       onPanResponderTerminationRequest: (evt, gestureState) => true,\n *       onPanResponderRelease: (evt, gestureState) => {\n *         // The user has released all touches while this view is the\n *         // responder. This typically means a gesture has succeeded\n *       },\n *       onPanResponderTerminate: (evt, gestureState) => {\n *         // Another component has become the responder, so this gesture\n *         // should be cancelled\n *       },\n *       onShouldBlockNativeResponder: (evt, gestureState) => {\n *         // Returns whether this component should block native components from becoming the JS\n *         // responder. Returns true by default. Is currently only supported on android.\n *         return true;\n *       },\n *     });\n *   },\n *\n *   render: function() {\n *     return (\n *       <View {...this._panResponder.panHandlers} />\n *     );\n *   },\n *\n * ```\n *\n * ### Working Example\n *\n * To see it in action, try the\n * [PanResponder example in RNTester](https://github.com/facebook/react-native/blob/master/RNTester/js/PanResponderExample.js)\n */\n\nvar PanResponder = {\n  /**\n   *\n   * A graphical explanation of the touch data flow:\n   *\n   * +----------------------------+             +--------------------------------+\n   * | ResponderTouchHistoryStore |             |TouchHistoryMath                |\n   * +----------------------------+             +----------+---------------------+\n   * |Global store of touchHistory|             |Allocation-less math util       |\n   * |including activeness, start |             |on touch history (centroids     |\n   * |position, prev/cur position.|             |and multitouch movement etc)    |\n   * |                            |             |                                |\n   * +----^-----------------------+             +----^---------------------------+\n   *      |                                          |\n   *      | (records relevant history                |\n   *      |  of touches relevant for                 |\n   *      |  implementing higher level               |\n   *      |  gestures)                               |\n   *      |                                          |\n   * +----+-----------------------+             +----|---------------------------+\n   * | ResponderEventPlugin       |             |    |   Your App/Component      |\n   * +----------------------------+             +----|---------------------------+\n   * |Negotiates which view gets  | Low level   |    |             High level    |\n   * |onResponderMove events.     | events w/   |  +-+-------+     events w/     |\n   * |Also records history into   | touchHistory|  |   Pan   |     multitouch +  |\n   * |ResponderTouchHistoryStore. +---------------->Responder+-----> accumulative|\n   * +----------------------------+ attached to |  |         |     distance and  |\n   *                                 each event |  +---------+     velocity.     |\n   *                                            |                                |\n   *                                            |                                |\n   *                                            +--------------------------------+\n   *\n   *\n   *\n   * Gesture that calculates cumulative movement over time in a way that just\n   * \"does the right thing\" for multiple touches. The \"right thing\" is very\n   * nuanced. When moving two touches in opposite directions, the cumulative\n   * distance is zero in each dimension. When two touches move in parallel five\n   * pixels in the same direction, the cumulative distance is five, not ten. If\n   * two touches start, one moves five in a direction, then stops and the other\n   * touch moves fives in the same direction, the cumulative distance is ten.\n   *\n   * This logic requires a kind of processing of time \"clusters\" of touch events\n   * so that two touch moves that essentially occur in parallel but move every\n   * other frame respectively, are considered part of the same movement.\n   *\n   * Explanation of some of the non-obvious fields:\n   *\n   * - moveX/moveY: If no move event has been observed, then `(moveX, moveY)` is\n   *   invalid. If a move event has been observed, `(moveX, moveY)` is the\n   *   centroid of the most recently moved \"cluster\" of active touches.\n   *   (Currently all move have the same timeStamp, but later we should add some\n   *   threshold for what is considered to be \"moving\"). If a palm is\n   *   accidentally counted as a touch, but a finger is moving greatly, the palm\n   *   will move slightly, but we only want to count the single moving touch.\n   * - x0/y0: Centroid location (non-cumulative) at the time of becoming\n   *   responder.\n   * - dx/dy: Cumulative touch distance - not the same thing as sum of each touch\n   *   distance. Accounts for touch moves that are clustered together in time,\n   *   moving the same direction. Only valid when currently responder (otherwise,\n   *   it only represents the drag distance below the threshold).\n   * - vx/vy: Velocity.\n   */\n  _initializeGestureState: function _initializeGestureState(gestureState) {\n    gestureState.moveX = 0;\n    gestureState.moveY = 0;\n    gestureState.x0 = 0;\n    gestureState.y0 = 0;\n    gestureState.dx = 0;\n    gestureState.dy = 0;\n    gestureState.vx = 0;\n    gestureState.vy = 0;\n    gestureState.numberActiveTouches = 0; // All `gestureState` accounts for timeStamps up until:\n\n    gestureState._accountsForMovesUpTo = 0;\n  },\n\n  /**\n   * This is nuanced and is necessary. It is incorrect to continuously take all\n   * active *and* recently moved touches, find the centroid, and track how that\n   * result changes over time. Instead, we must take all recently moved\n   * touches, and calculate how the centroid has changed just for those\n   * recently moved touches, and append that change to an accumulator. This is\n   * to (at least) handle the case where the user is moving three fingers, and\n   * then one of the fingers stops but the other two continue.\n   *\n   * This is very different than taking all of the recently moved touches and\n   * storing their centroid as `dx/dy`. For correctness, we must *accumulate\n   * changes* in the centroid of recently moved touches.\n   *\n   * There is also some nuance with how we handle multiple moved touches in a\n   * single event. With the way `ReactNativeEventEmitter` dispatches touches as\n   * individual events, multiple touches generate two 'move' events, each of\n   * them triggering `onResponderMove`. But with the way `PanResponder` works,\n   * all of the gesture inference is performed on the first dispatch, since it\n   * looks at all of the touches (even the ones for which there hasn't been a\n   * native dispatch yet). Therefore, `PanResponder` does not call\n   * `onResponderMove` passed the first dispatch. This diverges from the\n   * typical responder callback pattern (without using `PanResponder`), but\n   * avoids more dispatches than necessary.\n   */\n  _updateGestureStateOnMove: function _updateGestureStateOnMove(gestureState, touchHistory) {\n    gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n    gestureState.moveX = currentCentroidXOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);\n    gestureState.moveY = currentCentroidYOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);\n    var movedAfter = gestureState._accountsForMovesUpTo;\n    var prevX = previousCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n    var x = currentCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n    var prevY = previousCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n    var y = currentCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n    var nextDX = gestureState.dx + (x - prevX);\n    var nextDY = gestureState.dy + (y - prevY); // TODO: This must be filtered intelligently.\n\n    var dt = touchHistory.mostRecentTimeStamp - gestureState._accountsForMovesUpTo;\n    gestureState.vx = (nextDX - gestureState.dx) / dt;\n    gestureState.vy = (nextDY - gestureState.dy) / dt;\n    gestureState.dx = nextDX;\n    gestureState.dy = nextDY;\n    gestureState._accountsForMovesUpTo = touchHistory.mostRecentTimeStamp;\n  },\n\n  /**\n   * @param {object} config Enhanced versions of all of the responder callbacks\n   * that provide not only the typical `ResponderSyntheticEvent`, but also the\n   * `PanResponder` gesture state.  Simply replace the word `Responder` with\n   * `PanResponder` in each of the typical `onResponder*` callbacks. For\n   * example, the `config` object would look like:\n   *\n   *  - `onMoveShouldSetPanResponder: (e, gestureState) => {...}`\n   *  - `onMoveShouldSetPanResponderCapture: (e, gestureState) => {...}`\n   *  - `onStartShouldSetPanResponder: (e, gestureState) => {...}`\n   *  - `onStartShouldSetPanResponderCapture: (e, gestureState) => {...}`\n   *  - `onPanResponderReject: (e, gestureState) => {...}`\n   *  - `onPanResponderGrant: (e, gestureState) => {...}`\n   *  - `onPanResponderStart: (e, gestureState) => {...}`\n   *  - `onPanResponderEnd: (e, gestureState) => {...}`\n   *  - `onPanResponderRelease: (e, gestureState) => {...}`\n   *  - `onPanResponderMove: (e, gestureState) => {...}`\n   *  - `onPanResponderTerminate: (e, gestureState) => {...}`\n   *  - `onPanResponderTerminationRequest: (e, gestureState) => {...}`\n   *  - `onShouldBlockNativeResponder: (e, gestureState) => {...}`\n   *\n   *  In general, for events that have capture equivalents, we update the\n   *  gestureState once in the capture phase and can use it in the bubble phase\n   *  as well.\n   *\n   *  Be careful with onStartShould* callbacks. They only reflect updated\n   *  `gestureState` for start/end events that bubble/capture to the Node.\n   *  Once the node is the responder, you can rely on every start/end event\n   *  being processed by the gesture and `gestureState` being updated\n   *  accordingly. (numberActiveTouches) may not be totally accurate unless you\n   *  are the responder.\n   */\n  create: function create(config) {\n    var interactionState = {\n      handle: null\n    };\n    var gestureState = {\n      // Useful for debugging\n      stateID: Math.random(),\n      moveX: 0,\n      moveY: 0,\n      x0: 0,\n      y0: 0,\n      dx: 0,\n      dy: 0,\n      vx: 0,\n      vy: 0,\n      numberActiveTouches: 0,\n      _accountsForMovesUpTo: 0\n    };\n    var panHandlers = {\n      onStartShouldSetResponder: function onStartShouldSetResponder(event) {\n        return config.onStartShouldSetPanResponder == null ? false : config.onStartShouldSetPanResponder(event, gestureState);\n      },\n      onMoveShouldSetResponder: function onMoveShouldSetResponder(event) {\n        return config.onMoveShouldSetPanResponder == null ? false : config.onMoveShouldSetPanResponder(event, gestureState);\n      },\n      onStartShouldSetResponderCapture: function onStartShouldSetResponderCapture(event) {\n        // TODO: Actually, we should reinitialize the state any time\n        // touches.length increases from 0 active to > 0 active.\n        if (event.nativeEvent.touches.length === 1) {\n          PanResponder._initializeGestureState(gestureState);\n        }\n\n        gestureState.numberActiveTouches = event.touchHistory.numberActiveTouches;\n        return config.onStartShouldSetPanResponderCapture != null ? config.onStartShouldSetPanResponderCapture(event, gestureState) : false;\n      },\n      onMoveShouldSetResponderCapture: function onMoveShouldSetResponderCapture(event) {\n        var touchHistory = event.touchHistory; // Responder system incorrectly dispatches should* to current responder\n        // Filter out any touch moves past the first one - we would have\n        // already processed multi-touch geometry during the first event.\n\n        if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {\n          return false;\n        }\n\n        PanResponder._updateGestureStateOnMove(gestureState, touchHistory);\n\n        return config.onMoveShouldSetPanResponderCapture ? config.onMoveShouldSetPanResponderCapture(event, gestureState) : false;\n      },\n      onResponderGrant: function onResponderGrant(event) {\n        if (!interactionState.handle) {\n          interactionState.handle = InteractionManager.createInteractionHandle();\n        }\n\n        gestureState.x0 = currentCentroidX(event.touchHistory);\n        gestureState.y0 = currentCentroidY(event.touchHistory);\n        gestureState.dx = 0;\n        gestureState.dy = 0;\n\n        if (config.onPanResponderGrant) {\n          config.onPanResponderGrant(event, gestureState);\n        } // TODO: t7467124 investigate if this can be removed\n\n\n        return config.onShouldBlockNativeResponder == null ? true : config.onShouldBlockNativeResponder(event, gestureState);\n      },\n      onResponderReject: function onResponderReject(event) {\n        clearInteractionHandle(interactionState, config.onPanResponderReject, event, gestureState);\n      },\n      onResponderRelease: function onResponderRelease(event) {\n        clearInteractionHandle(interactionState, config.onPanResponderRelease, event, gestureState);\n\n        PanResponder._initializeGestureState(gestureState);\n      },\n      onResponderStart: function onResponderStart(event) {\n        var touchHistory = event.touchHistory;\n        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n\n        if (config.onPanResponderStart) {\n          config.onPanResponderStart(event, gestureState);\n        }\n      },\n      onResponderMove: function onResponderMove(event) {\n        var touchHistory = event.touchHistory; // Guard against the dispatch of two touch moves when there are two\n        // simultaneously changed touches.\n\n        if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {\n          return;\n        } // Filter out any touch moves past the first one - we would have\n        // already processed multi-touch geometry during the first event.\n\n\n        PanResponder._updateGestureStateOnMove(gestureState, touchHistory);\n\n        if (config.onPanResponderMove) {\n          config.onPanResponderMove(event, gestureState);\n        }\n      },\n      onResponderEnd: function onResponderEnd(event) {\n        var touchHistory = event.touchHistory;\n        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n        clearInteractionHandle(interactionState, config.onPanResponderEnd, event, gestureState);\n      },\n      onResponderTerminate: function onResponderTerminate(event) {\n        clearInteractionHandle(interactionState, config.onPanResponderTerminate, event, gestureState);\n\n        PanResponder._initializeGestureState(gestureState);\n      },\n      onResponderTerminationRequest: function onResponderTerminationRequest(event) {\n        return config.onPanResponderTerminationRequest == null ? true : config.onPanResponderTerminationRequest(event, gestureState);\n      }\n    };\n    return {\n      panHandlers: panHandlers,\n      getInteractionHandle: function getInteractionHandle() {\n        return interactionState.handle;\n      }\n    };\n  }\n};\n\nfunction clearInteractionHandle(interactionState, callback, event, gestureState) {\n  if (interactionState.handle) {\n    InteractionManager.clearInteractionHandle(interactionState.handle);\n    interactionState.handle = null;\n  }\n\n  if (callback) {\n    callback(event, gestureState);\n  }\n}\n\nexport default PanResponder;","import PanResponder from '../../vendor/react-native/PanResponder';\nexport default PanResponder;","import {Direction} from './useGesture';\n\nexport type Matrix = Array<Array<0 | 1 | 2>>;\ntype Cell = [number, number];\ntype BoardState = 'ok' | 'hit wall' | 'hit snake' | 'ate food' | 'won';\n\n// TODO: need to store the snake instead of tail to know the next tail\nexport type BoardContext = {\n  matrix: Matrix;\n  head: Cell;\n  tail: Cell;\n  food: Cell;\n  state: BoardState;\n};\n\nconst getBlankMatrix = (size: number) => {\n  const matrix: Matrix = [];\n  for (let i = 0; i < size; i++) {\n    matrix[i] = [];\n    for (let j = 0; j < size; j++) {\n      matrix[i][j] = 0;\n    }\n  }\n  return matrix;\n};\n\nconst getAvailable = (matrix: Matrix): Cell[] => {\n  const available: Cell[] = [];\n  for (let i = 0; i < matrix.length; i++) {\n    for (let j = 0; j < matrix[i].length; j++) {\n      if (matrix[i][j] === 0) {\n        available.push([i, j]);\n      }\n    }\n  }\n  return available;\n};\n\nconst getRandomFood = (available: Cell[]) => {\n  return Math.floor(Math.random() * available.length);\n};\n\nexport const getBoard = (size: number): BoardContext => {\n  const center = Math.floor(size / 2);\n  const matrix = getBlankMatrix(size);\n  const food = getFood(matrix);\n  const head: Cell = [center, center];\n  const tail: Cell = [center, center];\n  matrix[center][center] = 1;\n  matrix[food[0]][food[1]] = 2;\n\n  return {matrix, head, tail, food, state: 'ok'};\n};\n\nconst getNext = (\n  direction: Direction,\n  head: Cell,\n  matrix: Matrix,\n): Cell | null => {\n  let x;\n  let y;\n  switch (direction) {\n    case 'up':\n      x = head[0] - 1;\n      y = head[1];\n      if (x < 0) {\n        return null;\n      }\n      return [x, y];\n    case 'down':\n      x = head[0] + 1;\n      y = head[1];\n      if (x >= matrix.length) {\n        return null;\n      }\n      return [x, y];\n    case 'left':\n      x = head[0];\n      y = head[1] - 1;\n      if (y < 0) {\n        return null;\n      }\n      return [x, y];\n    case 'right':\n      x = head[0];\n      y = head[1] + 1;\n      if (y >= matrix[0].length) {\n        return null;\n      }\n      return [x, y];\n    default:\n      return null;\n  }\n};\n\nconst getFood = (matrix: Matrix): Cell => {\n  const available = getAvailable(matrix);\n  const random = getRandomFood(available);\n  const food: Cell = available[random];\n  return food;\n};\n\nexport const updateBoard = (\n  board: BoardContext,\n  direction: Direction,\n): BoardContext => {\n  const next = getNext(direction, board.head, board.matrix);\n  if (!next) {\n    board.state = 'hit wall';\n    return board;\n  }\n  const nextValue = board.matrix[next[0]][next[1]];\n  if (nextValue === 1) {\n    board.state = 'hit snake';\n  } else if (nextValue === 2) {\n    const food = getFood(board.matrix);\n    board.matrix[food[0]][food[1]] = 2;\n    board.state = 'ate food';\n  } else {\n    board.state = 'ok';\n  }\n  board.matrix[next[0]][next[1]] = 1;\n  board.head = next;\n\n  return board;\n};\n","import React, {memo} from 'react';\nimport {View} from 'react-native';\nimport {useColor} from '../../../hooks';\nimport {useRootSelector} from '../../../utils';\nimport {getSmallestDimension} from '../../../models';\n\ninterface CellProps {\n  value: number;\n  length: number;\n}\n\nexport const Cell = memo(function Cell({value, length}: CellProps) {\n  const color = useColor();\n  const width = useRootSelector(getSmallestDimension) / length;\n  const backgroundColor =\n    value === 0 ? color.light : value === 1 ? color.success : color.danger;\n  return (\n    <View\n      style={{\n        flex: 1,\n        width,\n        height: width,\n        borderWidth: 1,\n        borderColor: color.surface,\n        backgroundColor,\n      }}\n    />\n  );\n});\n","import {View} from 'react-native';\nimport React from 'react';\nimport {Matrix} from './utils';\nimport {Cell} from './Cell';\n\ninterface BoardProps {\n  matrix: Matrix;\n}\n\n// TODO: figure out why board is updating with memo\nexport const Board = ({matrix}: BoardProps): JSX.Element => {\n  return (\n    <View style={{flex: 1, justifyContent: 'center'}}>\n      {matrix.map((x, i) => (\n        <View key={i} style={{flexDirection: 'row'}}>\n          {x.map((y, j) => (\n            <Cell key={`cell-${i}${j}`} length={matrix.length} value={y} />\n          ))}\n        </View>\n      ))}\n    </View>\n  );\n};\n","import {MutableRefObject, useRef} from 'react';\nimport {\n  GestureResponderHandlers,\n  PanResponder,\n  PanResponderInstance,\n} from 'react-native';\n\nexport type Direction = 'left' | 'right' | 'up' | 'down';\n\ntype Props = {\n  noReverse?: boolean;\n};\n\nconst inverse: {[key in Direction]: Direction} = {\n  left: 'right',\n  right: 'left',\n  up: 'down',\n  down: 'up',\n};\n\nexport const useGesture = ({\n  noReverse,\n}: Props): {\n  panHandlers: GestureResponderHandlers;\n  direction: MutableRefObject<Direction>;\n} => {\n  const direction = useRef<Direction>('up');\n  const panResponder: PanResponderInstance = PanResponder.create({\n    onStartShouldSetPanResponder: () => true,\n    onPanResponderRelease: (_, g) => {\n      let direct: Direction;\n      if (Math.abs(g.dx) >= Math.abs(g.dy)) {\n        direct = g.dx >= 0 ? 'right' : 'left';\n      } else {\n        direct = g.dy >= 0 ? 'down' : 'up';\n      }\n      const reverse = noReverse && inverse[direct] === direction.current;\n      direction.current = reverse ? direction.current : direct;\n    },\n  });\n\n  return {direction, panHandlers: panResponder.panHandlers};\n};\n","import React, {memo} from 'react';\nimport {Button, Modal, Text} from '../../../components';\n\ninterface Props {\n  onPress(): void;\n}\n\nexport const EndGame = memo(function EndGame({onPress}: Props) {\n  return (\n    <Modal>\n      <Text title=\"good try\" />\n      <Button onPress={onPress} title=\"again\" />\n    </Modal>\n  );\n});\n","import React, {memo, useCallback, useEffect, useState} from 'react';\nimport {View} from 'react-native';\nimport {Button, Screen, Text} from '../../../components';\nimport {useColor, useNav} from '../../../hooks';\nimport {BoardContext, getBoard, updateBoard} from './utils';\nimport {Board} from './Board';\nimport {useGesture} from './useGesture';\nimport {EndGame} from './EndGame';\nimport {useClock} from './useClock';\n\ntype State = 'on' | 'off' | 'error' | 'win';\n\ntype Game = {\n  board: BoardContext;\n  points: number;\n  state: State;\n};\n\n// TODO: need to save the entire board to redux to load on app open\n\nexport default memo(function Snake() {\n  const color = useColor();\n  const nav = useNav();\n  const size = 20;\n  const frequency = 200;\n  const [game, setGame] = useState<Game>({\n    board: getBoard(size),\n    points: 0,\n    state: 'off',\n  });\n  const {direction, panHandlers} = useGesture({noReverse: true});\n\n  const update = useCallback(() => {\n    const board = updateBoard(game.board, direction.current);\n    if (board.state === 'ate food') {\n      setGame((prev) => ({...prev, board, points: prev.points + 1}));\n    } else if (board.state === 'ok') {\n      setGame((prev) => ({...prev, board}));\n    } else {\n      setGame((prev) => ({...prev, board, state: 'error'}));\n    }\n  }, [direction, game.board]);\n\n  const {start, stop} = useClock({\n    frequency,\n    onUpdate: update,\n  });\n\n  const onStart = useCallback(() => {\n    const board = getBoard(size);\n    setGame((prev) => ({...prev, board, points: 0, state: 'on'}));\n  }, []);\n\n  const onStop = useCallback(() => {\n    setGame((prev) => ({...prev, state: 'off'}));\n  }, []);\n\n  useEffect(() => {\n    if (game.state === 'on') {\n      start();\n    } else {\n      direction.current = 'up';\n      stop();\n    }\n  }, [game.state, start, stop, direction]);\n  const navBack = useCallback(nav('portfolioLanding'), [nav]);\n\n  return (\n    <>\n      <Screen onLeftPress={navBack} title=\"Snake\">\n        <View style={{flexDirection: 'row', justifyContent: 'center'}}>\n          <Button onPress={onStart} title=\"start\" />\n          <Button onPress={onStop} title=\"stop\" />\n          <Text title={`points: ${game.points}`} />\n        </View>\n        <View\n          style={{flex: 1, backgroundColor: color.success}}\n          {...panHandlers}>\n          <Board matrix={game.board.matrix} />\n        </View>\n      </Screen>\n      {game.state === 'error' && <EndGame onPress={onStart} />}\n    </>\n  );\n});\n","import {useCallback, useEffect, useRef} from 'react';\n\ninterface Props {\n  precision?: number;\n  frequency?: number;\n  onUpdate: (time: number) => void;\n}\n\ntype State = 'off' | 'on';\n\ntype UseClock = {start: () => void; stop: () => void};\n\nexport const useClock = ({\n  precision = 16,\n  frequency = 60,\n  onUpdate,\n}: Props): UseClock => {\n  const state = useRef<State>('off');\n  const prev = useRef(0);\n  const timeout = useRef<NodeJS.Timeout | null>(null);\n  const loop = useCallback(() => {\n    timeout.current = setTimeout(() => {\n      const time = Date.now();\n      if (time - prev.current >= frequency) {\n        prev.current = time;\n        onUpdate(time);\n      }\n      loop();\n    }, precision);\n  }, [frequency, precision, onUpdate]);\n\n  const stop = useCallback(() => {\n    state.current = 'off';\n    if (timeout.current) {\n      clearTimeout(timeout.current);\n    }\n  }, []);\n\n  const start = useCallback(() => {\n    stop();\n    state.current = 'on';\n    const time = Date.now();\n    prev.current = time;\n    onUpdate(time);\n    loop();\n  }, [stop, loop, onUpdate]);\n\n  useEffect(() => {\n    return () => stop();\n  }, [stop]);\n\n  return {stop, start};\n};\n"],"sourceRoot":""}