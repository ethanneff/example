{"version":3,"sources":["apps/Playground/SlotMachine/utils.ts","apps/Playground/SlotMachine/config.ts","apps/Playground/SlotMachine/index.tsx"],"names":["getWinsPerCombination","combinations","reels","output","i","length","freq","j","symbol","reel","sum","getSumOfReel","Object","values","reduce","item","getSumOfReels","total","getSumOfCombinations","combination","any","winPercentage","sumOfReels","winsPerCombination","getWinPercentage","toFixed","returnPercentage","returnsPerCombination","index","payout","getReturnsPerCombination","getReturnPercentage","memo","color","useColor","nav","useNav","styles","StyleSheet","create","container","backgroundColor","background","onLeftPress","to","title","View","style","flex","justifyContent","alignItems"],"mappings":"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","file":"static/js/45.ddd683e1.chunk.js","sourcesContent":["import {Combinations, Reel, Reels} from './config';\n\nconst getWinsPerCombination = (\n  combinations: Combinations,\n  reels: Reels,\n): Combinations => {\n  const output = [...combinations];\n  for (let i = 0; i < combinations.length; i++) {\n    let freq = 1;\n    output[i] = [...combinations[i]];\n    for (let j = 0; j < reels.length; j++) {\n      const symbol = output[i][j];\n      const reel = reels[j];\n      const sum = getSumOfReel(reel);\n      freq *=\n        symbol !== 'any' && typeof symbol !== 'number' ? reel[symbol] : sum;\n    }\n    output[i][3] = freq;\n  }\n  return output;\n};\n\nconst getSumOfReel = (reel: Reel): number => {\n  return Object.values(reel).reduce((sum, item) => sum + item, 0);\n};\n\nconst getSumOfReels = (reels: Reels): number => {\n  return reels.reduce((total, reel) => total * getSumOfReel(reel), 1);\n};\n\nconst getReturnsPerCombination = (\n  combinations: Combinations,\n  winsPerCombination: Combinations,\n): Combinations => {\n  return winsPerCombination.reduce(\n    (output: Combinations, combination, index) => {\n      const payout = combinations[index][3];\n      output[index][3] = combination[3] * payout;\n      return output;\n    },\n    [...winsPerCombination],\n  );\n};\n\nconst getSumOfCombinations = (combinations: Combinations): number => {\n  return combinations.reduce((total, combination) => total + combination[3], 0);\n};\n\nexport const getWinPercentage = (\n  combinations: Combinations,\n  reels: Reels,\n): number => {\n  const sumOfReels = getSumOfReels(reels);\n  const winsPerCombination = getWinsPerCombination(combinations, reels);\n  const sumOfWins = getSumOfCombinations(winsPerCombination);\n  return sumOfWins / sumOfReels;\n};\n\nexport const getReturnPercentage = (\n  combinations: Combinations,\n  reels: Reels,\n): number => {\n  const sumOfReels = getSumOfReels(reels);\n  const winsPerCombination = getWinsPerCombination(combinations, reels);\n  const returnsPerCombination = getReturnsPerCombination(\n    combinations,\n    winsPerCombination,\n  );\n  const sumOfReturns = getSumOfCombinations(returnsPerCombination);\n  return sumOfReturns / sumOfReels;\n};\n","export type Symbol =\n  | '🍓'\n  | '🍇'\n  | '🍉'\n  | '🥭'\n  | '🍏'\n  | '🍊'\n  | '🍒'\n  | '🍋'\n  | 'any';\ntype Combination = [Symbol, Symbol, Symbol, number];\nexport type Combinations = Combination[];\n\nexport const combinations: Combinations = [\n  ['🍓', '🍓', '🍓', 200],\n  ['🍇', '🍇', '🍇', 100],\n  ['🍉', '🍉', '🍉', 100],\n  ['🍉', '🍉', '🍇', 100],\n  ['🥭', '🥭', '🥭', 18],\n  ['🥭', '🥭', '🍇', 18],\n  ['🍏', '🍏', '🍏', 14],\n  ['🍏', '🍏', '🍇', 14],\n  ['🍊', '🍊', '🍊', 10],\n  ['🍊', '🍊', '🍇', 10],\n  ['🍒', '🍒', '🍒', 8],\n  ['🍒', '🍒', 'any', 5],\n  ['🍒', 'any', 'any', 2],\n];\n\nexport type Reel = {[key in Symbol]: number};\nexport type Reels = [Reel, Reel, Reel];\n\nexport const reels: Reels = [\n  {\n    '🍓': 1,\n    '🍇': 1,\n    '🍉': 2,\n    '🥭': 5,\n    '🍏': 5,\n    '🍊': 5,\n    '🍒': 4,\n    '🍋': 2,\n    any: 0,\n  },\n  {\n    '🍓': 1,\n    '🍇': 2,\n    '🍉': 2,\n    '🥭': 3,\n    '🍏': 3,\n    '🍊': 5,\n    '🍒': 7,\n    '🍋': 2,\n    any: 0,\n  },\n  {\n    '🍓': 1,\n    '🍇': 1,\n    '🍉': 2,\n    '🥭': 4,\n    '🍏': 2,\n    '🍊': 5,\n    '🍒': 5,\n    '🍋': 5,\n    any: 0,\n  },\n];\n","import React, {memo} from 'react';\nimport {StyleSheet, View} from 'react-native';\nimport {Screen, Text} from '../../../components';\nimport {useColor, useNav} from '../../../hooks';\nimport {getReturnPercentage, getWinPercentage} from './utils';\nimport {combinations, reels} from './config';\n\nconst winPercentage = (getWinPercentage(combinations, reels) * 100).toFixed(2);\nconst returnPercentage = (\n  getReturnPercentage(combinations, reels) * 100\n).toFixed(2);\n\nexport default memo(function PlaygroundSlotMachine() {\n  const color = useColor();\n  const nav = useNav();\n\n  // const [state, setState] = useState({\n  //   tokens: 14,\n  //   spinning: false,\n  //   reels: [[], [], []],\n  // });\n  const styles = StyleSheet.create({\n    container: {\n      backgroundColor: color.background,\n    },\n  });\n\n  return (\n    <Screen onLeftPress={nav.to('playground')} title=\"Slot Machine\">\n      <View style={styles.container}>\n        <Text title={`win percentage: ${winPercentage}%`} />\n        <Text title={`return percentage: ${returnPercentage}%`} />\n        <View\n          style={{\n            flex: 1,\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        />\n      </View>\n    </Screen>\n  );\n});\n\n// var WinningSound = () => {\n//   return (\n//     <audio autoPlay=\"autoplay\" className=\"player\" preload=\"false\">\n//       <source src=\"https://andyhoffman.codes/random-assets/img/slots/winning_slot.wav\" />\n//     </audio>\n//   );\n// };\n\n// class App extends React.PureComponent {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       winner: null,\n//     };\n//     this.finishHandler = this.finishHandler.bind(this);\n//     this.handleClick = this.handleClick.bind(this);\n//   }\n\n//   handleClick() {\n//     this.setState({winner: null});\n//     this.emptyArray();\n//     this._child1.forceUpdateHandler();\n//     this._child2.forceUpdateHandler();\n//     this._child3.forceUpdateHandler();\n//   }\n\n//   static loser = [\n//     'Not quite',\n//     'Stop gambling',\n//     'Hey, you lost!',\n//     'Ouch! I felt that',\n//     \"Don't beat yourself up\",\n//     'There goes the college fund',\n//     'I have a cat. You have a loss',\n//     \"You're awesome at losing\",\n//     'Coding is hard',\n//     \"Don't hate the coder\",\n//   ];\n\n//   static matches = [];\n\n//   finishHandler(value) {\n//     App.matches.push(value);\n\n//     if (App.matches.length === 3) {\n//       const {winner} = this.state;\n//       const first = App.matches[0];\n//       let results = App.matches.every((match) => match === first);\n//       this.setState({winner: results});\n//     }\n//   }\n\n//   emptyArray() {\n//     App.matches = [];\n//   }\n\n//   render() {\n//     return (\n//       <>\n//         <View className=\"spinner-container\">\n//           <Spinner\n//             onFinish={this.finishHandler}\n//             ref={(child) => {\n//               this._child1 = child;\n//             }}\n//             timer=\"1000\"\n//           />\n//           <Spinner\n//             onFinish={this.finishHandler}\n//             ref={(child) => {\n//               this._child2 = child;\n//             }}\n//             timer=\"1400\"\n//           />\n//           <Spinner\n//             onFinish={this.finishHandler}\n//             ref={(child) => {\n//               this._child3 = child;\n//             }}\n//             timer=\"2200\"\n//           />\n//         </View>\n//         <Button onClick={this.handleClick} title=\"repeatButton\" />\n//       </>\n//     );\n//   }\n// }\n\n// class Spinner extends React.PureComponent {\n//   constructor(props) {\n//     super(props);\n//     this.forceUpdateHandler = this.forceUpdateHandler.bind(this);\n//   }\n\n//   forceUpdateHandler() {\n//     this.reset();\n//   }\n\n//   reset() {\n//     if (this.timer) {\n//       clearInterval(this.timer);\n//     }\n\n//     this.start = this.setStartPosition();\n\n//     this.setState({\n//       position: this.start,\n//       timeRemaining: this.props.timer,\n//     });\n\n//     this.timer = setInterval(() => {\n//       this.tick();\n//     }, 100);\n//   }\n\n//   state = {\n//     position: 0,\n//     lastPosition: null,\n//   };\n//   static iconHeight = 188;\n//   multiplier = Math.floor(Math.random() * (4 - 1) + 1);\n\n//   start = this.setStartPosition();\n//   speed = Spinner.iconHeight * this.multiplier;\n\n//   setStartPosition() {\n//     return Math.floor(Math.random() * 9) * Spinner.iconHeight * -1;\n//   }\n\n//   moveBackground() {\n//     this.setState({\n//       position: this.state.position - this.speed,\n//       timeRemaining: this.state.timeRemaining - 100,\n//     });\n//   }\n\n//   getSymbolFromPosition() {\n//     let {position} = this.state;\n//     const totalSymbols = 9;\n//     const maxPosition = Spinner.iconHeight * (totalSymbols - 1) * -1;\n//     let moved = (this.props.timer / 100) * this.multiplier;\n//     let startPosition = this.start;\n//     let currentPosition = startPosition;\n\n//     for (let i = 0; i < moved; i++) {\n//       currentPosition -= Spinner.iconHeight;\n\n//       if (currentPosition < maxPosition) {\n//         currentPosition = 0;\n//       }\n//     }\n\n//     this.props.onFinish(currentPosition);\n//   }\n\n//   tick() {\n//     if (this.state.timeRemaining <= 0) {\n//       clearInterval(this.timer);\n//       this.getSymbolFromPosition();\n//     } else {\n//       this.moveBackground();\n//     }\n//   }\n\n//   componentDidMount() {\n//     clearInterval(this.timer);\n\n//     this.setState({\n//       position: this.start,\n//       timeRemaining: this.props.timer,\n//     });\n\n//     this.timer = setInterval(() => {\n//       this.tick();\n//     }, 100);\n//   }\n\n//   render() {\n//     let {position, current} = this.state;\n\n//     return (\n//       <View\n//         className=\"icons\"\n//         style={{backgroundPosition: '0px ' + position + 'px'}}\n//       />\n//     );\n//   }\n// }\n\n// // (function ($) {\n// //   var slotMachine = (function () {\n// //     var credits = 15,\n// //       spinning = 3,\n// //       spin = [0, 0, 0],\n// //       slotsTypes = {\n// //         🍒: [2, 5, 10],\n// //         🍊: [0, 15, 30],\n// //         🍐: [0, 40, 50],\n// //         🔔: [0, 50, 80],\n// //         🍋: [0, 0, 100],\n// //         🥝: [0, 0, 150],\n// //         🍉: [0, 0, 250],\n// //         🍍: [0, 0, 500],\n// //         anybar: [0, 0, 80],\n// //       },\n// //       slots = [\n// //         [\n// //           '🍊',\n// //           '🔔',\n// //           '🍊',\n// //           '🥝',\n// //           '🍐',\n// //           '🍊',\n// //           '🍉',\n// //           '🍐',\n// //           '🍊',\n// //           '🍋',\n// //           '🔔',\n// //           '🍒',\n// //           '🍊',\n// //           '🍐',\n// //           '🔔',\n// //           '🍋',\n// //           '🍒',\n// //           '🍍',\n// //           '🍊',\n// //           '🍐',\n// //           '🍊',\n// //           '🔔',\n// //           '🍊',\n// //         ],\n// //         [\n// //           '🍒',\n// //           '🍐',\n// //           '🍊',\n// //           '🔔',\n// //           '🍋',\n// //           '🍒',\n// //           '🍐',\n// //           '🍉',\n// //           '🍒',\n// //           '🔔',\n// //           '🍊',\n// //           '🍋',\n// //           '🍍',\n// //           '🍒',\n// //           '🥝',\n// //           '🍒',\n// //           '🔔',\n// //           '🍐',\n// //           '🍒',\n// //           '🍊',\n// //           '🍒',\n// //           '🍐',\n// //           '🍊',\n// //         ],\n// //         [\n// //           '🍒',\n// //           '🍊',\n// //           '🔔',\n// //           '🍐',\n// //           '🥝',\n// //           '🍒',\n// //           '🍐',\n// //           '🍊',\n// //           '🍉',\n// //           '🍒',\n// //           '🔔',\n// //           '🍊',\n// //           '🍒',\n// //           '🍊',\n// //           '🍒',\n// //           '🍐',\n// //           '🍋',\n// //           '🍍',\n// //           '🔔',\n// //           '🍒',\n// //           '🍒',\n// //           '🍊',\n// //           '🔔',\n// //         ],\n// //       ],\n// //       startSlot = function () {\n// //         spinning = false;\n\n// //         $('#slot-trigger').removeClass('slot-triggerDisabled');\n\n// //         this.blur();\n\n// //         return false;\n// //       },\n// //       endSlot = function () {\n// //         $('#slot-block').show();\n// //         $('#slot-credits').text('VERLOREN!!!');\n\n// //         setInterval(blink($('#slot-credits')), 1000);\n// //       },\n// //       addCredit = function (incrementCredits) {\n// //         var currentCredits = credits;\n// //         credits += incrementCredits;\n\n// //         blink($('#slot-credits'));\n\n// //         $('#slot-credits')\n// //           .css('credit', 0)\n// //           .animate(\n// //             {\n// //               credit: incrementCredits,\n// //             },\n// //             {\n// //               duration: 400 + incrementCredits,\n// //               easing: 'easeOut',\n// //               step: function (now) {\n// //                 $(this).html(parseInt(currentCredits + now, 10));\n// //               },\n// //               complete: function () {\n// //                 $(this).html(credits);\n// //                 blink($('#slot-credits'));\n// //               },\n// //             },\n// //           );\n// //       },\n// //       spin = function () {\n// //         this.blur();\n\n// //         if (spinning == false) {\n// //           $('#slot-machine .arm').animate({top: '45px', height: '2%'});\n// //           $('#slot-machine .arm .knob').animate({top: '-20px', height: '20px'});\n// //           $('#slot-machine .arm-shadow').animate({top: '40px'}, 380);\n// //           $(\n// //             '#slot-machine .ring1 .shadow, #slot-machine .ring2 .shadow',\n// //           ).animate({top: '50%', opacity: 1});\n\n// //           spinning = 3;\n// //           credits--;\n\n// //           $('#slot-credits').html(credits);\n\n// //           spin[0] = parseInt(Math.random() * 23);\n// //           spin[1] = parseInt(Math.random() * 23);\n// //           spin[2] = parseInt(Math.random() * 23);\n\n// //           $('#slot-trigger').addClass('slot-triggerDisabled');\n\n// //           $('img.slotSpinAnimation').show();\n\n// //           $('#wheel1 img:first').css('top', -(spin[0] * 44 + 16) + 'px');\n// //           $('#wheel2 img:first').css('top', -(spin[1] * 44 + 16) + 'px');\n// //           $('#wheel3 img:first').css('top', -(spin[2] * 44 + 16) + 'px');\n\n// //           setTimeout(function () {\n// //             $('#slot-machine .arm').animate({\n// //               top: '-25px',\n// //               height: '50%',\n// //               overflow: 'visible',\n// //             });\n// //             $('#slot-machine .arm .knob').animate({\n// //               top: '-15px',\n// //               height: '16px',\n// //             });\n// //             $('#slot-machine .arm-shadow').animate({top: '13px'});\n// //             $(\n// //               '#slot-machine .ring1 .shadow, #slot-machine .ring2 .shadow',\n// //             ).animate({top: '0', opacity: 0});\n// //           }, 500);\n\n// //           setTimeout(function () {\n// //             stopSpin(1);\n// //           }, 1500 + parseInt(1500 * Math.random()));\n\n// //           setTimeout(function () {\n// //             stopSpin(2);\n// //           }, 1500 + parseInt(1500 * Math.random()));\n\n// //           setTimeout(function () {\n// //             stopSpin(3);\n// //           }, 1500 + parseInt(1500 * Math.random()));\n// //         }\n\n// //         return false;\n// //       },\n// //       stopSpin = function (slot) {\n// //         $('#wheel' + slot)\n// //           .find('img:last')\n// //           .hide()\n// //           .end()\n// //           .find('img:first')\n// //           .animate(\n// //             {\n// //               top: -spin[slot - 1] * 44,\n// //             },\n// //             {\n// //               duration: 500,\n// //               easing: 'elasticOut',\n// //               complete: function () {\n// //                 spinning--;\n\n// //                 if (spinning <= 0) {\n// //                   endSpin();\n// //                 }\n// //               },\n// //             },\n// //           );\n// //       },\n// //       endSpin = function () {\n// //         var slotType = slots[0][spin[0]],\n// //           matches = 1,\n// //           barMatch = /bar/.test(slotType) ? 1 : 0,\n// //           winnedCredits = 0,\n// //           waitToSpin = 10;\n\n// //         if (slotType == slots[1][spin[1]]) {\n// //           matches++;\n\n// //           if (slotType == slots[2][spin[2]]) {\n// //             matches++;\n// //           } else if (barMatch != 0 && /bar/.test(slots[2][spin[2]])) {\n// //             barMatch++;\n// //           }\n// //         } else if (barMatch != 0 && /bar/.test(slots[1][spin[1]])) {\n// //           barMatch++;\n\n// //           if (/bar/.test(slots[2][spin[2]])) {\n// //             barMatch++;\n// //           }\n// //         }\n\n// //         if (matches != 3 && barMatch == 3) {\n// //           slotType = 'anybar';\n// //           matches = 3;\n// //         }\n\n// //         var winnedCredits = slotsTypes[slotType][matches - 1];\n\n// //         if (winnedCredits > 0) {\n// //           addCredit(winnedCredits);\n// //           waitToSpin = 410 + winnedCredits;\n// //         }\n\n// //         setTimeout(function () {\n// //           if (credits == 0) {\n// //             endSlot();\n// //           } else {\n// //             $('#slot-trigger').removeClass('slot-triggerDisabled');\n// //             spinning = false;\n// //           }\n// //         }, waitToSpin);\n// //       };\n// //     return {\n// //       init: function () {\n// //         startSlot();\n\n// //         $('#slot-trigger')\n// //           .bind('mousedown', function () {\n// //             $(this).addClass('slot-triggerDown');\n// //           })\n// //           .bind('click', spin);\n\n// //         $(document).bind('mouseup', function () {\n// //           $('#slot-trigger').removeClass('slot-triggerDown');\n// //         });\n\n// //         $('#wheel1 img:first').css(\n// //           'top',\n// //           -(parseInt(Math.random() * 23) * 44) + 'px',\n// //         );\n// //         $('#wheel2 img:first').css(\n// //           'top',\n// //           -(parseInt(Math.random() * 23) * 44) + 'px',\n// //         );\n// //         $('#wheel3 img:first').css(\n// //           'top',\n// //           -(parseInt(Math.random() * 23) * 44) + 'px',\n// //         );\n// //       },\n// //     };\n// //   })();\n\n// //   $.extend($.easing, {\n// //     bounceOut: function (x, t, b, c, d) {\n// //       if ((t /= d) < 1 / 2.75) {\n// //         return c * (7.5625 * t * t) + b;\n// //       } else if (t < 2 / 2.75) {\n// //         return c * (7.5625 * (t -= 1.5 / 2.75) * t + 00.75) + b;\n// //       } else if (t < 2.5 / 2.75) {\n// //         return c * (7.5625 * (t -= 2.25 / 2.75) * t + 00.9375) + b;\n// //       } else {\n// //         return c * (7.5625 * (t -= 2.625 / 2.75) * t + 00.984375) + b;\n// //       }\n// //     },\n// //     easeOut: function (x, t, b, c, d) {\n// //       return -c * (t /= d) * (t - 2) + b;\n// //     },\n// //     elasticOut: function (x, t, b, c, d) {\n// //       var s = 1.70158;\n// //       var p = 0;\n// //       var a = c;\n// //       if (t == 0) return b;\n// //       if ((t /= d) == 1) return b + c;\n// //       if (!p) p = d * 00.3;\n// //       if (a < Math.abs(c)) {\n// //         a = c;\n// //         var s = p / 4;\n// //       } else var s = (p / (2 * Math.PI)) * Math.asin(c / a);\n// //       return (\n// //         a * Math.pow(2, -10 * t) * Math.sin(((t * d - s) * (2 * Math.PI)) / p) +\n// //         c +\n// //         b,\n// //       );\n// //     },\n// //   });\n\n// //   $(document).ready(slotMachine.init);\n// // })(jQuery);\n\n// // function blink(element) {\n// //   element.animate({opacity: 0}, 200, 'linear', function () {\n// //     $(this).animate({opacity: 1}, 200);\n// //   });\n// // }\n"],"sourceRoot":""}