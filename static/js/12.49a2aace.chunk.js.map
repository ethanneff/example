{"version":3,"sources":["apps/Complete/screens/Account/factory.ts","apps/Complete/screens/Account/index.tsx","apps/Complete/configs.tsx","apps/Complete/components/AddButton.tsx","apps/Complete/components/AddItem.tsx","apps/Complete/components/AddList.tsx","apps/Complete/components/ListHeaderInput.tsx","apps/Complete/components/ListHeader.tsx","apps/Complete/components/ListItem.tsx","apps/Complete/components/ListItems.tsx","apps/Complete/components/List.tsx","apps/Complete/components/Board.tsx","apps/Complete/components/Card.tsx","apps/Complete/components/HandleKeyboard.tsx","apps/Complete/components/OrganizeButton.tsx","apps/Complete/screens/Capture/index.tsx","apps/Complete/screens/Landing/index.tsx","apps/Complete/screens/Project/index.tsx","apps/Complete/screens/Projects/index.tsx","apps/Complete/screens/Reflect/Graph.tsx","apps/Complete/screens/Reflect/index.tsx","apps/Complete/index.tsx"],"names":["date","Date","now","defaults","id","v4","active","createdAt","updatedAt","Account","memo","color","useColor","dispatch","useRootDispatch","useNavigation","goBack","navigate","navBack","useCallback","onLogin","inboxItems","title","inboxList","items","map","item","inboxBoard","lists","homeItems","homeLists","homeBoard","projectItems","board","projectsList","listsItems","listsList","categoryBoard","user","name","boards","getDefaultUserTemplate","createItem","list","createList","createBoard","createUser","onLogout","removeUser","onSetActive","setActiveUser","onLeftPress","ScrollView","contentContainerStyle","padding","Theme","p04","style","flex","backgroundColor","surface","paddingBottom","type","center","emphasis","onPress","config","borderRadius","p02","AddButton","width","placeholder","onSubmit","textInputRef","useRef","useState","showInput","setShowInput","itemTitle","setItemTitle","onItemTitleChange","v","onAddItemPress","p","onItemTitleClose","onItemTitleSubmit","formatted","trim","length","current","focus","onBlur","View","height","p12","background","justifyContent","flexDirection","alignItems","blurOnSubmit","focusOnLoad","onChangeText","onRef","onSubmitEditing","returnKeyType","value","padded","primary","AddItem","listId","itemId","updateListAddItem","AddList","boardId","updateBoardAddList","ListHeaderInput","listTitle","useRootSelector","s","completeList","setTitle","onSave","updateListTitle","ListHeader","ListItem","completeItem","showControls","setShowControls","onTextChange","Keyboard","dismiss","onFocus","onItemNav","Error","setActiveBoard","onItemDelete","removeItem","updateListRemoveItem","onItemDetails","onItemLongPress","onLongPress","margin","ListItems","maxHeight","listItems","cardsRef","cardsLength","onKeyExtractor","onCardSizeChange","scrollToEnd","onRenderItem","FlatList","data","keyExtractor","keyboardShouldPersistTaps","onContentSizeChange","ref","renderItem","showsVerticalScrollIndicator","List","orientation","listWidth","listMaxHeight","horizontal","marginRight","marginBottom","Board","listSize","completeBoard","getItemId","getItemLayout","_","index","offset","renderAddList","renderList","ListFooterComponent","decelerationRate","showsHorizontalScrollIndicator","snapToAlignment","snapToInterval","Card","children","onLayout","HandleKeyboard","render","onDismissKeyboard","TouchableWithoutFeedback","OrganizeButton","disable","Capture","keyboardHeight","state","device","container","button","dimensions","setDimensions","android","Platform","OS","listHeight","getInboxListId","onOrganize","key","event","nativeEvent","layout","navToAccount","onRightPress","rightIcon","Landing","navPortfolioLogin","slides","text","info","warning","success","brand","Project","screenWidth","getSmallestDimension","setContainer","Projects","listIds","getCategoryListIds","getDomain","domain","Math","min","max","Graph","scaleX","scaleTime","d","range","scaleY","scaleLinear","strokeWidth","shape","x","y","curve","StyleSheet","absoluteFill","x1","x2","y1","y2","stopColor","fill","stroke","Title","getTime","Reflect","Dimensions","get","noHeader","headerShown","RootTab","createBottomTabNavigator","RootStack","createStackNavigator","ProjectsStack","tabIcons","capture","focused","unfocused","reflect","Focus","Navigator","screenOptions","Screen","component","Tabs","tabBarOptions","keyboardHidesTabBar","activeTintColor","inactiveTintColor","showLabel","route","tabBarIcon","size","iconColor","Main","completeUser","mode","rootMode","rootScreenOptions","Notification","Alert"],"mappings":"wNAUMA,EAAOC,KAAKC,MACZC,EAAW,iBAAO,CACtBC,GAAIC,cACJC,QAAQ,EACRC,UAAWP,EACXQ,UAAWR,ICMAS,EAAUC,gBAAK,WAC1B,IAAMC,EAAQC,cACRC,EAAWC,cAF4B,EAGlBC,0BAApBC,EAHsC,EAGtCA,OAAQC,EAH8B,EAG9BA,SACTC,EAAUC,uBAAY,kBAAMH,MAAU,CAACA,IAEvCI,EAAUD,uBAAY,WAAO,IAAD,EDTE,WAEpC,IAAME,EAAqB,CAAC,2BACtBlB,KADqB,IACTmB,MAAO,cADE,2BAErBnB,KAFqB,IAETmB,MAAO,8BAFE,2BAGrBnB,KAHqB,IAGTmB,MAAO,gBAHE,2BAIrBnB,KAJqB,IAITmB,MAAO,eAJE,2BAKrBnB,KALqB,IAKTmB,MAAO,+BALE,2BAMrBnB,KANqB,IAMTmB,MAAO,oCANE,2BAOrBnB,KAPqB,IAOTmB,MAAO,gBAPE,2BAQrBnB,KARqB,IAQTmB,MAAO,kCARE,2BASrBnB,KATqB,IASTmB,MAAO,qBATE,2BAUrBnB,KAVqB,IAUTmB,MAAO,kBAEnBC,EAAe,2BAChBpB,KADgB,IAEnBmB,MAAO,QACPE,MAAOH,EAAWI,KAAI,SAACC,GAAD,OAAUA,EAAKtB,QAEjCuB,EAAiB,2BAClBxB,KADkB,IAErBmB,MAAO,QACPM,MAAO,CAACL,EAAUnB,MAIdyB,EAAoB,CAAC,2BACrB1B,KADoB,IACRmB,MAAO,eADC,2BAEpBnB,KAFoB,IAERmB,MAAO,eAFC,2BAGpBnB,KAHoB,IAGRmB,MAAO,aAHC,2BAIpBnB,KAJoB,IAIRmB,MAAO,gBAJC,2BAKpBnB,KALoB,IAKRmB,MAAO,eALC,2BAMpBnB,KANoB,IAMRmB,MAAO,cAEnBQ,EAAoB,CAAC,2BACrB3B,KADoB,IACRmB,MAAO,UAAWE,MAAOK,EAAUJ,KAAI,SAACC,GAAD,OAAUA,EAAKtB,QAD9C,2BAEpBD,KAFoB,IAERmB,MAAO,OAAQE,MAAO,KAFd,2BAGpBrB,KAHoB,IAGRmB,MAAO,cAAeE,MAAO,KAHrB,2BAIpBrB,KAJoB,IAIRmB,MAAO,OAAQE,MAAO,MAElCO,EAAgB,2BACjB5B,KADiB,IAEpBmB,MAAO,OACPM,MAAOE,EAAUL,KAAI,SAACC,GAAD,OAAUA,EAAKtB,QAIhC4B,EAAuB,CAAC,2BACxB7B,KADuB,IACXmB,MAAO,UAAWW,MAAOF,EAAU3B,KADxB,2BAEvBD,KAFuB,IAEXmB,MAAO,YAFI,2BAGvBnB,KAHuB,IAGXmB,MAAO,YAHI,2BAIvBnB,KAJuB,IAIXmB,MAAO,WAJI,2BAKvBnB,KALuB,IAKXmB,MAAO,iBAEnBY,EAAkB,2BACnB/B,KADmB,IAEtBmB,MAAO,WACPE,MAAOQ,EAAaP,KAAI,SAACC,GAAD,OAAUA,EAAKtB,QAEnC+B,EAAqB,CAAC,2BACtBhC,KADqB,IACTmB,MAAO,kBADE,2BAErBnB,KAFqB,IAETmB,MAAO,mBAFE,2BAGrBnB,KAHqB,IAGTmB,MAAO,eAHE,2BAIrBnB,KAJqB,IAITmB,MAAO,eAJE,2BAKrBnB,KALqB,IAKTmB,MAAO,oBAEnBc,EAAe,2BAChBjC,KADgB,IAEnBmB,MAAO,QACPE,MAAOW,EAAWV,KAAI,SAACC,GAAD,OAAUA,EAAKtB,QAEjCiC,EAAoB,2BACrBlC,KADqB,IAExBmB,MAAO,aACPM,MAAO,CAACM,EAAa9B,GAAIgC,EAAUhC,MAUrC,MAAO,CACLkC,KAPc,2BACXnC,KADW,IAEdoC,KAAM,YACNC,OAAQ,CAACb,EAAWvB,GAAIiC,EAAcjC,MAKtCoC,OAAQ,CAACT,EAAWJ,EAAYU,GAChCT,MAAM,CAAEL,GAAH,OAAiBO,EAAjB,CAA4BI,EAAcE,IAC/CZ,MAAM,GAAD,OAAMH,EAAeQ,EAAcG,EAAiBG,IC9EpBM,GAA9BH,EADyB,EACzBA,KAAME,EADmB,EACnBA,OAAQZ,EADW,EACXA,MADW,EACJJ,MACtBC,KAAI,SAACC,GAAD,OAAUb,EAAS6B,YAAWhB,OACxCE,EAAMH,KAAI,SAACkB,GAAD,OAAU9B,EAAS+B,YAAWD,OACxCH,EAAOf,KAAI,SAACQ,GAAD,OAAWpB,EAASgC,YAAYZ,OAC3CpB,EAASiC,YAAWR,MACnB,CAACzB,IACEkC,EAAW5B,uBAAY,WAC3BN,EAASmC,eACT/B,EAAS,UACR,CAACJ,EAAUI,IACRgC,EAAc9B,uBAAY,WAC9BN,EAASqC,aAAc,MACtB,CAACrC,IAEJ,OACE,cAAC,IAAD,CAAQsC,YAAajC,EAASI,MAAM,UAApC,SACE,eAAC8B,EAAA,EAAD,CACEC,sBAAuB,CACrBC,QAASC,IAAMD,QAAQE,KAEzBC,MAAO,CAACC,KAAM,EAAGC,gBAAiBhD,EAAMiD,SAJ1C,UAKE,eAAC,IAAD,WACE,cAAC,IAAD,CACEH,MAAO,CAACI,cAAeN,IAAMD,QAAQE,KACrClC,MAAM,UACNwC,KAAK,OAEP,cAAC,IAAD,CACEC,QAAM,EACNC,SAAS,SACT1C,MAAM,+GACNwC,KAAK,UAGT,eAAC,IAAD,WACE,cAAC,IAAD,CACEL,MAAO,CAACI,cAAeN,IAAMD,QAAQE,KACrClC,MAAM,YACNwC,KAAK,OAEP,cAAC,IAAD,CACEC,QAAM,EACNC,SAAS,SACT1C,MAAM,+GACNwC,KAAK,UAGT,eAAC,IAAD,WACE,cAAC,IAAD,CACEL,MAAO,CAACI,cAAeN,IAAMD,QAAQE,KACrClC,MAAM,UACNwC,KAAK,OAEP,cAAC,IAAD,CACEC,QAAM,EACNC,SAAS,SACT1C,MAAM,+GACNwC,KAAK,UAGT,cAAC,IAAD,CAAQG,QAAS7C,EAASE,MAAM,UAChC,cAAC,IAAD,CAAQ2C,QAASlB,EAAUzB,MAAM,WACjC,cAAC,IAAD,CAAQ2C,QAAShB,EAAa3B,MAAM,uB,+BCxF/B4C,EAAS,CACpBC,aAAcZ,IAAMD,QAAQc,IAC5Bd,QAASC,IAAMD,QAAQE,KCUZa,EAAY3D,gBAAK,YAKV,IAJlB4D,EAIiB,EAJjBA,MACAC,EAGiB,EAHjBA,YACAjD,EAEiB,EAFjBA,MACAkD,EACiB,EADjBA,SAEM7D,EAAQC,cACR6D,EAAeC,iBAAiC,MAFrC,EAGiBC,oBAAS,GAH1B,mBAGVC,EAHU,KAGCC,EAHD,OAIiBF,mBAAS,IAJ1B,mBAIVG,EAJU,KAICC,EAJD,KAKXC,EAAoB7D,uBAAY,SAAC8D,GAAD,OAAeF,EAAaE,KAAI,IAChEC,EAAiB/D,uBAAY,kBAAM0D,GAAa,SAACM,GAAD,OAAQA,OAAI,IAE5DC,EAAmBjE,uBAAY,WACnC0D,GAAa,GACbE,EAAa,MACZ,IAEGM,EAAoBlE,uBAAY,WAAO,IAAD,EACpCmE,EAAYR,EAAUS,OACH,IAArBD,EAAUE,SAEdT,EAAa,IACbP,EAASc,GACT,UAAAb,EAAagB,eAAb,SAAsBC,WACrB,CAACZ,EAAWN,IAETmB,EAASxE,uBAAY,WACzB0D,GAAa,GACbE,EAAa,MACZ,IAEH,OACE,cAACa,EAAA,EAAD,CACEnC,MAAO,CACLa,QACAuB,OAAQtC,IAAMD,QAAQwC,IACtB3B,aAAcD,EAAOC,aACrBR,gBAAiBhD,EAAMoF,WACvBC,eAAgB,UANpB,SAQGpB,EACC,eAACgB,EAAA,EAAD,CAAMnC,MAAO,CAACwC,cAAe,MAAOC,WAAY,UAAhD,UACE,cAAC,IAAD,CACEC,cAAc,EACdnC,SAAS,OACTN,MAAI,EACJ0C,aAAW,EACXT,OAAQA,EACRU,aAAcrB,EACdsB,MAAO7B,EACP8B,gBAAiBlB,EACjBd,YAAaA,EACbiC,cAAc,OACdC,MAAO3B,IAET,cAAC,IAAD,CAAMvC,KAAK,QAAQ0B,QAASmB,EAAkBsB,QAAM,IACpD,cAAC,IAAD,CACE/F,MAAOA,EAAMgG,QACbpE,KAAK,OACL0B,QAASoB,EACTqB,QAAM,OAIV,cAAC,IAAD,CAAQ3C,QAAM,EAACpD,MAAM,UAAUsD,QAASiB,EAAgB5D,MAAOA,SCnE1DsF,EAAUlG,gBAAK,YAIV,IAHhB6D,EAGe,EAHfA,YACAjD,EAEe,EAFfA,MACAuF,EACe,EADfA,OAEMhG,EAAWC,cACX0D,EAAWrD,uBACf,SAACsF,GACC,IAAMK,EAASzG,cACTL,EAAOC,KAAKC,MACZwB,EAAa,CACjBtB,GAAI0G,EACJxG,QAAQ,EACRgB,MAAOmF,EACPlG,UAAWP,EACXQ,UAAWR,GAEba,EAAS6B,YAAWhB,IACpBb,EAASkG,YAAkB,CAACF,SAAQC,cAEtC,CAACjG,EAAUgG,IAGb,OACE,cAAC,EAAD,CAAWrC,SAAUA,EAAUD,YAAaA,EAAajD,MAAOA,OCvBvD0F,EAAUtG,gBAAK,YAKV,IAJhB6D,EAIe,EAJfA,YACAjD,EAGe,EAHfA,MACA2F,EAEe,EAFfA,QACA3C,EACe,EADfA,MAEMzD,EAAWC,cACX0D,EAAWrD,uBACf,SAACsF,GACC,IAAMI,EAASxG,cACTL,EAAOC,KAAKC,MACZyC,EAAa,CACjBvC,GAAIyG,EACJvG,QAAQ,EACRgB,MAAOmF,EACPlG,UAAWP,EACXQ,UAAWR,EACXwB,MAAO,IAETX,EAAS+B,YAAWD,IACpB9B,EAASqG,YAAmB,CAACD,UAASJ,cAExC,CAACI,EAASpG,IAGZ,OACE,cAAC,EAAD,CACE2D,SAAUA,EACVD,YAAaA,EACbjD,MAAOA,EACPgD,MAAOA,O,SClCA6C,EAAkBzG,gBAAK,YAEV,IADxBmG,EACuB,EADvBA,OAEMhG,EAAWC,cACXsG,EAAYC,aAAgB,SAACC,GAAD,OAAOA,EAAEC,aAAa/F,MAAMqF,GAAQvF,SAF/C,EAGGqD,mBAASyC,GAHZ,mBAGhB9F,EAHgB,KAGTkG,EAHS,KAIjBnB,EAAelF,uBAAY,SAACsF,GAChCe,EAASf,KACR,IAEGgB,EAAStG,uBAAY,WACzBN,EAAS6G,YAAgB,CAACb,SAAQvF,aACjC,CAACT,EAAUgG,EAAQvF,IAEtB,OACE,cAAC,IAAD,CACE0C,SAAS,OACTN,MAAI,EACJiC,OAAQ8B,EACRpB,aAAcA,EACd9B,YAAY,eACZiC,cAAc,OACd1C,KAAK,KACL2C,MAAOnF,OCvBAqG,EAAajH,gBAAK,YAAgD,IAA3BmG,EAA0B,EAA1BA,OAClD,OACE,eAACjB,EAAA,EAAD,CACEnC,MAAO,CACLwC,cAAe,MACfC,WAAY,SACZF,eAAgB,iBAJpB,UAME,cAAC,EAAD,CAAiBa,OAAQA,IACzB,cAAC,IAAD,CAAMtE,KAAK,kBAAkBmE,QAAM,U,SCJ5BkB,EAAWlH,gBAAK,YAGV,IAFjBoG,EAEgB,EAFhBA,OACAD,EACgB,EADhBA,OAEMnF,EAAO2F,aAAgB,SAACC,GAAD,OAAOA,EAAEO,aAAarG,MAAMsF,MACnDjG,EAAWC,cACVG,EAAYF,0BAAZE,SACDN,EAAQC,cAJE,EAKU+D,mBAASjD,EAAKJ,OALxB,mBAKTA,EALS,KAKFkG,EALE,OAMwB7C,oBAAS,GANjC,mBAMTmD,EANS,KAMKC,EANL,KAQVC,EAAe7G,uBAAY,SAACsF,GAChCe,EAASf,KACR,IAEGrB,EAAmBjE,uBAAY,WACnCqG,EAAS9F,EAAKJ,OACd2G,IAASC,YACR,CAACxG,EAAKJ,QACH+D,EAAoBlE,uBAAY,WACpC8G,IAASC,YACR,IAEGC,EAAUhH,uBAAY,kBAAM4G,GAAgB,KAAO,IACnDpC,EAASxE,uBAAY,kBAAM4G,GAAgB,KAAQ,IAEnDK,EAAYjH,uBAAY,WAC5B,IAAKO,EAAKO,MACR,MAAM,IAAIoG,MAAM,6CAElBxH,EAASyH,YAAe5G,EAAKO,QAC7BhB,EAAS,WACR,CAACJ,EAAUa,EAAKO,MAAOhB,IAEpBsH,EAAepH,uBAAY,WAC/BN,EAAS2H,YAAW1B,IACpBjG,EAAS4H,YAAqB,CAAC5B,SAAQC,cACtC,CAACjG,EAAUiG,EAAQD,IAChB6B,EAAgBvH,uBAAY,cAAiB,IAC7CwH,EAAkBxH,uBAAY,cAAiB,IAErD,OACE,eAAC,IAAD,CAEEyH,YAAaD,EACblF,MAAO,CACLC,KAAM,EACNS,aAAcD,EAAOC,aACrB0E,OAAQ3E,EAAOZ,QAAU,EACzBK,gBAAiBhD,EAAMiD,QACvBqC,cAAe,OARnB,UAUE,cAAC,IAAD,CACEtC,gBAAiBhD,EAAMiD,QACvBF,MAAI,EACJiC,OAAQA,EACRU,aAAc2B,EACdG,QAASA,EACT5B,gBAAiBlB,EACjBd,YAAY,eACZiC,cAAc,OACdC,MAAOnF,IAERwG,EACC,eAAClC,EAAA,EAAD,CAAMnC,MAAO,CAACwC,cAAe,MAAOC,WAAY,UAAhD,UACE,cAAC,IAAD,CAAM3D,KAAK,QAAQ0B,QAASmB,EAAkBsB,QAAM,IACpD,cAAC,IAAD,CACE/F,MAAOA,EAAMgG,QACbpE,KAAK,OACL0B,QAASoB,EACTqB,QAAM,OAIV,eAACd,EAAA,EAAD,CAAMnC,MAAO,CAACwC,cAAe,MAAOC,WAAY,UAAhD,UACE,cAAC,IAAD,CAAM3D,KAAK,oBAAoB0B,QAASsE,EAAc7B,QAAM,IAC5D,cAAC,IAAD,CAAMnE,KAAK,kBAAkB0B,QAASyE,EAAehC,QAAM,IAC1DhF,EAAKO,OACJ,cAAC,IAAD,CAAMM,KAAK,gBAAgB0B,QAASmE,EAAW1B,QAAM,SAnCtDhF,EAAKtB,OC/CH0I,EAAYpI,gBAAK,YAGV,IAFlBmG,EAEiB,EAFjBA,OACAkC,EACiB,EADjBA,UAEMC,EAAY3B,aAAgB,SAACC,GAAD,OAAOA,EAAEC,aAAa/F,MAAMqF,GAAQrF,SAChEyH,EAAWvE,iBAAwB,MACnCwE,EAAcxE,iBAAOsE,EAAUxD,QAE/B2D,EAAiBhI,uBAAY,SAACO,GAAD,OAAUA,IAAM,IAE7C0H,EAAmBjI,uBAAY,WACU,IAAD,EAAxC6H,EAAUxD,OAAS0D,EAAYzD,UACjC,UAAAwD,EAASxD,eAAT,SAAkB4D,cAClBH,EAAYzD,QAAUuD,EAAUxD,UAEjC,CAACwD,EAAUxD,SAER8D,EAAuCnI,uBAC3C,YAAa,IAAXO,EAAU,EAAVA,KACA,OAAO,cAAC,EAAD,CAAUoF,OAAQpF,EAAiBmF,OAAQA,GAAdnF,KAEtC,CAACmF,IAGH,OACE,cAAC0C,EAAA,EAAD,CACEC,KAAMR,EACNS,aAAcN,EACdO,0BAA0B,UAC1BC,oBAAqBP,EACrBQ,IAAKX,EACLY,WAAYP,EACZQ,8BAA8B,EAC9BrG,MAAO,CAACsF,kBC1BDgB,EAAOrJ,gBAAK,YAOV,IANbmG,EAMY,EANZA,OACAmD,EAKY,EALZA,YACAC,EAIY,EAJZA,UACAC,EAGY,EAHZA,cACA5I,EAEY,EAFZA,MACAiD,EACY,EADZA,YAEM5D,EAAQC,cACR0C,EAAUY,EAAOZ,QACjBa,EAAeD,EAAOC,aACtBgG,EAA6B,eAAhBH,EACnB,OACE,cAACpE,EAAA,EAAD,UACE,eAACA,EAAA,EAAD,CACEnC,MAAO,CACLU,eACAG,MAAO2F,EACPtG,gBAAiBhD,EAAMoF,WACvBzC,QAASA,EAAU,EACnB8G,YAAaD,EAAa7G,EAAU,EACpC+G,aAAcF,EAAa,EAAI7G,GAPnC,UASE,cAAC,EAAD,CAAYuD,OAAQA,IACpB,cAAC,EAAD,CAAWA,OAAQA,EAAQkC,UAAWmB,IACtC,cAAC,EAAD,CAASrD,OAAQA,EAAQtC,YAAaA,EAAajD,MAAOA,YC7BrDgJ,EAAQ5J,gBAAK,YAIV,IAHduG,EAGa,EAHbA,QACAiD,EAEa,EAFbA,cACAD,EACa,EADbA,UAEMM,EAAWN,EAAY/F,EAAOZ,QAC9BrB,EAAQoF,aAAgB,SAACC,GAAD,OAAOA,EAAEkD,cAAchJ,MAAMyF,MACrDwD,EAAYtJ,uBAAY,SAACO,GAAD,OAAUA,IAAM,IAExCgJ,EAAgBvJ,uBACpB,SAACwJ,EAAGC,GAAJ,MAAe,CACbpF,OAAQ+E,EACRM,OAAQN,EAAWK,EACnBA,WAEF,CAACL,IAGGO,EAAgB3J,uBAAY,WAChC,OACE,cAAC,EAAD,CACE8F,QAASA,EACT1C,YAAY,gBACZjD,MAAM,WACNgD,MAAO2F,MAGV,CAAChD,EAASgD,IAEPc,EAAa5J,uBACjB,YAAa,IAAXO,EAAU,EAAVA,KACA,OACE,cAAC,EAAD,CAEEmF,OAAQnF,EACRwI,cAAeA,EACfD,UAAWA,EACXD,YAAY,aACZzF,YAAY,gBACZjD,MAAM,YANDI,KAUX,CAACwI,EAAeD,IAGlB,OACE,cAACV,EAAA,EAAD,CACEyB,oBAAqBF,EACrBzH,sBAAuB,CAACC,QAASY,EAAOZ,SACxCkG,KAAMvH,EAAML,MACZqJ,iBAAiB,OACjBP,cAAeA,EACfP,YAAU,EACVV,aAAcgB,EACdf,0BAA0B,UAC1BG,WAAYkB,EACZG,gCAAgC,EAChCC,gBAAgB,SAChBC,eAAgBb,OC9DTc,EAAO3K,gBAAK,YAAgD,IAAjC4K,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,SAC1C5K,EAAQC,cACd,OACE,cAACgF,EAAA,EAAD,CACE2F,SAAUA,EACV9H,MAAO,CACLU,aAAcD,EAAOC,aACrBR,gBAAiBhD,EAAMoF,WACvBzC,QAASY,EAAOZ,QAAU,EAC1B+G,aAAcnG,EAAOZ,SANzB,SAQGgI,O,SCNME,EAAiB9K,gBAAK,YAKV,IAJvB6K,EAIsB,EAJtBA,SACAE,EAGsB,EAHtBA,OACA9H,EAEsB,EAFtBA,gBACA2H,EACsB,EADtBA,SAEMI,EAAoBvK,uBAAY,kBAAM8G,IAASC,YAAW,IAChE,OACE,cAACyD,EAAA,EAAD,CACEJ,SAAUA,EACVtH,QAASyH,EACTjI,MAAO,CAACC,KAAM,GAHhB,SAIE,cAACkC,EAAA,EAAD,CAAMnC,MAAO,CAACC,KAAM,EAAGC,mBAAvB,SAA0C8H,EAASH,EAAW,YCfvDM,EAAiBlL,gBAAK,YAIV,IAHvBmG,EAGsB,EAHtBA,OACA5C,EAEsB,EAFtBA,QACAsH,EACsB,EADtBA,SAEMvC,EAAY3B,aAChB,SAACC,GAAD,OAAOA,EAAEC,aAAa/F,MAAMqF,GAAQrF,MAAMgE,UAE5C,OACE,cAAC,EAAD,CAAM+F,SAAUA,EAAhB,SACE,cAAC,IAAD,CACExH,QAAM,EACNpD,MAAM,UACNkL,QAAuB,IAAd7C,EACT/E,QAASA,EACT3C,MAAM,kBCjBDwK,EAAUpL,gBAAK,WAC1B,IAAMC,EAAQC,cACPK,EAAYF,0BAAZE,SACDC,EAAUC,uBAAY,kBAAMF,EAAS,WAAU,CAACA,IAChD8K,EAAiB1E,aACrB,SAAC2E,GAAD,OAAWA,EAAMC,OAAOF,kBALmB,EAOTpH,mBAAS,CAACuH,UAAW,EAAGC,OAAQ,IAPvB,mBAOtCC,EAPsC,KAO1BC,EAP0B,KAQvCC,EAA0B,YAAhBC,IAASC,GAEnBC,EACe,IAAnBV,EACIK,EAAWF,UACXE,EAAWD,QACVG,EAA2B,EAAjBpI,EAAOZ,QAA+B,GAAjBY,EAAOZ,SACvC8I,EAAWF,UACXH,GACCO,EAA2B,EAAjBpI,EAAOZ,QAA+B,EAAjBY,EAAOZ,SAEvCuD,EAASQ,YAAgBqF,KAEzBC,EAAaxL,uBAAY,cAAiB,IAE1CoK,EAAWpK,uBACf,SAACyL,GAAD,OAAiB,SAACC,GAA8B,IACvChH,EAAUgH,EAAMC,YAAYC,OAA5BlH,OAEG,cAAR+G,GAAuBR,EAAWF,UAAY,GAGhDG,GAAc,SAAClH,GAAD,mBAAC,eAAWA,GAAZ,kBAAgByH,EAAM/G,UAEtC,CAACuG,EAAWF,YAGRc,EAAe7L,uBAAY,kBAAMF,EAAS,aAAY,CAACA,IAE7D,OACE,cAAC,IAAD,CACEkC,YAAajC,EACb+L,aAAcD,EACdE,UAAU,UACV5L,MAAM,UAJR,SAKE,cAAC,EAAD,CACEqC,gBAAiBhD,EAAMiD,QACvB2H,SAAUA,EAAS,aACnBE,OAAQW,EAAWF,UAAY,EAHjC,SAIGrF,EACC,eAACjB,EAAA,EAAD,CAAMnC,MAAO,CAACH,QAASY,EAAOZ,SAA9B,UACE,cAAC,EAAD,CACEuD,OAAQA,EACRqD,cAAeuC,EACflI,YAAY,gBACZjD,MAAM,aAER,cAAC,EAAD,CACEuF,OAAQA,EACR0E,SAAUA,EAAS,UACnBtH,QAAS0I,OAIb,cAAC,IAAD,CAAMrL,MAAM,2BClET6L,EAAUzM,gBAAK,WAAoB,IACvCO,EAAYF,0BAAZE,SACDN,EAAQC,cACRwM,EAAoBjM,uBAAY,kBAAMF,EAAS,aAAY,CAACA,IAE5DoM,EAAkB,CACtB,CAACjN,GAAI,IAAKkN,KAAM,QAAS3M,MAAOA,EAAM4M,MACtC,CAACnN,GAAI,IAAKkN,KAAM,MAAO3M,MAAOA,EAAM6M,SACpC,CAACpN,GAAI,IAAKkN,KAAM,QAAS3M,MAAOA,EAAM8M,SACtC,CAACrN,GAAI,IAAKkN,KAAM,OAAQ3M,MAAOA,EAAM+M,QAGvC,OACE,eAAC,IAAD,CAAQpM,MAAM,UAAd,UACE,cAAC,IAAD,CAAU+L,OAAQA,IAClB,cAAC,IAAD,CAAQtJ,QAAM,EAACE,QAASmJ,EAAmB9L,MAAM,gB,QCT1CqM,EAAUjN,gBAAK,WAAoB,IACvCM,EAAUD,0BAAVC,OACDL,EAAQC,cACRgN,EAAcvG,YAAgBwG,KAC9B5G,EAAUI,aAAgB,SAACC,GAAD,OAAOA,EAAEkD,cAAclK,UACjD2J,EAA0B,GAAd2D,EAL2B,EAMXjJ,mBAAS,GANE,mBAMtCuH,EANsC,KAM3B4B,EAN2B,KAOvCxB,EAA0B,YAAhBC,IAASC,GACnBT,EAAiB1E,aACrB,SAAC2E,GAAD,OAAWA,EAAMC,OAAOF,kBAGpB7B,EACe,IAAnB6B,EACIG,GAAaI,EAA2B,EAAjBpI,EAAOZ,QAA+B,GAAjBY,EAAOZ,SACnD4I,EACAH,GACCO,EAA2B,EAAjBpI,EAAOZ,QAA+B,EAAjBY,EAAOZ,SAEvCiI,EAAWpK,uBACf,SAAC0L,GAA8B,IACtBhH,EAAUgH,EAAMC,YAAYC,OAA5BlH,OACHqG,EAAY,GAEhB4B,EAAajI,KAEf,CAACqG,IAGGhL,EAAUC,uBAAY,WAC1BH,MACC,CAACA,IAEJ,OACE,cAAC,IAAD,CAAQmC,YAAajC,EAASI,MAAM,QAApC,SACI2F,EAGA,cAAC,EAAD,CACEtD,gBAAiBhD,EAAMiD,QACvB2H,SAAUA,EACVE,OAAQS,EAAY,EAHtB,SAIE,cAAC,EAAD,CACEjF,QAASA,EACTiD,cAAeA,EACfD,UAAWA,MATf,cAAC,IAAD,CAAM3I,MAAM,uBChCPyM,EAAWrN,gBAAK,WAC3B,IAAMC,EAAQC,cACRoN,EAAU3G,YAAgB4G,KAFe,EAGXtJ,mBAAS,GAHE,mBAGxCyH,EAHwC,KAG5BC,EAH4B,KAKzCd,EAAWpK,uBACf,SAAC0L,GAA8B,IACtBhH,EAAUgH,EAAMC,YAAYC,OAA5BlH,OACHuG,EAAa,GAEjBC,EAAcxG,KAEhB,CAACuG,IAGGrD,EAAYqD,EAAa,EAAqB,GAAjBlI,EAAOZ,QAE1C,OACE,cAAC,IAAD,CAAQhC,MAAM,WAAd,SACE,cAAC,EAAD,CACEqC,gBAAiBhD,EAAMiD,QACvB2H,SAAUA,EACVE,OAAQW,EAAa,EAHvB,SAIE,cAACxG,EAAA,EAAD,CAAMnC,MAAO,CAACH,QAASY,EAAOZ,SAA9B,SACG0K,EAAQvM,KAAI,SAACoF,GAAD,OACX,cAAC,EAAD,CAEEA,OAAQA,EACRqD,cAAenB,EACfxE,YAAY,gBACZjD,MAAM,YAJDuF,e,6ECvBbqH,EAAY,SAACC,GAAD,MAAsB,CACtCC,KAAKC,IAAL,MAAAD,KAAI,YAAQD,IACZC,KAAKE,IAAL,MAAAF,KAAI,YAAQD,MAGDI,GAAQ,SAAC,GAIiB,IAHrC/E,EAGoC,EAHpCA,KACAlF,EAEoC,EAFpCA,MACAuB,EACoC,EADpCA,OAEM2I,EAASC,cACZN,OAAOD,EAAU1E,EAAK/H,KAAI,SAACiN,GAAD,OAAOA,EAAE1O,UACnC2O,MAAM,CAAC,EAAGrK,IACPsK,EAASC,cACZV,OAAOD,EAAU1E,EAAK/H,KAAI,SAACiN,GAAD,OAAOA,EAAEjI,WACnCkI,MAAM,CAAC9I,EAhBIiJ,MAiBRJ,EAAIK,MAEPC,GAAE,SAAC7J,GAAD,OAAOqJ,EAAOrJ,EAAEnF,SAClBiP,GAAE,SAAC9J,GAAD,OAAOyJ,EAAOzJ,EAAEsB,UAClByI,MAAMH,IAJCA,CAIiBvF,GAC3B,OACE,cAAC5D,EAAA,EAAD,CAAMnC,MAAO,CAACa,QAAOuB,UAArB,SACE,eAAC,IAAD,CAAKpC,MAAO0L,IAAWC,aAAvB,UACE,cAAC,OAAD,UACE,eAAC,iBAAD,CAAgBhP,GAAG,WAAWiP,GAAG,MAAMC,GAAG,MAAMC,GAAG,KAAKC,GAAG,OAA3D,UACE,cAAC,OAAD,CAAM3E,OAAO,KAAK4E,UAAU,YAC5B,cAAC,OAAD,CAAM5E,OAAO,MAAM4E,UAAU,YAC7B,cAAC,OAAD,CAAM5E,OAAO,OAAO4E,UAAU,iBAGlC,cAAC,OAAD,CACEf,EAAC,UAAKA,EAAL,aAAWpK,EAAX,YAAoBuB,EAApB,gBAAkCA,GACnC6J,KAAK,mBAEP,cAAC,OAAD,aAAMA,KAAK,cAAcC,OAAO,WAAc,CAACjB,IAAGI,YArCtC,WCDdc,GAAQ,SAAC,GAAwB,IAAvBrN,EAAsB,EAAtBA,KACd,OACE,cAAC,IAAD,CACEyB,SAAS,OACTP,MAAO,CAACI,cAAeK,EAAOZ,SAC9BhC,MAAOiB,EACPuB,KAAK,QAKL0F,GAAO,CACX,CAACxJ,KAAM,IAAIC,KAAK,KAAM,EAAG,GAAG4P,UAAWpJ,MAAO,GAC9C,CAACzG,KAAM,IAAIC,KAAK,KAAM,EAAG,IAAI4P,UAAWpJ,MAAO,GAC/C,CAACzG,KAAM,IAAIC,KAAK,KAAM,EAAG,IAAI4P,UAAWpJ,MAAO,KAC/C,CAACzG,KAAM,IAAIC,KAAK,KAAM,GAAI,GAAG4P,UAAWpJ,MAAO,KAC/C,CAACzG,KAAM,IAAIC,KAAK,KAAM,GAAI,GAAG4P,UAAWpJ,MAAO,KAC/C,CAACzG,KAAM,IAAIC,KAAK,KAAM,GAAI,GAAG4P,UAAWpJ,MAAO,MAGpCqJ,GAAUpP,gBAAK,WAC1B,IAAMC,EAAQC,cAEd,OACE,cAAC,IAAD,CAAQU,MAAM,UAAd,SACE,eAAC8B,EAAA,EAAD,CACEC,sBAAuB,CACrBC,QAASC,IAAMD,QAAQE,IACvBG,gBAAiBhD,EAAMiD,SAEzBH,MAAO,CAACE,gBAAiBhD,EAAMiD,SALjC,UAME,cAAC,EAAD,UACE,eAACgC,EAAA,EAAD,WACE,cAAC,GAAD,CAAOrD,KAAK,YACZ,cAAC,IAAD,CAAMjB,MAAM,uEAGhB,cAAC,EAAD,UACE,eAACsE,EAAA,EAAD,WACE,cAAC,GAAD,CAAOrD,KAAK,UACZ,cAAC,IAAD,CAAMjB,MAAM,UACZ,cAAC,IAAD,CAAMA,MAAM,eACZ,cAAC,IAAD,CAAMA,MAAM,UACZ,cAAC,IAAD,CAAMA,MAAM,oBAGhB,cAAC,EAAD,UACE,eAACsE,EAAA,EAAD,WACE,cAAC,GAAD,CAAOrD,KAAK,sBACZ,cAACqD,EAAA,EAAD,CACEnC,MAAO,CAACC,KAAM,EAAGsC,eAAgB,SAAUE,WAAY,UADzD,SAEE,cAAC,GAAD,CACEsD,KAAMA,GACN3D,OAAQ,IACRvB,MAAOyL,IAAWC,IAAI,UAAU1L,MAAyB,EAAjBJ,EAAOZ,iBAKvD,cAAC,EAAD,UACE,eAACsC,EAAA,EAAD,WACE,cAAC,GAAD,CAAOrD,KAAK,sBACZ,cAAC,IAAD,iBC9DN0N,GAAmC,CAACC,aAAa,GACjDC,GAAUC,cACVC,GAAYC,cACZC,GAAgBD,cAOhBE,GAAqB,CACzBC,QAAS,CACPC,QAAS,sBACTC,UAAW,uBAEbjL,MAAO,CACLgL,QAAS,mCACTC,UAAW,oCAEbC,QAAS,CAACF,QAAS,UAAWC,UAAW,YAYrCE,GAAQ,WACZ,OACE,eAACN,GAAcO,UAAf,CAAyBC,cAAed,GAAxC,UACE,cAACM,GAAcS,OAAf,CAAsBC,UAAWlD,EAAUxL,KAAK,WAChD,cAACgO,GAAcS,OAAf,CAAsBC,UAAWtD,EAASpL,KAAK,cAK/C2O,GAAO,WACX,IAAMvQ,EAAQC,cACRuQ,EAAqC,CACzCC,qBAAqB,EACrBC,gBAAiB1Q,EAAMgG,QACvB2K,kBAAmB3Q,EAAM2M,KACzBiE,WAAW,GAEPR,EAAgB5P,uBACpB,gBAAEqQ,EAAF,EAAEA,MAAF,MAAkC,CAChCC,WAAY,YAAuD,IAAlCf,EAAiC,EAAjCA,QAASgB,EAAwB,EAAxBA,KAClChM,EAAQgL,EAAU,UAAY,YAC9BiB,EAAYjB,EAAU/P,EAAMgG,QAAUhG,EAAM2M,KAC5C/K,EAAQiO,GAAiBgB,EAAMjP,MAAMmD,GAC3C,OAAO,cAAC,IAAD,CAAM/E,MAAOgR,EAAWpP,KAAMA,EAAMmP,KAAMA,QAGrD,CAAC/Q,IAGH,OACE,eAACwP,GAAQW,UAAT,CACEC,cAAeA,EACfI,cAAeA,EAFjB,UAGE,cAAChB,GAAQa,OAAT,CAAgBC,UAAWnF,EAASvJ,KAAK,YACzC,cAAC4N,GAAQa,OAAT,CAAgBC,UAAWJ,GAAOtO,KAAK,UACvC,cAAC4N,GAAQa,OAAT,CAAgBC,UAAWnB,GAASvN,KAAK,gBAKhC7B,0BAAK,WAClB,IACMkR,EADOvK,aAAgB,SAACC,GAAD,OAAOA,EAAEuK,gBAClBX,GAAO/D,EAC3B,OACE,eAACkD,GAAUS,UAAX,CAAqBgB,KAAMC,IAAUhB,cAAeiB,IAApD,UACE,cAAC3B,GAAUW,OAAX,CAAkBC,UAAWW,EAAMrP,KAAK,SACxC,cAAC8N,GAAUW,OAAX,CAAkBC,UAAWxQ,EAAS8B,KAAK,YAC3C,cAAC8N,GAAUW,OAAX,CAAkBC,UAAWgB,IAAc1P,KAAK,iBAChD,cAAC8N,GAAUW,OAAX,CAAkBC,UAAWiB,IAAO3P,KAAK","file":"static/js/12.49a2aace.chunk.js","sourcesContent":["import {v4} from 'uuid';\nimport {Board, Item, List, User} from '../../models';\n\ntype GetDefaultUserTemplate = {\n  user: User;\n  boards: Board[];\n  lists: List[];\n  items: Item[];\n};\n\nconst date = Date.now();\nconst defaults = () => ({\n  id: v4(),\n  active: true,\n  createdAt: date,\n  updatedAt: date,\n});\n\nexport const getDefaultUserTemplate = (): GetDefaultUserTemplate => {\n  // inbox\n  const inboxItems: Item[] = [\n    {...defaults(), title: 'do dishes'},\n    {...defaults(), title: 'schedule meeting with Jim'},\n    {...defaults(), title: 'run 4 miles'},\n    {...defaults(), title: 'change oil'},\n    {...defaults(), title: 'what is the best mediation'},\n    {...defaults(), title: 'record Kelly birthday on Sep 22'},\n    {...defaults(), title: 'drink water'},\n    {...defaults(), title: 'intensity + focus = deep work'},\n    {...defaults(), title: 'put $20 in phone'},\n    {...defaults(), title: 'clear emails'},\n  ];\n  const inboxList: List = {\n    ...defaults(),\n    title: 'Inbox',\n    items: inboxItems.map((item) => item.id),\n  };\n  const inboxBoard: Board = {\n    ...defaults(),\n    title: 'Inbox',\n    lists: [inboxList.id],\n  };\n\n  // sub category\n  const homeItems: Item[] = [\n    {...defaults(), title: 'clean desk'},\n    {...defaults(), title: 'clean room'},\n    {...defaults(), title: 'walk dog'},\n    {...defaults(), title: 'brush teeth'},\n    {...defaults(), title: 'do laundry'},\n    {...defaults(), title: 'fix sink'},\n  ];\n  const homeLists: List[] = [\n    {...defaults(), title: 'Backlog', items: homeItems.map((item) => item.id)},\n    {...defaults(), title: 'Todo', items: []},\n    {...defaults(), title: 'In Progress', items: []},\n    {...defaults(), title: 'Done', items: []},\n  ];\n  const homeBoard: Board = {\n    ...defaults(),\n    title: 'Home',\n    lists: homeLists.map((item) => item.id),\n  };\n\n  // category\n  const projectItems: Item[] = [\n    {...defaults(), title: 'at home', board: homeBoard.id},\n    {...defaults(), title: 'at town'},\n    {...defaults(), title: 'at work'},\n    {...defaults(), title: 'at gym'},\n    {...defaults(), title: 'app release'},\n  ];\n  const projectsList: List = {\n    ...defaults(),\n    title: 'Projects',\n    items: projectItems.map((item) => item.id),\n  };\n  const listsItems: Item[] = [\n    {...defaults(), title: 'meeting notes'},\n    {...defaults(), title: 'book summaries'},\n    {...defaults(), title: 'gift ideas'},\n    {...defaults(), title: 'checklists'},\n    {...defaults(), title: 'code languages'},\n  ];\n  const listsList: List = {\n    ...defaults(),\n    title: 'Lists',\n    items: listsItems.map((item) => item.id),\n  };\n  const categoryBoard: Board = {\n    ...defaults(),\n    title: 'Categories',\n    lists: [projectsList.id, listsList.id],\n  };\n\n  // user\n  const user: User = {\n    ...defaults(),\n    name: 'Bob Smith',\n    boards: [inboxBoard.id, categoryBoard.id],\n  };\n\n  return {\n    user,\n    boards: [homeBoard, inboxBoard, categoryBoard],\n    lists: [inboxList, ...homeLists, projectsList, listsList],\n    items: [...inboxItems, ...homeItems, ...projectItems, ...listsItems],\n  };\n};\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback} from 'react';\nimport {ScrollView} from 'react-native';\nimport {Button, Card, Screen, Text} from '../../../../components';\nimport {useColor} from '../../../../hooks';\nimport {Theme, useRootDispatch} from '../../../../utils';\nimport {\n  createBoard,\n  createItem,\n  createList,\n  createUser,\n  removeUser,\n  setActiveUser,\n} from '../../models';\nimport {getDefaultUserTemplate} from './factory';\n\n// TODO: figure out a place for this\n// TODO: add reminders\n// TODO: add profile information\n// TODO: add payment\n\nexport const Account = memo(function Account() {\n  const color = useColor();\n  const dispatch = useRootDispatch();\n  const {goBack, navigate} = useNavigation();\n  const navBack = useCallback(() => goBack(), [goBack]);\n\n  const onLogin = useCallback(() => {\n    const {user, boards, lists, items} = getDefaultUserTemplate();\n    items.map((item) => dispatch(createItem(item)));\n    lists.map((list) => dispatch(createList(list)));\n    boards.map((board) => dispatch(createBoard(board)));\n    dispatch(createUser(user));\n  }, [dispatch]);\n  const onLogout = useCallback(() => {\n    dispatch(removeUser());\n    navigate('main');\n  }, [dispatch, navigate]);\n  const onSetActive = useCallback(() => {\n    dispatch(setActiveUser(true));\n  }, [dispatch]);\n\n  return (\n    <Screen onLeftPress={navBack} title=\"Account\">\n      <ScrollView\n        contentContainerStyle={{\n          padding: Theme.padding.p04,\n        }}\n        style={{flex: 1, backgroundColor: color.surface}}>\n        <Card>\n          <Text\n            style={{paddingBottom: Theme.padding.p04}}\n            title=\"Profile\"\n            type=\"h3\"\n          />\n          <Text\n            center\n            emphasis=\"medium\"\n            title=\"Break comfort barriers to be more creative, better at dealing with change, and better a improving the future\"\n            type=\"h4\"\n          />\n        </Card>\n        <Card>\n          <Text\n            style={{paddingBottom: Theme.padding.p04}}\n            title=\"Reminders\"\n            type=\"h3\"\n          />\n          <Text\n            center\n            emphasis=\"medium\"\n            title=\"Break comfort barriers to be more creative, better at dealing with change, and better a improving the future\"\n            type=\"h4\"\n          />\n        </Card>\n        <Card>\n          <Text\n            style={{paddingBottom: Theme.padding.p04}}\n            title=\"Payment\"\n            type=\"h3\"\n          />\n          <Text\n            center\n            emphasis=\"medium\"\n            title=\"Break comfort barriers to be more creative, better at dealing with change, and better a improving the future\"\n            type=\"h4\"\n          />\n        </Card>\n        <Button onPress={onLogin} title=\"login\" />\n        <Button onPress={onLogout} title=\"logout\" />\n        <Button onPress={onSetActive} title=\"set active\" />\n      </ScrollView>\n    </Screen>\n  );\n});\n","import {Theme} from '../../utils';\n\nexport const config = {\n  borderRadius: Theme.padding.p02,\n  padding: Theme.padding.p04,\n};\n","import React, {memo, useCallback, useRef, useState} from 'react';\nimport {TextInput as OriginalTextInput, View} from 'react-native';\nimport {Button, Icon, TextInput} from '../../../components';\nimport {useColor} from '../../../hooks';\nimport {Theme} from '../../../utils';\nimport {config} from '../configs';\n\ntype AddButtonProps = {\n  width?: number;\n  placeholder: string;\n  title: string;\n  onSubmit: (value: string) => void;\n};\n\nexport const AddButton = memo(function AddButton({\n  width,\n  placeholder,\n  title,\n  onSubmit,\n}: AddButtonProps) {\n  const color = useColor();\n  const textInputRef = useRef<OriginalTextInput | null>(null);\n  const [showInput, setShowInput] = useState(false);\n  const [itemTitle, setItemTitle] = useState('');\n  const onItemTitleChange = useCallback((v: string) => setItemTitle(v), []);\n  const onAddItemPress = useCallback(() => setShowInput((p) => !p), []);\n\n  const onItemTitleClose = useCallback(() => {\n    setShowInput(false);\n    setItemTitle('');\n  }, []);\n\n  const onItemTitleSubmit = useCallback(() => {\n    const formatted = itemTitle.trim();\n    if (formatted.length === 0) return;\n\n    setItemTitle('');\n    onSubmit(formatted);\n    textInputRef.current?.focus();\n  }, [itemTitle, onSubmit]);\n\n  const onBlur = useCallback(() => {\n    setShowInput(false);\n    setItemTitle('');\n  }, []);\n\n  return (\n    <View\n      style={{\n        width,\n        height: Theme.padding.p12,\n        borderRadius: config.borderRadius,\n        backgroundColor: color.background,\n        justifyContent: 'center',\n      }}>\n      {showInput ? (\n        <View style={{flexDirection: 'row', alignItems: 'center'}}>\n          <TextInput\n            blurOnSubmit={false}\n            emphasis=\"high\"\n            flex\n            focusOnLoad\n            onBlur={onBlur}\n            onChangeText={onItemTitleChange}\n            onRef={textInputRef}\n            onSubmitEditing={onItemTitleSubmit}\n            placeholder={placeholder}\n            returnKeyType=\"done\"\n            value={itemTitle}\n          />\n          <Icon name=\"close\" onPress={onItemTitleClose} padded />\n          <Icon\n            color={color.primary}\n            name=\"send\"\n            onPress={onItemTitleSubmit}\n            padded\n          />\n        </View>\n      ) : (\n        <Button center color=\"primary\" onPress={onAddItemPress} title={title} />\n      )}\n    </View>\n  );\n});\n","import React, {memo, useCallback} from 'react';\nimport {v4} from 'uuid';\nimport {useRootDispatch} from '../../../utils';\nimport {createItem, Item, updateListAddItem} from '../models';\nimport {AddButton} from './AddButton';\n\ntype AddItemProps = {\n  listId: string;\n  placeholder: string;\n  title: string;\n};\n\nexport const AddItem = memo(function AddItem({\n  placeholder,\n  title,\n  listId,\n}: AddItemProps) {\n  const dispatch = useRootDispatch();\n  const onSubmit = useCallback(\n    (value: string) => {\n      const itemId = v4();\n      const date = Date.now();\n      const item: Item = {\n        id: itemId,\n        active: true,\n        title: value,\n        createdAt: date,\n        updatedAt: date,\n      };\n      dispatch(createItem(item));\n      dispatch(updateListAddItem({listId, itemId}));\n    },\n    [dispatch, listId],\n  );\n\n  return (\n    <AddButton onSubmit={onSubmit} placeholder={placeholder} title={title} />\n  );\n});\n","import React, {memo, useCallback} from 'react';\nimport {v4} from 'uuid';\nimport {useRootDispatch} from '../../../utils';\nimport {createList, List, updateBoardAddList} from '../models';\nimport {AddButton} from './AddButton';\n\ntype AddListProps = {\n  boardId: string;\n  placeholder: string;\n  title: string;\n  width: number;\n};\n\nexport const AddList = memo(function AddList({\n  placeholder,\n  title,\n  boardId,\n  width,\n}: AddListProps) {\n  const dispatch = useRootDispatch();\n  const onSubmit = useCallback(\n    (value: string) => {\n      const listId = v4();\n      const date = Date.now();\n      const list: List = {\n        id: listId,\n        active: true,\n        title: value,\n        createdAt: date,\n        updatedAt: date,\n        items: [],\n      };\n      dispatch(createList(list));\n      dispatch(updateBoardAddList({boardId, listId}));\n    },\n    [boardId, dispatch],\n  );\n\n  return (\n    <AddButton\n      onSubmit={onSubmit}\n      placeholder={placeholder}\n      title={title}\n      width={width}\n    />\n  );\n});\n","import React, {memo, useCallback, useState} from 'react';\nimport {TextInput} from '../../../components';\nimport {useRootDispatch, useRootSelector} from '../../../utils';\nimport {updateListTitle} from '../models';\n\ntype ListHeaderInputProps = {\n  listId: string;\n};\n\nexport const ListHeaderInput = memo(function ListHeaderInput({\n  listId,\n}: ListHeaderInputProps) {\n  const dispatch = useRootDispatch();\n  const listTitle = useRootSelector((s) => s.completeList.items[listId].title);\n  const [title, setTitle] = useState(listTitle);\n  const onChangeText = useCallback((value: string) => {\n    setTitle(value);\n  }, []);\n\n  const onSave = useCallback(() => {\n    dispatch(updateListTitle({listId, title}));\n  }, [dispatch, listId, title]);\n\n  return (\n    <TextInput\n      emphasis=\"high\"\n      flex\n      onBlur={onSave}\n      onChangeText={onChangeText}\n      placeholder=\"list name...\"\n      returnKeyType=\"done\"\n      type=\"h4\"\n      value={title}\n    />\n  );\n});\n","import React, {memo} from 'react';\nimport {View} from 'react-native';\nimport {Icon} from '../../../components';\nimport {ListHeaderInput} from './ListHeaderInput';\n\ntype ListHeaderProps = {\n  listId: string;\n};\n\nexport const ListHeader = memo(function ListHeader({listId}: ListHeaderProps) {\n  return (\n    <View\n      style={{\n        flexDirection: 'row',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n      }}>\n      <ListHeaderInput listId={listId} />\n      <Icon name=\"dots-horizontal\" padded />\n    </View>\n  );\n});\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback, useState} from 'react';\nimport {Keyboard, View} from 'react-native';\nimport {Icon, TextInput, TouchableOpacity} from '../../../components';\nimport {useColor} from '../../../hooks';\nimport {useRootDispatch, useRootSelector} from '../../../utils';\nimport {config} from '../configs';\nimport {removeItem, setActiveBoard, updateListRemoveItem} from '../models';\n\ntype ListItemProps = {\n  itemId: string;\n  listId: string;\n};\n\nexport const ListItem = memo(function ListItem({\n  itemId,\n  listId,\n}: ListItemProps) {\n  const item = useRootSelector((s) => s.completeItem.items[itemId]);\n  const dispatch = useRootDispatch();\n  const {navigate} = useNavigation();\n  const color = useColor();\n  const [title, setTitle] = useState(item.title);\n  const [showControls, setShowControls] = useState(false);\n\n  const onTextChange = useCallback((value) => {\n    setTitle(value);\n  }, []);\n\n  const onItemTitleClose = useCallback(() => {\n    setTitle(item.title);\n    Keyboard.dismiss();\n  }, [item.title]);\n  const onItemTitleSubmit = useCallback(() => {\n    Keyboard.dismiss();\n  }, []);\n\n  const onFocus = useCallback(() => setShowControls(true), []);\n  const onBlur = useCallback(() => setShowControls(false), []);\n\n  const onItemNav = useCallback(() => {\n    if (!item.board)\n      throw new Error('item does not have a board to navigate to');\n\n    dispatch(setActiveBoard(item.board));\n    navigate('board');\n  }, [dispatch, item.board, navigate]);\n\n  const onItemDelete = useCallback(() => {\n    dispatch(removeItem(itemId));\n    dispatch(updateListRemoveItem({listId, itemId}));\n  }, [dispatch, itemId, listId]);\n  const onItemDetails = useCallback(() => undefined, []);\n  const onItemLongPress = useCallback(() => undefined, []);\n\n  return (\n    <TouchableOpacity\n      key={item.id}\n      onLongPress={onItemLongPress}\n      style={{\n        flex: 1,\n        borderRadius: config.borderRadius,\n        margin: config.padding / 2,\n        backgroundColor: color.surface,\n        flexDirection: 'row',\n      }}>\n      <TextInput\n        backgroundColor={color.surface}\n        flex\n        onBlur={onBlur}\n        onChangeText={onTextChange}\n        onFocus={onFocus}\n        onSubmitEditing={onItemTitleSubmit}\n        placeholder=\"Item name...\"\n        returnKeyType=\"done\"\n        value={title}\n      />\n      {showControls ? (\n        <View style={{flexDirection: 'row', alignItems: 'center'}}>\n          <Icon name=\"close\" onPress={onItemTitleClose} padded />\n          <Icon\n            color={color.primary}\n            name=\"send\"\n            onPress={onItemTitleSubmit}\n            padded\n          />\n        </View>\n      ) : (\n        <View style={{flexDirection: 'row', alignItems: 'center'}}>\n          <Icon name=\"trash-can-outline\" onPress={onItemDelete} padded />\n          <Icon name=\"dots-horizontal\" onPress={onItemDetails} padded />\n          {item.board && (\n            <Icon name=\"chevron-right\" onPress={onItemNav} padded />\n          )}\n        </View>\n      )}\n    </TouchableOpacity>\n  );\n});\n","import React, {memo, useCallback, useRef} from 'react';\nimport {FlatList, ListRenderItem} from 'react-native';\nimport {useRootSelector} from '../../../utils';\nimport {ListItem} from './ListItem';\n\ntype ListItemsProps = {\n  listId: string;\n  maxHeight?: number;\n};\n\nexport const ListItems = memo(function ListItems({\n  listId,\n  maxHeight,\n}: ListItemsProps) {\n  const listItems = useRootSelector((s) => s.completeList.items[listId].items);\n  const cardsRef = useRef<FlatList | null>(null);\n  const cardsLength = useRef(listItems.length);\n\n  const onKeyExtractor = useCallback((item) => item, []);\n\n  const onCardSizeChange = useCallback(() => {\n    if (listItems.length > cardsLength.current) {\n      cardsRef.current?.scrollToEnd();\n      cardsLength.current = listItems.length;\n    }\n  }, [listItems.length]);\n\n  const onRenderItem: ListRenderItem<string> = useCallback(\n    ({item}) => {\n      return <ListItem itemId={item} key={item} listId={listId} />;\n    },\n    [listId],\n  );\n\n  return (\n    <FlatList\n      data={listItems}\n      keyExtractor={onKeyExtractor}\n      keyboardShouldPersistTaps=\"handled\"\n      onContentSizeChange={onCardSizeChange}\n      ref={cardsRef}\n      renderItem={onRenderItem}\n      showsVerticalScrollIndicator={false}\n      style={{maxHeight}}\n    />\n  );\n});\n","import React, {memo} from 'react';\nimport {View} from 'react-native';\nimport {useColor} from '../../../hooks';\nimport {config} from '../configs';\nimport {AddItem} from './AddItem';\nimport {ListHeader} from './ListHeader';\nimport {ListItems} from './ListItems';\n\ntype ListProps = {\n  listWidth?: number;\n  listId: string;\n  listMaxHeight: number;\n  orientation?: 'vertical' | 'horizontal';\n  title: string;\n  placeholder: string;\n};\n\nexport const List = memo(function List({\n  listId,\n  orientation,\n  listWidth,\n  listMaxHeight,\n  title,\n  placeholder,\n}: ListProps) {\n  const color = useColor();\n  const padding = config.padding;\n  const borderRadius = config.borderRadius;\n  const horizontal = orientation === 'horizontal';\n  return (\n    <View>\n      <View\n        style={{\n          borderRadius,\n          width: listWidth,\n          backgroundColor: color.background,\n          padding: padding / 2,\n          marginRight: horizontal ? padding : 0,\n          marginBottom: horizontal ? 0 : padding,\n        }}>\n        <ListHeader listId={listId} />\n        <ListItems listId={listId} maxHeight={listMaxHeight} />\n        <AddItem listId={listId} placeholder={placeholder} title={title} />\n      </View>\n    </View>\n  );\n});\n","import React, {memo, useCallback} from 'react';\nimport {FlatList} from 'react-native';\nimport {useRootSelector} from '../../../utils';\nimport {config} from '../configs';\nimport {AddList} from './AddList';\nimport {List} from './List';\n\ntype BoardProps = {\n  boardId: string;\n  listMaxHeight: number;\n  listWidth: number;\n};\n\nexport const Board = memo(function Board({\n  boardId,\n  listMaxHeight,\n  listWidth,\n}: BoardProps) {\n  const listSize = listWidth + config.padding;\n  const board = useRootSelector((s) => s.completeBoard.items[boardId]);\n  const getItemId = useCallback((item) => item, []);\n\n  const getItemLayout = useCallback(\n    (_, index) => ({\n      length: listSize,\n      offset: listSize * index,\n      index,\n    }),\n    [listSize],\n  );\n\n  const renderAddList = useCallback(() => {\n    return (\n      <AddList\n        boardId={boardId}\n        placeholder=\"List title...\"\n        title=\"Add list\"\n        width={listWidth}\n      />\n    );\n  }, [boardId, listWidth]);\n\n  const renderList = useCallback(\n    ({item}) => {\n      return (\n        <List\n          key={item}\n          listId={item}\n          listMaxHeight={listMaxHeight}\n          listWidth={listWidth}\n          orientation=\"horizontal\"\n          placeholder=\"List title...\"\n          title=\"Add list\"\n        />\n      );\n    },\n    [listMaxHeight, listWidth],\n  );\n\n  return (\n    <FlatList\n      ListFooterComponent={renderAddList}\n      contentContainerStyle={{padding: config.padding}}\n      data={board.lists}\n      decelerationRate=\"fast\"\n      getItemLayout={getItemLayout}\n      horizontal\n      keyExtractor={getItemId}\n      keyboardShouldPersistTaps=\"handled\"\n      renderItem={renderList}\n      showsHorizontalScrollIndicator={false}\n      snapToAlignment=\"center\"\n      snapToInterval={listSize}\n    />\n  );\n});\n","import React, {memo, ReactElement} from 'react';\nimport {LayoutChangeEvent, View} from 'react-native';\nimport {useColor} from '../../../hooks';\nimport {config} from '../configs';\n\ntype CardProps = {\n  onLayout?: (event: LayoutChangeEvent) => void;\n  children: ReactElement | ReactElement[];\n};\n\nexport const Card = memo(function Card({children, onLayout}: CardProps) {\n  const color = useColor();\n  return (\n    <View\n      onLayout={onLayout}\n      style={{\n        borderRadius: config.borderRadius,\n        backgroundColor: color.background,\n        padding: config.padding / 2,\n        marginBottom: config.padding,\n      }}>\n      {children}\n    </View>\n  );\n});\n","import React, {memo, ReactElement, useCallback} from 'react';\nimport {\n  Keyboard,\n  LayoutChangeEvent,\n  TouchableWithoutFeedback,\n  View,\n} from 'react-native';\n\ntype HandleKeyboardProps = {\n  onLayout: (event: LayoutChangeEvent) => void;\n  render: boolean;\n  backgroundColor: string;\n  children: ReactElement | ReactElement[];\n};\n\nexport const HandleKeyboard = memo(function HandleKeyboard({\n  onLayout,\n  render,\n  backgroundColor,\n  children,\n}: HandleKeyboardProps) {\n  const onDismissKeyboard = useCallback(() => Keyboard.dismiss(), []);\n  return (\n    <TouchableWithoutFeedback\n      onLayout={onLayout}\n      onPress={onDismissKeyboard}\n      style={{flex: 1}}>\n      <View style={{flex: 1, backgroundColor}}>{render ? children : null}</View>\n    </TouchableWithoutFeedback>\n  );\n});\n","import React, {memo} from 'react';\nimport {LayoutChangeEvent} from 'react-native';\nimport {Button} from '../../../components';\nimport {useRootSelector} from '../../../utils';\nimport {Card} from '../components/Card';\n\ntype OrganizeButtonProps = {\n  listId: string;\n  onPress: () => void;\n  onLayout: (event: LayoutChangeEvent) => void;\n};\n\nexport const OrganizeButton = memo(function OrganizeButton({\n  listId,\n  onPress,\n  onLayout,\n}: OrganizeButtonProps) {\n  const listItems = useRootSelector(\n    (s) => s.completeList.items[listId].items.length,\n  );\n  return (\n    <Card onLayout={onLayout}>\n      <Button\n        center\n        color=\"primary\"\n        disable={listItems === 0}\n        onPress={onPress}\n        title=\"Organize\"\n      />\n    </Card>\n  );\n});\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback, useState} from 'react';\nimport {LayoutChangeEvent, Platform, View} from 'react-native';\nimport {Screen, Text} from '../../../../components';\nimport {useColor} from '../../../../hooks';\nimport {useRootSelector} from '../../../../utils';\nimport {HandleKeyboard, List, OrganizeButton} from '../../components';\nimport {config} from '../../configs';\nimport {getInboxListId} from '../../models';\n\nexport const Capture = memo(function Capture() {\n  const color = useColor();\n  const {navigate} = useNavigation();\n  const navBack = useCallback(() => navigate('admin'), [navigate]);\n  const keyboardHeight = useRootSelector(\n    (state) => state.device.keyboardHeight,\n  );\n  const [dimensions, setDimensions] = useState({container: 0, button: 0});\n  const android = Platform.OS === 'android';\n\n  const listHeight =\n    keyboardHeight === 0\n      ? dimensions.container -\n        dimensions.button -\n        (android ? config.padding * 8 : config.padding * 13)\n      : dimensions.container -\n        keyboardHeight -\n        (android ? config.padding * 3 : config.padding * 7);\n\n  const listId = useRootSelector(getInboxListId);\n\n  const onOrganize = useCallback(() => undefined, []);\n\n  const onLayout = useCallback(\n    (key: string) => (event: LayoutChangeEvent) => {\n      const {height} = event.nativeEvent.layout;\n      const preventMultipleUpdates =\n        key === 'container' && dimensions.container > 0;\n      if (preventMultipleUpdates) return;\n\n      setDimensions((p) => ({...p, [key]: height}));\n    },\n    [dimensions.container],\n  );\n\n  const navToAccount = useCallback(() => navigate('account'), [navigate]);\n\n  return (\n    <Screen\n      onLeftPress={navBack}\n      onRightPress={navToAccount}\n      rightIcon=\"account\"\n      title=\"Capture\">\n      <HandleKeyboard\n        backgroundColor={color.surface}\n        onLayout={onLayout('container')}\n        render={dimensions.container > 0}>\n        {listId ? (\n          <View style={{padding: config.padding}}>\n            <List\n              listId={listId}\n              listMaxHeight={listHeight}\n              placeholder=\"Item title...\"\n              title=\"Add item\"\n            />\n            <OrganizeButton\n              listId={listId}\n              onLayout={onLayout('button')}\n              onPress={onOrganize}\n            />\n          </View>\n        ) : (\n          <Text title=\"missing account\" />\n        )}\n      </HandleKeyboard>\n    </Screen>\n  );\n});\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback} from 'react';\nimport {Button, Carousel, Screen} from '../../../../components';\nimport {Slide} from '../../../../components/Carousel/types';\nimport {useColor} from '../../../../hooks';\n\nexport const Landing = memo(function Landing() {\n  const {navigate} = useNavigation();\n  const color = useColor();\n  const navPortfolioLogin = useCallback(() => navigate('account'), [navigate]);\n\n  const slides: Slide[] = [\n    {id: '1', text: 'hello', color: color.info},\n    {id: '2', text: 'bob', color: color.warning},\n    {id: '3', text: 'steve', color: color.success},\n    {id: '4', text: 'jill', color: color.brand},\n  ];\n\n  return (\n    <Screen title=\"Landing\">\n      <Carousel slides={slides} />\n      <Button center onPress={navPortfolioLogin} title=\"Login\" />\n    </Screen>\n  );\n});\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback, useState} from 'react';\nimport {LayoutChangeEvent, Platform} from 'react-native';\nimport {Screen, Text} from '../../../../components';\nimport {useColor} from '../../../../hooks';\nimport {getSmallestDimension} from '../../../../models';\nimport {useRootSelector} from '../../../../utils';\nimport {Board, HandleKeyboard} from '../../components';\nimport {config} from '../../configs';\n\n// TODO: figure out centering of list\n\nexport const Project = memo(function Project() {\n  const {goBack} = useNavigation();\n  const color = useColor();\n  const screenWidth = useRootSelector(getSmallestDimension);\n  const boardId = useRootSelector((s) => s.completeBoard.active);\n  const listWidth = screenWidth * 0.7;\n  const [container, setContainer] = useState(0);\n  const android = Platform.OS === 'android';\n  const keyboardHeight = useRootSelector(\n    (state) => state.device.keyboardHeight,\n  );\n\n  const listMaxHeight =\n    keyboardHeight === 0\n      ? container - (android ? config.padding * 8 : config.padding * 12)\n      : container -\n        keyboardHeight -\n        (android ? config.padding * 3 : config.padding * 7);\n\n  const onLayout = useCallback(\n    (event: LayoutChangeEvent) => {\n      const {height} = event.nativeEvent.layout;\n      if (container > 0) return;\n\n      setContainer(height);\n    },\n    [container],\n  );\n\n  const navBack = useCallback(() => {\n    goBack();\n  }, [goBack]);\n\n  return (\n    <Screen onLeftPress={navBack} title=\"Focus\">\n      {!boardId ? (\n        <Text title=\"missing board\" />\n      ) : (\n        <HandleKeyboard\n          backgroundColor={color.surface}\n          onLayout={onLayout}\n          render={container > 0}>\n          <Board\n            boardId={boardId}\n            listMaxHeight={listMaxHeight}\n            listWidth={listWidth}\n          />\n        </HandleKeyboard>\n      )}\n    </Screen>\n  );\n});\n","import React, {memo, useCallback, useState} from 'react';\nimport {LayoutChangeEvent, View} from 'react-native';\nimport {Screen} from '../../../../components';\nimport {useColor} from '../../../../hooks';\nimport {useRootSelector} from '../../../../utils';\nimport {HandleKeyboard, List} from '../../components';\nimport {config} from '../../configs';\nimport {getCategoryListIds} from '../../models';\n\n// TODO: add journal\n// TODO: add historical data\n// TODO: add purpose\n// TODO: add goals\n\n// TODO: render as <Board />\n\nexport const Projects = memo(function Projects() {\n  const color = useColor();\n  const listIds = useRootSelector(getCategoryListIds);\n  const [dimensions, setDimensions] = useState(0);\n\n  const onLayout = useCallback(\n    (event: LayoutChangeEvent) => {\n      const {height} = event.nativeEvent.layout;\n      if (dimensions > 0) return;\n\n      setDimensions(height);\n    },\n    [dimensions],\n  );\n\n  const maxHeight = dimensions / 2 - config.padding * 10;\n\n  return (\n    <Screen title=\"Projects\">\n      <HandleKeyboard\n        backgroundColor={color.surface}\n        onLayout={onLayout}\n        render={dimensions > 0}>\n        <View style={{padding: config.padding}}>\n          {listIds.map((listId) => (\n            <List\n              key={listId}\n              listId={listId}\n              listMaxHeight={maxHeight}\n              placeholder=\"List title...\"\n              title=\"Add list\"\n            />\n          ))}\n        </View>\n      </HandleKeyboard>\n    </Screen>\n  );\n});\n","import {scaleLinear, scaleTime} from 'd3-scale';\nimport * as shape from 'd3-shape';\nimport * as React from 'react';\nimport {StyleSheet, View} from 'react-native';\nimport Svg, {Defs, LinearGradient, Path, Stop} from 'react-native-svg';\n\ninterface DataPoint {\n  date: number;\n  value: number;\n}\n\ninterface GraphProps {\n  data: DataPoint[];\n  width: number;\n  height: number;\n}\n\nconst strokeWidth = 4;\nconst padding = strokeWidth / 2;\nconst getDomain = (domain: number[]) => [\n  Math.min(...domain),\n  Math.max(...domain),\n];\n\nexport const Graph = ({\n  data,\n  width,\n  height,\n}: GraphProps): React.ReactElement => {\n  const scaleX = scaleTime()\n    .domain(getDomain(data.map((d) => d.date)))\n    .range([0, width]);\n  const scaleY = scaleLinear()\n    .domain(getDomain(data.map((d) => d.value)))\n    .range([height - padding, padding]);\n  const d = shape\n    .line<DataPoint>()\n    .x((p) => scaleX(p.date))\n    .y((p) => scaleY(p.value))\n    .curve(shape.curveBasis)(data) as string;\n  return (\n    <View style={{width, height}}>\n      <Svg style={StyleSheet.absoluteFill}>\n        <Defs>\n          <LinearGradient id=\"gradient\" x1=\"50%\" x2=\"50%\" y1=\"0%\" y2=\"100%\">\n            <Stop offset=\"0%\" stopColor=\"#cee3f9\" />\n            <Stop offset=\"80%\" stopColor=\"#ddedfa\" />\n            <Stop offset=\"100%\" stopColor=\"#feffff\" />\n          </LinearGradient>\n        </Defs>\n        <Path\n          d={`${d}L ${width} ${height} L 0 ${height}`}\n          fill=\"url(#gradient)\"\n        />\n        <Path fill=\"transparent\" stroke=\"#3977e3\" {...{d, strokeWidth}} />\n      </Svg>\n    </View>\n  );\n};\n","import React, {memo} from 'react';\nimport {Dimensions, ScrollView, View} from 'react-native';\nimport {Calendar, Screen, Text} from '../../../../components';\nimport {useColor} from '../../../../hooks';\nimport {Theme} from '../../../../utils';\nimport {Card} from '../../components/Card';\nimport {config} from '../../configs';\nimport {Graph} from './Graph';\n\n// TODO: add journal\n// TODO: add historical data\n// TODO: add purpose\n// TODO: add goals\n\ntype TitleProps = {name: string};\n\nconst Title = ({name}: TitleProps) => {\n  return (\n    <Text\n      emphasis=\"high\"\n      style={{paddingBottom: config.padding}}\n      title={name}\n      type=\"h4\"\n    />\n  );\n};\n\nconst data = [\n  {date: new Date(2018, 9, 1).getTime(), value: 0},\n  {date: new Date(2018, 9, 16).getTime(), value: 0},\n  {date: new Date(2018, 9, 17).getTime(), value: 200},\n  {date: new Date(2018, 10, 1).getTime(), value: 200},\n  {date: new Date(2018, 10, 2).getTime(), value: 300},\n  {date: new Date(2018, 10, 5).getTime(), value: 300},\n];\n\nexport const Reflect = memo(function Reflect() {\n  const color = useColor();\n\n  return (\n    <Screen title=\"Reflect\">\n      <ScrollView\n        contentContainerStyle={{\n          padding: Theme.padding.p04,\n          backgroundColor: color.surface,\n        }}\n        style={{backgroundColor: color.surface}}>\n        <Card>\n          <View>\n            <Title name=\"Purpose\" />\n            <Text title=\"Make a significant positive difference in global productivity\" />\n          </View>\n        </Card>\n        <Card>\n          <View>\n            <Title name=\"Goals\" />\n            <Text title=\"Top 3\" />\n            <Text title=\"Deep Focus\" />\n            <Text title=\"Smile\" />\n            <Text title=\"1 More Rep\" />\n          </View>\n        </Card>\n        <Card>\n          <View>\n            <Title name=\"Review (Progress)\" />\n            <View\n              style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>\n              <Graph\n                data={data}\n                height={200}\n                width={Dimensions.get('window').width - config.padding * 4}\n              />\n            </View>\n          </View>\n        </Card>\n        <Card>\n          <View>\n            <Title name=\"Reflect (Journal)\" />\n            <Calendar />\n          </View>\n        </Card>\n      </ScrollView>\n    </Screen>\n  );\n});\n","import {\n  BottomTabBarOptions,\n  createBottomTabNavigator,\n} from '@react-navigation/bottom-tabs';\nimport {Route} from '@react-navigation/native';\nimport {\n  createStackNavigator,\n  StackNavigationOptions,\n} from '@react-navigation/stack';\nimport React, {memo, useCallback} from 'react';\nimport {Alert, Icon, Notification} from '../../components';\nimport {useColor} from '../../hooks';\nimport {rootMode, rootScreenOptions} from '../../providers/Navigation/configs';\nimport {useRootSelector} from '../../utils';\nimport {Account, Capture, Landing, Project, Projects, Reflect} from './screens';\n\nconst noHeader: StackNavigationOptions = {headerShown: false};\nconst RootTab = createBottomTabNavigator();\nconst RootStack = createStackNavigator();\nconst ProjectsStack = createStackNavigator();\n\ntype Tabs = 'capture' | 'focus' | 'reflect';\ntype TabIcons = {\n  [key in Tabs]: {focused: string; unfocused: string};\n};\n\nconst tabIcons: TabIcons = {\n  capture: {\n    focused: 'pencil-plus-outline',\n    unfocused: 'pencil-plus-outline',\n  },\n  focus: {\n    focused: 'checkbox-multiple-marked-outline',\n    unfocused: 'checkbox-multiple-marked-outline',\n  },\n  reflect: {focused: 'finance', unfocused: 'finance'},\n};\n\ntype ScreenOptionsProps = {\n  route: Route<string, Record<string, unknown> | undefined>;\n};\n\ntype TabBarIconProps = {\n  focused: boolean;\n  size: number;\n};\n\nconst Focus = () => {\n  return (\n    <ProjectsStack.Navigator screenOptions={noHeader}>\n      <ProjectsStack.Screen component={Projects} name=\"boards\" />\n      <ProjectsStack.Screen component={Project} name=\"board\" />\n    </ProjectsStack.Navigator>\n  );\n};\n\nconst Tabs = () => {\n  const color = useColor();\n  const tabBarOptions: BottomTabBarOptions = {\n    keyboardHidesTabBar: true,\n    activeTintColor: color.primary,\n    inactiveTintColor: color.text,\n    showLabel: false,\n  };\n  const screenOptions = useCallback(\n    ({route}: ScreenOptionsProps) => ({\n      tabBarIcon: function tabBarIcon({focused, size}: TabBarIconProps) {\n        const focus = focused ? 'focused' : 'unfocused';\n        const iconColor = focused ? color.primary : color.text;\n        const name = (tabIcons as any)[route.name][focus];\n        return <Icon color={iconColor} name={name} size={size} />;\n      },\n    }),\n    [color],\n  );\n\n  return (\n    <RootTab.Navigator\n      screenOptions={screenOptions as any}\n      tabBarOptions={tabBarOptions}>\n      <RootTab.Screen component={Capture} name=\"capture\" />\n      <RootTab.Screen component={Focus} name=\"focus\" />\n      <RootTab.Screen component={Reflect} name=\"reflect\" />\n    </RootTab.Navigator>\n  );\n};\n\nexport default memo(function Complete() {\n  const user = useRootSelector((s) => s.completeUser);\n  const Main = user ? Tabs : Landing;\n  return (\n    <RootStack.Navigator mode={rootMode} screenOptions={rootScreenOptions}>\n      <RootStack.Screen component={Main} name=\"main\" />\n      <RootStack.Screen component={Account} name=\"account\" />\n      <RootStack.Screen component={Notification} name=\"notification\" />\n      <RootStack.Screen component={Alert} name=\"alert\" />\n    </RootStack.Navigator>\n  );\n});\n\n/*\n\n# Data\n\n- user\n-> collections [projects, lists]\n-> boards [home, work, town] | [meeting notes, book summaries, checklists]\n-> lists [backlog, todo, in progress, done] | [draft, final]\n-> item [find comb, clear emails, daily standup]\n\n# Screens\n\n## Capture\n\n### Inbox (list -> item -> details)\n- \"add grey list\" -> @app\n- \"find comb\" -> @home\n- \"clear emails\" -> @work\n- \"put $20 in phone\" -> @town\n- \"drink water\" -> @after-waking-up\n- \"intensity + focus = deep work\" -> book summaries\n\n## Organize\n\n### Projects (item -> lists -> item -> details )\n- @home -> (backlog, todo, in progress, done xx, done xx)\n- @town\n- @work\n- @gym\n- @app\n\n### Lists (item -> list -> item -> detail)\n- meeting notes\n - one-on-one\n - daily standup\n- book summaries\n - the one thing\n - getting things done\n - eat that frog\n- gift ideas\n - mom\n - dad\n - girlfriend\n- checklists\n - after waking up\n - after entering bathroom\n\n## Reflect\n\n### Purpose\n\n### Goals\n\n### Review (Progress)\n\n### Reflect (Journal)\n\n## Account\n\n### Profile\n\n### Notifications\n\n### Payment\n*/\n"],"sourceRoot":""}