{"version":3,"sources":["apps/Playground/SlotMachine/utils.ts","apps/Playground/SlotMachine/config.ts","apps/Playground/SlotMachine/SlotMachine.tsx","apps/Playground/SlotMachine/index.tsx"],"names":["getWinsPerCombination","combinations","reels","output","i","length","freq","j","element","reel","sum","getSumOfReel","Object","values","reduce","item","getSumOfReels","total","getSumOfCombinations","combination","getRandomReelArrays","arrays","array","keys","key","amount","k","push","shuffleArray","a","copy","swap","temp","Math","floor","random","any","SlotMachine","memo","multipliers","randomize","credits","color","useColor","useState","activity","reelsArray","map","multiplierIndex","lineIndexes","getInitialState","state","setState","multiplier","disable","wildCards","useMemo","line","sort","b","getWildCards","creditError","onSpin","useCallback","remainingCredits","p","winningLine","lineIndex","getWinningLine","winningAmount","wildCard","includes","getWinningAmount","setTimeout","console","log","onMultiplier","nextIndex","View","style","flexDirection","borderWidth","borderColor","primary","background","title","disabled","onPress","justifyContent","alignItems","bold","emphasis","name","center","padding","Theme","p02","type","winPercentage","sumOfReels","winsPerCombination","getWinPercentage","toFixed","returnPercentage","returnsPerCombination","index","payout","getReturnsPerCombination","getReturnPercentage","nav","useNav","tokens","spinning","active","styles","StyleSheet","create","container","backgroundColor","navBack","onLeftPress","flex"],"mappings":"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","file":"static/js/46.13617830.chunk.js","sourcesContent":["import {Combinations, Element, Reel, Reels} from './config';\n\nconst getWinsPerCombination = (\n  combinations: Combinations,\n  reels: Reels,\n): Combinations => {\n  const output = [...combinations];\n  for (let i = 0; i < combinations.length; i++) {\n    let freq = 1;\n    output[i] = [...combinations[i]];\n    for (let j = 0; j < reels.length; j++) {\n      const element = output[i][j];\n      const reel = reels[j];\n      const sum = getSumOfReel(reel);\n      freq *=\n        element !== 'any' && typeof element !== 'number' ? reel[element] : sum;\n    }\n    output[i][3] = freq;\n  }\n  return output;\n};\n\nconst getSumOfReel = (reel: Reel): number => {\n  return Object.values(reel).reduce((sum, item) => sum + item, 0);\n};\n\nconst getSumOfReels = (reels: Reels): number => {\n  return reels.reduce((total, reel) => total * getSumOfReel(reel), 1);\n};\n\nconst getReturnsPerCombination = (\n  combinations: Combinations,\n  winsPerCombination: Combinations,\n): Combinations => {\n  return winsPerCombination.reduce(\n    (output: Combinations, combination, index) => {\n      const payout = combinations[index][3];\n      output[index][3] = combination[3] * payout;\n      return output;\n    },\n    [...winsPerCombination],\n  );\n};\n\nconst getSumOfCombinations = (combinations: Combinations): number => {\n  return combinations.reduce((total, combination) => total + combination[3], 0);\n};\n\nexport const getWinPercentage = (\n  combinations: Combinations,\n  reels: Reels,\n): number => {\n  const sumOfReels = getSumOfReels(reels);\n  const winsPerCombination = getWinsPerCombination(combinations, reels);\n  const sumOfWins = getSumOfCombinations(winsPerCombination);\n  return sumOfWins / sumOfReels;\n};\n\nexport const getReturnPercentage = (\n  combinations: Combinations,\n  reels: Reels,\n): number => {\n  const sumOfReels = getSumOfReels(reels);\n  const winsPerCombination = getWinsPerCombination(combinations, reels);\n  const returnsPerCombination = getReturnsPerCombination(\n    combinations,\n    winsPerCombination,\n  );\n  const sumOfReturns = getSumOfCombinations(returnsPerCombination);\n  return sumOfReturns / sumOfReels;\n};\n\nexport const getRandomReelArrays = (reels: Reels): Element[][] => {\n  const arrays: Element[][] = [];\n  for (let i = 0; i < reels.length; i++) {\n    const array: Element[] = [];\n    const reel = reels[i];\n    const keys = Object.keys(reel);\n    for (let j = 0; j < keys.length; j++) {\n      const key = keys[j] as Element;\n      const amount = reel[key];\n      for (let k = 0; k < amount; k++) {\n        array.push(key);\n      }\n    }\n    arrays.push(array);\n  }\n  for (let i = 0; i < arrays.length; i++) {\n    arrays[i] = shuffleArray(arrays[i]);\n  }\n\n  return arrays;\n};\n\nexport const shuffleArray = <T>(array: T[]): T[] => {\n  const copy = [...array];\n  const swap = (a: T[], i: number, j: number) => {\n    const temp = a[i];\n    a[i] = a[j];\n    a[j] = temp;\n  };\n  const randomIndex = (a: T[]) => Math.floor(Math.random() * a.length);\n  for (let i = 0; i < copy.length; i++) {\n    const j = randomIndex(copy);\n    swap(copy, i, j);\n  }\n  return copy;\n};\n","export type Element =\n  | '🍓'\n  | '🍇'\n  | '🍉'\n  | '🥭'\n  | '🍏'\n  | '🍊'\n  | '🍒'\n  | '🍋'\n  | 'any';\ntype Combination = [Element, Element, Element, number];\nexport type Combinations = Combination[];\n\nexport const combinations: Combinations = [\n  ['🍓', '🍓', '🍓', 200],\n  ['🍇', '🍇', '🍇', 100],\n  ['🍉', '🍉', '🍉', 100],\n  ['🍉', '🍉', '🍇', 100],\n  ['🥭', '🥭', '🥭', 18],\n  ['🥭', '🥭', '🍇', 18],\n  ['🍏', '🍏', '🍏', 14],\n  ['🍏', '🍏', '🍇', 14],\n  ['🍊', '🍊', '🍊', 10],\n  ['🍊', '🍊', '🍇', 10],\n  ['🍒', '🍒', '🍒', 8],\n  ['🍒', '🍒', 'any', 5],\n  ['🍒', 'any', 'any', 2],\n];\n\nexport type Reel = {[key in Element]: number};\nexport type Reels = [Reel, Reel, Reel];\n\nexport const reels: Reels = [\n  {\n    '🍓': 1,\n    '🍇': 1,\n    '🍉': 2,\n    '🥭': 5,\n    '🍏': 5,\n    '🍊': 5,\n    '🍒': 4,\n    '🍋': 2,\n    any: 0,\n  },\n  {\n    '🍓': 1,\n    '🍇': 2,\n    '🍉': 2,\n    '🥭': 3,\n    '🍏': 3,\n    '🍊': 5,\n    '🍒': 7,\n    '🍋': 2,\n    any: 0,\n  },\n  {\n    '🍓': 1,\n    '🍇': 1,\n    '🍉': 2,\n    '🥭': 4,\n    '🍏': 2,\n    '🍊': 5,\n    '🍒': 5,\n    '🍋': 5,\n    any: 0,\n  },\n];\n","import React, {memo, useCallback, useMemo, useState} from 'react';\nimport {View} from 'react-native';\nimport {Button, Icon, Text, TouchableOpacity} from '../../../components';\nimport {useColor} from '../../../hooks';\nimport {Theme} from '../../../utils';\nimport {shuffleArray} from './utils';\n\ntype Combinations = {[key: string]: number};\ntype WildCards = {line: string; amount: number}[];\ntype Props = {\n  reels: string[];\n  combinations: Combinations;\n  credits: number;\n  multipliers?: number[];\n  startingPositions?: number[];\n  randomize?: boolean;\n  debug?: boolean;\n};\n\ntype State = {\n  activity: 'idle' | 'spinning' | 'insufficient credits';\n  credits: number;\n  reelsArray: string[][];\n  multiplierIndex: number;\n  lineIndexes: number[];\n};\n\ntype InitialState = {\n  randomize?: boolean;\n  reels: string[];\n  credits: number;\n};\n\nconst getInitialState = ({randomize, reels, credits}: InitialState): State => {\n  const reelsArray = randomize\n    ? reels.map((reel) => shuffleArray([...(reel as any)]))\n    : reels.map((reel) => [...(reel as any)]);\n  return {\n    activity: 'idle',\n    credits,\n    reelsArray,\n    multiplierIndex: 0,\n    lineIndexes: [0, 0, 0],\n  };\n};\n\nconst getWildCards = (\n  combinations: Combinations,\n  reels: string[],\n): WildCards => {\n  const wildCards: WildCards = [];\n  Object.keys(combinations).map((combination) => {\n    const unicodeCombination = [...(combination as any)];\n    if (unicodeCombination.length < reels.length) {\n      wildCards.push({line: combination, amount: combinations[combination]});\n    }\n  });\n  return wildCards.sort((a, b) => b.amount - a.amount);\n};\n\nconst getRandomLineIndexes = (reelsArray: string[][]): number[] => {\n  return reelsArray.map((reel) => Math.floor(Math.random() * reel.length));\n};\n\nconst getWinningLine = (\n  lineIndexes: number[],\n  reelsArray: string[][],\n): string => {\n  return lineIndexes.reduce((total, lineIndex, i) => {\n    total += reelsArray[i][lineIndex];\n    return total;\n  }, '');\n};\n\nconst getWinningAmount = (\n  line: string,\n  combinations: Combinations,\n  wildCards: WildCards,\n): number => {\n  const combination = combinations[line];\n  if (combination) {\n    return combination;\n  }\n  for (let i = 0; i < wildCards.length; i++) {\n    const wildCard = wildCards[i];\n    if (line.includes(wildCard.line)) {\n      return wildCard.amount;\n    }\n  }\n  return 0;\n};\n\nexport const SlotMachine = memo(function SlotMachine({\n  combinations,\n  reels,\n  multipliers = [1, 2, 3, 5, 10, 20],\n  randomize,\n  credits,\n}: Props) {\n  const color = useColor();\n  const [state, setState] = useState<State>(() =>\n    getInitialState({randomize, reels, credits}),\n  );\n  const multiplier = multipliers[state.multiplierIndex];\n  const disable = state.activity === 'spinning';\n  const wildCards = useMemo(() => getWildCards(combinations, reels), [\n    combinations,\n    reels,\n  ]);\n\n  const creditError =\n    state.activity === 'insufficient credits' ? 'insufficient credits' : '';\n\n  const onSpin = useCallback(() => {\n    const remainingCredits = state.credits - multiplier;\n    if (remainingCredits < 0) {\n      setState((p) => ({...p, activity: 'insufficient credits'}));\n      return;\n    }\n    const lineIndexes = getRandomLineIndexes(state.reelsArray);\n    const winningLine = getWinningLine(lineIndexes, state.reelsArray);\n    const winningAmount = getWinningAmount(\n      winningLine,\n      combinations,\n      wildCards,\n    );\n\n    setState((p) => ({\n      ...p,\n      activity: 'spinning',\n      lineIndexes,\n      credits: remainingCredits,\n    }));\n    setTimeout(() => {\n      console.log(winningLine, winningAmount);\n      setState((p) => ({\n        ...p,\n        activity: 'idle',\n        credits: p.credits + winningAmount * multiplier,\n      }));\n    }, 500);\n  }, [combinations, multiplier, state.credits, state.reelsArray, wildCards]);\n\n  const onMultiplier = useCallback(() => {\n    setState((p) => {\n      const nextIndex = p.multiplierIndex + 1;\n      const multiplierIndex =\n        multipliers.length <= nextIndex || p.credits < multipliers[nextIndex]\n          ? 0\n          : nextIndex;\n      return {...p, multiplierIndex};\n    });\n  }, [multipliers]);\n\n  return (\n    <View>\n      <View style={{flexDirection: 'row'}}>\n        {state.reelsArray.map((reel, i) => (\n          <View key={`${i}`}>\n            {reel.map((item, j) => (\n              <Text\n                key={`${i}${j}${item}`}\n                style={{\n                  borderWidth: 2,\n                  borderColor:\n                    state.lineIndexes[i] === j\n                      ? color.primary\n                      : color.background,\n                }}\n                title={item}\n              />\n            ))}\n          </View>\n        ))}\n      </View>\n      <TouchableOpacity\n        disabled={disable}\n        onPress={onMultiplier}\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'center',\n          alignItems: 'center',\n        }}>\n        <Text bold emphasis=\"high\" title={`BET X${multiplier}`} />\n        <Icon color={color.primary} name=\"lightning-bolt\" />\n      </TouchableOpacity>\n      <Text\n        center\n        emphasis=\"high\"\n        style={{padding: Theme.padding.p02}}\n        title={`${state.credits} credits`}\n        type=\"h4\"\n      />\n      <Button\n        color=\"primary\"\n        disable={disable}\n        emphasis=\"high\"\n        onPress={onSpin}\n        title=\"spin\"\n      />\n      <Text\n        center\n        color=\"danger\"\n        emphasis=\"high\"\n        style={{padding: Theme.padding.p02}}\n        title={creditError}\n      />\n    </View>\n  );\n});\n","import React, {memo, useCallback, useState} from 'react';\nimport {StyleSheet, View} from 'react-native';\nimport {Button, Screen, Text} from '../../../components';\nimport {useColor, useNav} from '../../../hooks';\nimport {\n  getRandomReelArrays,\n  getReturnPercentage,\n  getWinPercentage,\n} from './utils';\nimport {combinations, reels} from './config';\nimport {SlotMachine} from './SlotMachine';\n\nconst winPercentage = (getWinPercentage(combinations, reels) * 100).toFixed(2);\nconst returnPercentage = (\n  getReturnPercentage(combinations, reels) * 100\n).toFixed(2);\n\nconst getInitialState = () => ({\n  tokens: 14,\n  spinning: false,\n  active: reels.map(() => 0),\n  reels: getRandomReelArrays(reels),\n});\n\nexport default memo(function PlaygroundSlotMachine() {\n  const color = useColor();\n  const nav = useNav();\n\n  const [state, setState] = useState(() => getInitialState());\n  const styles = StyleSheet.create({\n    container: {\n      backgroundColor: color.background,\n    },\n  });\n  const navBack = useCallback(nav('playground'), [nav]);\n\n  const onSpin = useCallback(() => {\n    setState((p) => ({...p, spinning: true}));\n  }, []);\n\n  return (\n    <Screen onLeftPress={navBack} title=\"Slot Machine\">\n      <View style={styles.container}>\n        <Text title={`win percentage: ${winPercentage}%`} />\n        <Text title={`return percentage: ${returnPercentage}%`} />\n        <Text title={`${state}`} />\n\n        <Button onPress={onSpin} title=\"spin\" />\n        <View\n          style={{\n            flex: 1,\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        />\n        <SlotMachine\n          combinations={{\n            '🍓🍓🍓': 200,\n            '🍇🍇🍇': 100,\n            '🍉🍉🍉': 100,\n            '🍉🍉🍇': 100,\n            '🥭🥭🥭': 18,\n            '🥭🥭🍇': 18,\n            '🍏🍏🍏': 14,\n            '🍏🍏🍇': 14,\n            '🍊🍊🍊': 10,\n            '🍊🍊🍇': 10,\n            '🍒🍒🍒': 8,\n            '🍒🍒': 5,\n            '🍒': 2,\n          }}\n          credits={20}\n          randomize\n          reels={[\n            '🍓🍇🍉🍉🥭🥭🥭🥭🥭🍏🍏🍏🍏🍏🍊🍊🍊🍊🍊🍒🍒🍒🍒🍋🍋',\n            '🍓🍇🍇🍉🍉🥭🥭🥭🍏🍏🍏🍊🍊🍊🍊🍊🍒🍒🍒🍒🍒🍒🍒🍋🍋',\n            '🍓🍇🍉🍉🥭🥭🥭🥭🍏🍏🍊🍊🍊🍊🍊🍒🍒🍒🍒🍒🍋🍋🍋🍋🍋',\n          ]}\n        />\n      </View>\n    </Screen>\n  );\n});\n\n// var WinningSound = () => {\n//   return (\n//     <audio autoPlay=\"autoplay\" className=\"player\" preload=\"false\">\n//       <source src=\"https://andyhoffman.codes/random-assets/img/slots/winning_slot.wav\" />\n//     </audio>\n//   );\n// };\n\n// class App extends React.PureComponent {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       winner: null,\n//     };\n//     this.finishHandler = this.finishHandler.bind(this);\n//     this.handleClick = this.handleClick.bind(this);\n//   }\n\n//   handleClick() {\n//     this.setState({winner: null});\n//     this.emptyArray();\n//     this._child1.forceUpdateHandler();\n//     this._child2.forceUpdateHandler();\n//     this._child3.forceUpdateHandler();\n//   }\n\n//   static loser = [\n//     'Not quite',\n//     'Stop gambling',\n//     'Hey, you lost!',\n//     'Ouch! I felt that',\n//     \"Don't beat yourself up\",\n//     'There goes the college fund',\n//     'I have a cat. You have a loss',\n//     \"You're awesome at losing\",\n//     'Coding is hard',\n//     \"Don't hate the coder\",\n//   ];\n\n//   static matches = [];\n\n//   finishHandler(value) {\n//     App.matches.push(value);\n\n//     if (App.matches.length === 3) {\n//       const {winner} = this.state;\n//       const first = App.matches[0];\n//       let results = App.matches.every((match) => match === first);\n//       this.setState({winner: results});\n//     }\n//   }\n\n//   emptyArray() {\n//     App.matches = [];\n//   }\n\n//   render() {\n//     return (\n//       <>\n//         <View className=\"spinner-container\">\n//           <Spinner\n//             onFinish={this.finishHandler}\n//             ref={(child) => {\n//               this._child1 = child;\n//             }}\n//             timer=\"1000\"\n//           />\n//           <Spinner\n//             onFinish={this.finishHandler}\n//             ref={(child) => {\n//               this._child2 = child;\n//             }}\n//             timer=\"1400\"\n//           />\n//           <Spinner\n//             onFinish={this.finishHandler}\n//             ref={(child) => {\n//               this._child3 = child;\n//             }}\n//             timer=\"2200\"\n//           />\n//         </View>\n//         <Button onClick={this.handleClick} title=\"repeatButton\" />\n//       </>\n//     );\n//   }\n// }\n\n// class Spinner extends React.PureComponent {\n//   constructor(props) {\n//     super(props);\n//     this.forceUpdateHandler = this.forceUpdateHandler.bind(this);\n//   }\n\n//   forceUpdateHandler() {\n//     this.reset();\n//   }\n\n//   reset() {\n//     if (this.timer) {\n//       clearInterval(this.timer);\n//     }\n\n//     this.start = this.setStartPosition();\n\n//     this.setState({\n//       position: this.start,\n//       timeRemaining: this.props.timer,\n//     });\n\n//     this.timer = setInterval(() => {\n//       this.tick();\n//     }, 100);\n//   }\n\n//   state = {\n//     position: 0,\n//     lastPosition: null,\n//   };\n//   static iconHeight = 188;\n//   multiplier = Math.floor(Math.random() * (4 - 1) + 1);\n\n//   start = this.setStartPosition();\n//   speed = Spinner.iconHeight * this.multiplier;\n\n//   setStartPosition() {\n//     return Math.floor(Math.random() * 9) * Spinner.iconHeight * -1;\n//   }\n\n//   moveBackground() {\n//     this.setState({\n//       position: this.state.position - this.speed,\n//       timeRemaining: this.state.timeRemaining - 100,\n//     });\n//   }\n\n//   getSymbolFromPosition() {\n//     let {position} = this.state;\n//     const totalSymbols = 9;\n//     const maxPosition = Spinner.iconHeight * (totalSymbols - 1) * -1;\n//     let moved = (this.props.timer / 100) * this.multiplier;\n//     let startPosition = this.start;\n//     let currentPosition = startPosition;\n\n//     for (let i = 0; i < moved; i++) {\n//       currentPosition -= Spinner.iconHeight;\n\n//       if (currentPosition < maxPosition) {\n//         currentPosition = 0;\n//       }\n//     }\n\n//     this.props.onFinish(currentPosition);\n//   }\n\n//   tick() {\n//     if (this.state.timeRemaining <= 0) {\n//       clearInterval(this.timer);\n//       this.getSymbolFromPosition();\n//     } else {\n//       this.moveBackground();\n//     }\n//   }\n\n//   componentDidMount() {\n//     clearInterval(this.timer);\n\n//     this.setState({\n//       position: this.start,\n//       timeRemaining: this.props.timer,\n//     });\n\n//     this.timer = setInterval(() => {\n//       this.tick();\n//     }, 100);\n//   }\n\n//   render() {\n//     let {position, current} = this.state;\n\n//     return (\n//       <View\n//         className=\"icons\"\n//         style={{backgroundPosition: '0px ' + position + 'px'}}\n//       />\n//     );\n//   }\n// }\n\n// // (function ($) {\n// //   var slotMachine = (function () {\n// //     var credits = 15,\n// //       spinning = 3,\n// //       spin = [0, 0, 0],\n// //       slotsTypes = {\n// //         🍒: [2, 5, 10],\n// //         🍊: [0, 15, 30],\n// //         🍐: [0, 40, 50],\n// //         🔔: [0, 50, 80],\n// //         🍋: [0, 0, 100],\n// //         🥝: [0, 0, 150],\n// //         🍉: [0, 0, 250],\n// //         🍍: [0, 0, 500],\n// //         anybar: [0, 0, 80],\n// //       },\n// //       slots = [\n// //         [\n// //           '🍊',\n// //           '🔔',\n// //           '🍊',\n// //           '🥝',\n// //           '🍐',\n// //           '🍊',\n// //           '🍉',\n// //           '🍐',\n// //           '🍊',\n// //           '🍋',\n// //           '🔔',\n// //           '🍒',\n// //           '🍊',\n// //           '🍐',\n// //           '🔔',\n// //           '🍋',\n// //           '🍒',\n// //           '🍍',\n// //           '🍊',\n// //           '🍐',\n// //           '🍊',\n// //           '🔔',\n// //           '🍊',\n// //         ],\n// //         [\n// //           '🍒',\n// //           '🍐',\n// //           '🍊',\n// //           '🔔',\n// //           '🍋',\n// //           '🍒',\n// //           '🍐',\n// //           '🍉',\n// //           '🍒',\n// //           '🔔',\n// //           '🍊',\n// //           '🍋',\n// //           '🍍',\n// //           '🍒',\n// //           '🥝',\n// //           '🍒',\n// //           '🔔',\n// //           '🍐',\n// //           '🍒',\n// //           '🍊',\n// //           '🍒',\n// //           '🍐',\n// //           '🍊',\n// //         ],\n// //         [\n// //           '🍒',\n// //           '🍊',\n// //           '🔔',\n// //           '🍐',\n// //           '🥝',\n// //           '🍒',\n// //           '🍐',\n// //           '🍊',\n// //           '🍉',\n// //           '🍒',\n// //           '🔔',\n// //           '🍊',\n// //           '🍒',\n// //           '🍊',\n// //           '🍒',\n// //           '🍐',\n// //           '🍋',\n// //           '🍍',\n// //           '🔔',\n// //           '🍒',\n// //           '🍒',\n// //           '🍊',\n// //           '🔔',\n// //         ],\n// //       ],\n// //       startSlot = function () {\n// //         spinning = false;\n\n// //         $('#slot-trigger').removeClass('slot-triggerDisabled');\n\n// //         this.blur();\n\n// //         return false;\n// //       },\n// //       endSlot = function () {\n// //         $('#slot-block').show();\n// //         $('#slot-credits').text('VERLOREN!!!');\n\n// //         setInterval(blink($('#slot-credits')), 1000);\n// //       },\n// //       addCredit = function (incrementCredits) {\n// //         var currentCredits = credits;\n// //         credits += incrementCredits;\n\n// //         blink($('#slot-credits'));\n\n// //         $('#slot-credits')\n// //           .css('credit', 0)\n// //           .animate(\n// //             {\n// //               credit: incrementCredits,\n// //             },\n// //             {\n// //               duration: 400 + incrementCredits,\n// //               easing: 'easeOut',\n// //               step: function (now) {\n// //                 $(this).html(parseInt(currentCredits + now, 10));\n// //               },\n// //               complete: function () {\n// //                 $(this).html(credits);\n// //                 blink($('#slot-credits'));\n// //               },\n// //             },\n// //           );\n// //       },\n// //       spin = function () {\n// //         this.blur();\n\n// //         if (spinning == false) {\n// //           $('#slot-machine .arm').animate({top: '45px', height: '2%'});\n// //           $('#slot-machine .arm .knob').animate({top: '-20px', height: '20px'});\n// //           $('#slot-machine .arm-shadow').animate({top: '40px'}, 380);\n// //           $(\n// //             '#slot-machine .ring1 .shadow, #slot-machine .ring2 .shadow',\n// //           ).animate({top: '50%', opacity: 1});\n\n// //           spinning = 3;\n// //           credits--;\n\n// //           $('#slot-credits').html(credits);\n\n// //           spin[0] = parseInt(Math.random() * 23);\n// //           spin[1] = parseInt(Math.random() * 23);\n// //           spin[2] = parseInt(Math.random() * 23);\n\n// //           $('#slot-trigger').addClass('slot-triggerDisabled');\n\n// //           $('img.slotSpinAnimation').show();\n\n// //           $('#wheel1 img:first').css('top', -(spin[0] * 44 + 16) + 'px');\n// //           $('#wheel2 img:first').css('top', -(spin[1] * 44 + 16) + 'px');\n// //           $('#wheel3 img:first').css('top', -(spin[2] * 44 + 16) + 'px');\n\n// //           setTimeout(function () {\n// //             $('#slot-machine .arm').animate({\n// //               top: '-25px',\n// //               height: '50%',\n// //               overflow: 'visible',\n// //             });\n// //             $('#slot-machine .arm .knob').animate({\n// //               top: '-15px',\n// //               height: '16px',\n// //             });\n// //             $('#slot-machine .arm-shadow').animate({top: '13px'});\n// //             $(\n// //               '#slot-machine .ring1 .shadow, #slot-machine .ring2 .shadow',\n// //             ).animate({top: '0', opacity: 0});\n// //           }, 500);\n\n// //           setTimeout(function () {\n// //             stopSpin(1);\n// //           }, 1500 + parseInt(1500 * Math.random()));\n\n// //           setTimeout(function () {\n// //             stopSpin(2);\n// //           }, 1500 + parseInt(1500 * Math.random()));\n\n// //           setTimeout(function () {\n// //             stopSpin(3);\n// //           }, 1500 + parseInt(1500 * Math.random()));\n// //         }\n\n// //         return false;\n// //       },\n// //       stopSpin = function (slot) {\n// //         $('#wheel' + slot)\n// //           .find('img:last')\n// //           .hide()\n// //           .end()\n// //           .find('img:first')\n// //           .animate(\n// //             {\n// //               top: -spin[slot - 1] * 44,\n// //             },\n// //             {\n// //               duration: 500,\n// //               easing: 'elasticOut',\n// //               complete: function () {\n// //                 spinning--;\n\n// //                 if (spinning <= 0) {\n// //                   endSpin();\n// //                 }\n// //               },\n// //             },\n// //           );\n// //       },\n// //       endSpin = function () {\n// //         var slotType = slots[0][spin[0]],\n// //           matches = 1,\n// //           barMatch = /bar/.test(slotType) ? 1 : 0,\n// //           winnedCredits = 0,\n// //           waitToSpin = 10;\n\n// //         if (slotType == slots[1][spin[1]]) {\n// //           matches++;\n\n// //           if (slotType == slots[2][spin[2]]) {\n// //             matches++;\n// //           } else if (barMatch != 0 && /bar/.test(slots[2][spin[2]])) {\n// //             barMatch++;\n// //           }\n// //         } else if (barMatch != 0 && /bar/.test(slots[1][spin[1]])) {\n// //           barMatch++;\n\n// //           if (/bar/.test(slots[2][spin[2]])) {\n// //             barMatch++;\n// //           }\n// //         }\n\n// //         if (matches != 3 && barMatch == 3) {\n// //           slotType = 'anybar';\n// //           matches = 3;\n// //         }\n\n// //         var winnedCredits = slotsTypes[slotType][matches - 1];\n\n// //         if (winnedCredits > 0) {\n// //           addCredit(winnedCredits);\n// //           waitToSpin = 410 + winnedCredits;\n// //         }\n\n// //         setTimeout(function () {\n// //           if (credits == 0) {\n// //             endSlot();\n// //           } else {\n// //             $('#slot-trigger').removeClass('slot-triggerDisabled');\n// //             spinning = false;\n// //           }\n// //         }, waitToSpin);\n// //       };\n// //     return {\n// //       init: function () {\n// //         startSlot();\n\n// //         $('#slot-trigger')\n// //           .bind('mousedown', function () {\n// //             $(this).addClass('slot-triggerDown');\n// //           })\n// //           .bind('click', spin);\n\n// //         $(document).bind('mouseup', function () {\n// //           $('#slot-trigger').removeClass('slot-triggerDown');\n// //         });\n\n// //         $('#wheel1 img:first').css(\n// //           'top',\n// //           -(parseInt(Math.random() * 23) * 44) + 'px',\n// //         );\n// //         $('#wheel2 img:first').css(\n// //           'top',\n// //           -(parseInt(Math.random() * 23) * 44) + 'px',\n// //         );\n// //         $('#wheel3 img:first').css(\n// //           'top',\n// //           -(parseInt(Math.random() * 23) * 44) + 'px',\n// //         );\n// //       },\n// //     };\n// //   })();\n\n// //   $.extend($.easing, {\n// //     bounceOut: function (x, t, b, c, d) {\n// //       if ((t /= d) < 1 / 2.75) {\n// //         return c * (7.5625 * t * t) + b;\n// //       } else if (t < 2 / 2.75) {\n// //         return c * (7.5625 * (t -= 1.5 / 2.75) * t + 00.75) + b;\n// //       } else if (t < 2.5 / 2.75) {\n// //         return c * (7.5625 * (t -= 2.25 / 2.75) * t + 00.9375) + b;\n// //       } else {\n// //         return c * (7.5625 * (t -= 2.625 / 2.75) * t + 00.984375) + b;\n// //       }\n// //     },\n// //     easeOut: function (x, t, b, c, d) {\n// //       return -c * (t /= d) * (t - 2) + b;\n// //     },\n// //     elasticOut: function (x, t, b, c, d) {\n// //       var s = 1.70158;\n// //       var p = 0;\n// //       var a = c;\n// //       if (t == 0) return b;\n// //       if ((t /= d) == 1) return b + c;\n// //       if (!p) p = d * 00.3;\n// //       if (a < Math.abs(c)) {\n// //         a = c;\n// //         var s = p / 4;\n// //       } else var s = (p / (2 * Math.PI)) * Math.asin(c / a);\n// //       return (\n// //         a * Math.pow(2, -10 * t) * Math.sin(((t * d - s) * (2 * Math.PI)) / p) +\n// //         c +\n// //         b,\n// //       );\n// //     },\n// //   });\n\n// //   $(document).ready(slotMachine.init);\n// // })(jQuery);\n\n// // function blink(element) {\n// //   element.animate({opacity: 0}, 200, 'linear', function () {\n// //     $(this).animate({opacity: 1}, 200);\n// //   });\n// // }\n"],"sourceRoot":""}