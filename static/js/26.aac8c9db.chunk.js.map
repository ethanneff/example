{"version":3,"sources":["apps/Debug/screens/Drift/Canvas.tsx","apps/Debug/screens/Drift/Context.tsx","apps/Debug/screens/Drift/Dpad.tsx","apps/Debug/screens/Drift/Character.tsx","apps/Debug/screens/Drift/utils.ts","apps/Debug/screens/Drift/Tracks.tsx","apps/Debug/screens/Drift/Game.tsx","apps/Debug/screens/Drift/index.tsx"],"names":["Canvas","memo","children","onLayout","color","useColor","View","style","flex","backgroundColor","surface","driftInitialState","tracks","driftReducer","state","action","type","payload","length","pop","DriftContext","createContext","dispatch","Dpad","useShadow","useDropShadow","useContext","box","width","height","onPress","useCallback","position","bottom","right","transform","rotate","flexDirection","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","Character","canvas","initialPositionRef","useRef","x","y","Animated","ValueXY","current","useDriver","useNativeDriver","animate","dx","dy","toValue","change","size","getPosition","spring","start","useEffect","setUpdateIntervalForType","SensorTypes","accelerometer","acc","subscribe","unsubscribe","getLayout","borderRadius","elevation","shadowColor","shadowOffset","shadowOpacity","shadowRadius","zIndex","Track","track","styles","StyleSheet","create","opacity","top","left","Tracks","map","index","key","Game","useState","setCanvas","onCanvasLayout","event","nativeEvent","layout","nav","useNav","useReducer","isEmulator","DeviceInfo","isEmulatorSync","border","title","onLeftPress","to","Provider","value","center"],"mappings":"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","file":"static/js/26.aac8c9db.chunk.js","sourcesContent":["import React, {memo} from 'react';\nimport {View, LayoutChangeEvent} from 'react-native';\nimport {useColor} from '../../../../hooks';\n\ninterface CanvasProps {\n  onLayout: (event: LayoutChangeEvent) => void;\n}\n\nexport const Canvas: React.FC<CanvasProps> = memo(function Canvas({\n  children,\n  onLayout,\n}) {\n  const color = useColor();\n  return (\n    <View onLayout={onLayout} style={{flex: 1, backgroundColor: color.surface}}>\n      {children}\n    </View>\n  );\n});\n","import {TrackPositionWithColor, TrackPosition} from './Tracks';\nimport {ColorChoice} from './Dpad';\nimport {createContext} from 'react';\n\nexport type DriftState = {\n  tracks: TrackPositionWithColor[];\n  color: ColorChoice;\n};\n\nexport const driftInitialState: DriftState = {\n  tracks: [],\n  color: 'lightgrey',\n};\n\ntype Action =\n  | {type: 'addColor'; payload: ColorChoice}\n  | {type: 'addTrack'; payload: TrackPosition};\n\nexport const driftReducer = (state: DriftState, action: Action) => {\n  switch (action.type) {\n    case 'addColor':\n      return {...state, color: action.payload};\n    case 'addTrack': {\n      const tracks = [...state.tracks];\n      while (tracks.length > 10) {\n        tracks.pop();\n      }\n      return {\n        ...state,\n        tracks: [{...action.payload, color: state.color}, ...tracks],\n      };\n    }\n    default:\n      return state;\n  }\n};\n\ntype Context = {\n  state: DriftState;\n  dispatch: (action: Action) => void;\n};\n\nexport const DriftContext = createContext<Context>({\n  state: driftInitialState,\n  dispatch: () => undefined,\n});\n","import React, {memo, useCallback, useContext} from 'react';\nimport {View} from 'react-native';\nimport {useDropShadow} from '../../../../hooks';\nimport {DriftContext} from './Context';\nimport {TouchableOpacity} from '../../../../components';\n\nexport type ColorChoice =\n  | 'slateblue'\n  | 'orange'\n  | 'mediumseagreen'\n  | 'violet'\n  | 'lightgrey';\n\nexport const Dpad = memo(function Dpad() {\n  const useShadow = useDropShadow(10);\n  const {dispatch} = useContext(DriftContext);\n  const size = 50;\n  const box = {\n    width: size,\n    height: size,\n  };\n\n  const onPress = useCallback(\n    (payload: ColorChoice) => () => dispatch({type: 'addColor', payload}),\n    [dispatch],\n  );\n\n  return (\n    <View\n      style={{\n        position: 'absolute',\n        bottom: size,\n        right: size,\n        transform: [{rotate: '45deg'}],\n      }}>\n      <View style={{flexDirection: 'row'}}>\n        <TouchableOpacity\n          onPress={onPress('violet')}\n          style={{\n            ...box,\n            backgroundColor: 'violet',\n            borderTopLeftRadius: size,\n            ...useShadow,\n          }}\n        />\n        <TouchableOpacity\n          onPress={onPress('mediumseagreen')}\n          style={{\n            ...box,\n            backgroundColor: 'mediumseagreen',\n            borderTopRightRadius: size,\n            ...useShadow,\n          }}\n        />\n      </View>\n      <View style={{flexDirection: 'row'}}>\n        <TouchableOpacity\n          onPress={onPress('slateblue')}\n          style={{\n            ...box,\n            backgroundColor: 'slateblue',\n            borderBottomLeftRadius: size,\n            ...useShadow,\n          }}\n        />\n        <TouchableOpacity\n          onPress={onPress('orange')}\n          style={{\n            ...box,\n            backgroundColor: 'orange',\n            borderBottomRightRadius: size,\n            ...useShadow,\n          }}\n        />\n      </View>\n    </View>\n  );\n});\n","import React, {memo, useEffect, useRef, useCallback, useContext} from 'react';\nimport {Animated} from 'react-native';\nimport {\n  accelerometer,\n  setUpdateIntervalForType,\n  SensorTypes,\n} from 'react-native-sensors';\nimport {getPosition} from './utils';\nimport {DriftContext} from './Context';\nimport {CanvasDimensions} from './Game';\nimport {useNativeDriver} from '../../../../hooks';\n\ntype CharacterProps = {\n  canvas: CanvasDimensions;\n};\n\nexport const Character = memo(function Character({canvas}: CharacterProps) {\n  const elevation = 5;\n  const size = 30;\n  const speed = 6;\n  const rate = 16;\n  const shadowOpacity = elevation * 0.036 + 0.12;\n  const shadowRadius = elevation * 0.36 + 1.2;\n  const initialPositionRef = useRef({\n    x: canvas.width / 2 - size,\n    y: canvas.height / 2 - size,\n  });\n  const position = new Animated.ValueXY(initialPositionRef.current);\n  const useDriver = useNativeDriver();\n  const {dispatch} = useContext(DriftContext);\n\n  const animate = useCallback(\n    (dx: number, dy: number) => {\n      const toValue = getPosition({\n        canvas,\n        change: {dx: dx * speed, dy: dy * speed},\n        current: initialPositionRef.current,\n        size,\n      });\n      initialPositionRef.current = toValue;\n      dispatch({type: 'addTrack', payload: {...toValue, size}});\n      Animated.spring(position, {\n        toValue,\n        useNativeDriver: useDriver,\n      }).start();\n    },\n    [canvas, dispatch, position, useDriver],\n  );\n\n  useEffect(() => {\n    setUpdateIntervalForType(SensorTypes.accelerometer, rate);\n    const acc = accelerometer.subscribe(({x, y}) => animate(x, y));\n    return () => {\n      acc.unsubscribe();\n    };\n  }, [rate, animate]);\n\n  return (\n    <Animated.View\n      style={[\n        position.getLayout(),\n        {\n          width: size,\n          height: size,\n          borderRadius: size,\n          elevation,\n          shadowColor: 'black',\n          shadowOffset: {\n            height: 2,\n            width: 0,\n          },\n          shadowOpacity,\n          shadowRadius,\n          zIndex: elevation,\n          backgroundColor: 'coral',\n        },\n      ]}\n    />\n  );\n});\n","type Position = {\n  change: {dx: number; dy: number};\n  canvas: {x: number; y: number; width: number; height: number};\n  current: {x: number; y: number};\n  size: number;\n};\n\nexport const getPosition = (position: Position) => {\n  const dx = position.current.x - position.change.dx;\n  const dy = position.current.y + position.change.dy;\n  const y =\n    dy < 0\n      ? 0\n      : dy + position.size > position.canvas.height\n      ? position.canvas.height - position.size\n      : dy;\n  const x =\n    dx < 0\n      ? 0\n      : dx + position.size > position.canvas.width\n      ? position.canvas.width - position.size\n      : dx;\n  return {x, y};\n};\n","import React, {memo, useContext} from 'react';\nimport {View, StyleSheet} from 'react-native';\nimport {ColorChoice} from './Dpad';\nimport {DriftContext} from './Context';\n\nexport type TrackPosition = {x: number; y: number; size: number};\nexport type TrackPositionWithColor = TrackPosition & {color: ColorChoice};\n\ninterface TrackProps {\n  track: TrackPositionWithColor;\n}\n\nconst Track = memo(function TrackMemo({track}: TrackProps) {\n  const size = track.size / 4;\n  const styles = StyleSheet.create({\n    tracks: {\n      opacity: 0.4,\n      borderRadius: track.size,\n      position: 'absolute',\n      width: size,\n      height: size,\n      backgroundColor: track.color,\n    },\n  });\n  return (\n    <View>\n      <View\n        style={{\n          ...styles.tracks,\n          top: track.y - track.size / 2 - size / 2,\n          left: track.x + track.size / 2 - track.size / 2,\n        }}\n      />\n      <View\n        style={{\n          ...styles.tracks,\n          top: track.y - track.size / 2 - size / 2,\n          left: track.x + track.size / 2 + track.size / 2 - size,\n        }}\n      />\n    </View>\n  );\n});\n\nexport const Tracks = memo(function TracksMemo() {\n  const {state} = useContext(DriftContext);\n  return (\n    <View>\n      {state.tracks.map((track: TrackPositionWithColor, index: number) => (\n        <Track key={`${track.x}${track.y}${index}`} track={track} />\n      ))}\n    </View>\n  );\n});\n","import React, {memo, useState, useCallback} from 'react';\nimport {View, LayoutChangeEvent} from 'react-native';\nimport {Canvas} from './Canvas';\nimport {Dpad} from './Dpad';\nimport {Character} from './Character';\nimport {Tracks} from './Tracks';\n\nexport type CanvasDimensions = {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n};\n\nexport const Game = memo(function Game() {\n  const [canvas, setCanvas] = useState<CanvasDimensions | null>(null);\n\n  const onCanvasLayout = useCallback((event: LayoutChangeEvent) => {\n    const {x, y, height, width} = event.nativeEvent.layout;\n    setCanvas({x, y, height, width});\n  }, []);\n\n  return (\n    <View style={{flex: 1}}>\n      <Canvas onLayout={onCanvasLayout}>\n        {canvas && (\n          <View>\n            <Character canvas={canvas} />\n            <Tracks />\n          </View>\n        )}\n      </Canvas>\n      <Dpad />\n    </View>\n  );\n});\n","import DeviceInfo from 'react-native-device-info';\nimport React, {memo, useReducer} from 'react';\nimport {Screen, Text} from '../../../../components';\nimport {useNav} from '../../../../hooks';\nimport {Game} from './Game';\nimport {DriftContext, driftReducer, driftInitialState} from './Context';\n\nexport default memo(function DebugDrift() {\n  const nav = useNav();\n  const [state, dispatch] = useReducer(driftReducer, driftInitialState);\n  const isEmulator = DeviceInfo.isEmulatorSync();\n\n  // TODO: figure out why Screen re-renders\n  return (\n    <Screen border title=\"Drift\" onLeftPress={nav.to('debug')}>\n      <DriftContext.Provider value={{state, dispatch}}>\n        {isEmulator ? (\n          <Text title=\"simulators not supported\" center />\n        ) : (\n          <Game />\n        )}\n      </DriftContext.Provider>\n    </Screen>\n  );\n});\n"],"sourceRoot":""}