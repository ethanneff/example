{"version":3,"sources":["apps/Checklists/screens/List/index.tsx"],"names":["Component","nav","to","props","navigate","this","items","remove","removeItem","toggle","toggleActiveItem","disableScroll","onLeftPress","keyExtractor","item","id","data","renderItem","style","flexDirection","label","icon","iconColor","Theme","color","success","onPress","danger","warning","neutral","active","lowercase","title","name","fab","contained","React","PureComponent","mapDispatchToProps","updateItem","connect","state","getItemsByCreatedAt"],"mappings":"iOA4BMA,E,2MA+CIC,IAAM,SAACC,GAAD,OAA0B,kBAAM,EAAKC,MAAMC,SAASF,K,wEA9CjD,IAAD,EACkDG,KAAKF,MAA7DG,EADM,EACNA,MAAmBC,EADb,EACCC,WAAsCC,EADvC,EACqBC,iBACnC,OACE,kBAAC,IAAD,CAAQC,eAAa,EAACC,YAAaP,KAAKJ,IAAI,eAC1C,kBAAC,IAAD,CACEY,aAAc,SAAAC,GAAI,OAAIA,EAAKC,IAC3BC,KAAMV,EACNW,WAAY,gBAAGH,EAAH,EAAGA,KAAH,OACV,kBAAC,IAAD,CAAMI,MAAO,CAAEC,cAAe,QAC5B,kBAAC,IAAD,CACEC,OAAK,EACLC,KAAK,yBACLC,UAAWC,IAAMC,MAAMC,QACvBC,QAAS,eAEX,kBAAC,IAAD,CACEN,OAAK,EACLC,KAAK,eACLC,UAAWC,IAAMC,MAAMG,OACvBD,QAAS,kBAAMnB,EAAOO,EAAKC,OAE7B,kBAAC,IAAD,CACEK,OAAK,EACLE,UAAWC,IAAMC,MAAMI,QACvBP,KAAK,QACLK,QAAS,kBAAMjB,EAAOK,EAAKC,OAE7B,kBAAC,IAAD,CACEK,OAAK,EACLS,QAASf,EAAKgB,OACdC,WAAS,EACTC,MAAOlB,EAAKmB,KACZP,QAAS,mBAKjB,kBAAC,IAAD,CACEQ,KAAG,EACHC,WAAS,EACTd,KAAK,OACLK,QAASrB,KAAKJ,IAAI,+B,GA1CJmC,IAAMC,eAsDxBC,EAAoC,CACxClC,aACAI,eACAE,qBACA6B,gBAGaC,sBAXS,SAACC,GAAD,MAAmC,CACzDnC,MAAOoC,YAAoBD,KAY3BH,EAFaE,CAGbxC","file":"static/js/13.7e129052.chunk.js","sourcesContent":["import React from \"react\";\nimport { FlatList, View } from \"react-native\";\nimport { connect } from \"react-redux\";\nimport { Button, Screen } from \"../../../../components\";\nimport { RootState } from \"../../../../containers\";\nimport { NavigationScreen, navigate } from \"../../../../models\";\nimport { Theme } from \"../../../../utils\";\nimport {\n  ItemsArray,\n  getItemsByCreatedAt,\n  removeItem,\n  toggleActiveItem,\n  updateItem\n} from \"../../models\";\n\ninterface StateProps {\n  items: ItemsArray;\n}\n\ninterface DispatchProps {\n  updateItem: typeof updateItem;\n  navigate: typeof navigate;\n  removeItem: typeof removeItem;\n  toggleActiveItem: typeof toggleActiveItem;\n}\n\ntype Props = DispatchProps & StateProps & DispatchProps;\n\nclass Component extends React.PureComponent<Props> {\n  public render() {\n    const { items, removeItem: remove, toggleActiveItem: toggle } = this.props;\n    return (\n      <Screen disableScroll onLeftPress={this.nav(\"checklists\")}>\n        <FlatList\n          keyExtractor={item => item.id}\n          data={items}\n          renderItem={({ item }) => \n            <View style={{ flexDirection: \"row\" }}>\n              <Button\n                label\n                icon=\"checkbox-marked-circle\"\n                iconColor={Theme.color.success}\n                onPress={() => undefined}\n              />\n              <Button\n                label\n                icon=\"close-circle\"\n                iconColor={Theme.color.danger}\n                onPress={() => remove(item.id)}\n              />\n              <Button\n                label\n                iconColor={Theme.color.warning}\n                icon=\"clock\"\n                onPress={() => toggle(item.id)}\n              />\n              <Button\n                label\n                neutral={item.active}\n                lowercase\n                title={item.name}\n                onPress={() => undefined}\n              />\n            </View>\n          }\n        />\n        <Button\n          fab\n          contained\n          icon=\"plus\"\n          onPress={this.nav(\"checklistsItemCreate\")}\n        />\n      </Screen>\n    );\n  }\n  private nav = (to: NavigationScreen) => () => this.props.navigate(to);\n}\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  items: getItemsByCreatedAt(state)\n});\n\nconst mapDispatchToProps: DispatchProps = {\n  navigate,\n  removeItem,\n  toggleActiveItem,\n  updateItem\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Component);\n"],"sourceRoot":""}