{"version":3,"sources":["apps/Playground/Questionnaire/screens/Questionnaires.tsx","apps/Playground/Questionnaire/index.tsx"],"names":["Questionnaires","questionnaires","useRootSelector","getQuestionnaireArray","selected","state","useState","actionSheet","setActionSheet","dispatch","useRootDispatch","color","useColor","handleLongPress","useCallback","id","removeQuestionnaire","handleItemPress","selectQuestionnaire","handleActionSheetClose","handleCreate","createQuestionnaire","String","Date","now","handleItemMenu","renderItem","item","length","questions","subtitle","onLongPress","onPress","View","style","flexDirection","justifyContent","flex","title","type","name","keyExtractor","FlatList","data","extraData","background","fab","margin","position","bottom","right","onBackgroundPress","Container","choices","key","next","output","width","Dimensions","get","tableView","currentIndex","handleViewableItemsChanged","viewableItems","index","onProgress","direction","onFinish","scrollToIndex","animated","onSelection","choice","setRef","ref","updateSelection","updateProgress","value","items","map","nav","to","props","navigate","onLeftPress","this","horizontal","onViewableItemsChanged","pagingEnabled","removeClippedSubviews","scrollEnabled","showsHorizontalScrollIndicator","showsVerticalScrollIndicator","viewabilityConfig","itemVisiblePercentThreshold","React","PureComponent","mapDispatchToProps","connect"],"mappings":"gQAaWA,EAAiB,WAC1B,IAAMC,EAAiBC,YAAgBC,KACjCC,EAAWF,aAAgB,SAACG,GAAD,OAAWA,EAAMJ,eAAeG,YAFjC,EAGME,oBAAS,GAHf,mBAGzBC,EAHyB,KAGZC,EAHY,KAI1BC,EAAWC,cACXC,EAAQC,cACRC,EAAkBC,uBACtB,SAACC,GAAD,OAAgB,kBAAMN,EAASO,YAAoBD,OACnD,CAACN,IAEGQ,EAAkBH,uBACtB,SAACC,GAAD,OAAgB,kBAAMN,EAASS,YAAoBH,OACnD,CAACN,IAEGU,EAAyBL,uBAAY,kBAAMN,GAAe,KAAQ,IAClEY,EAAeN,uBACnB,kBAAML,EAASY,YAAoBC,OAAOC,KAAKC,WAC/C,CAACf,IAEGgB,EAAiBX,uBAAY,WACjCN,GAAe,SAACH,GAAD,OAAYA,OAC1B,IACGqB,EAAaZ,uBACjB,YAAa,IAAXa,EAAU,EAAVA,KACMC,EAASD,EAAKE,UAAUD,OACxBE,EAAQ,UAAMF,EAAN,oBAAmC,IAAXA,EAAe,GAAK,KAC1D,OACE,kBAAC,IAAD,CACEG,YAAalB,EAAgBc,EAAKZ,IAClCiB,QAASf,EAAgBU,EAAKZ,IAC9BX,SAAUA,IAAauB,EAAKZ,IAC5B,kBAACkB,EAAA,EAAD,CACEC,MAAO,CACLC,cAAe,MACfC,eAAgB,kBAElB,kBAACH,EAAA,EAAD,CAAMC,MAAO,CAACG,KAAM,KAClB,kBAAC,IAAD,CAAMC,MAAOX,EAAKW,MAAOC,KAAK,OAC9B,kBAAC,IAAD,CAAMD,MAAOR,EAAUS,KAAK,aAE9B,kBAAC,IAAD,CAAMC,KAAK,kBAAkBR,QAASP,QAK9C,CAACA,EAAgBR,EAAiBJ,EAAiBT,IAG/CqC,EAAe3B,uBAAY,SAACa,GAAD,OAAyBA,EAAKZ,KAAI,IAEnE,OACE,oCACE,kBAAC2B,EAAA,EAAD,CACEC,KAAM1C,EACN2C,UAAWxC,EACXqC,aAAcA,EACdf,WAAYA,IAEd,kBAAC,IAAD,CACEf,MAAOA,EAAMkC,WACbC,KAAG,EACHN,KAAK,OACLR,QAASZ,EACTc,MAAO,CACLa,OAAQ,GACRC,SAAU,WACVC,OAAQ,EACRC,MAAO,KAGV3C,GACC,kBAAC,IAAD,CAAQ4C,kBAAmBhC,EAAwBmB,MAAM,YCvE3Dc,E,4MACKT,KAAO,CACd,CACEU,QAAS,CACP,CACEC,IAAK,IACLlD,UAAU,EACVkC,MAAO,cAET,CACEgB,IAAK,IACLlD,UAAU,EACVkC,MAAO,UAET,CACEgB,IAAK,IACLlD,UAAU,EACVkC,MAAO,SAGXgB,IAAK,IACLC,KAAM,IACNjB,MAAO,8CACPC,KAAM,SAER,CAACe,IAAK,IAAKhB,MAAO,KAClB,CAACgB,IAAK,IAAKhB,MAAO,KAClB,CAACgB,IAAK,IAAKhB,MAAO,KAClB,CAACgB,IAAK,IAAKhB,MAAO,M,EAEpBkB,OAAc,G,EACLC,MAAQC,IAAWC,IAAI,UAAUF,M,EAC1CG,e,IACAC,aAAe,E,EAEfC,2BAA6B,YAA2B,IAAzBC,EAAwB,EAAxBA,cAC7B,EAAKF,aAAeE,EAAc,GAAGC,OAAS,G,EAGhDC,WAAa,WAAoB,IAAnBC,EAAkB,uDAAN,EAClBF,EAAQ,EAAKH,aAAeK,EAC9BF,EAAQ,IAGRA,GAAS,EAAKrB,KAAKf,OACrB,EAAKuC,WAGP,EAAKP,UAAUQ,cAAc,CAC3BC,UAAU,EACVL,Y,EAIJM,YAAc,SAAC3C,EAAW4C,GACxB,EAAKf,OAAL,eACK,EAAKA,OADV,eAEG7B,EAAK2B,IAFR,eAGO,EAAKE,OAAO7B,EAAK2B,KAHxB,eAIKiB,EAAOjB,KAAM,O,EAOpBa,SAAW,a,EAEXK,OAAS,SAACC,GACR,EAAKb,UAAYa,G,EAGnBC,gBAAkB,SAAC/C,EAAW4C,GAAZ,OAA4B,kBAC5C,EAAKD,YAAY3C,EAAM4C,K,EAEzBI,eAAiB,SAACC,GAAD,OAAmB,kBAAM,EAAKX,WAAWW,K,EAE1DlD,WAAa,YAA0B,IAAxBC,EAAuB,EAAvBA,KACTkD,EAAa,kBAAC5C,EAAA,EAAD,CAAMC,MAAO,CAACG,KAAM,KAkBrC,OAhBIV,EAAK0B,UACPwB,EACE,kBAAC5C,EAAA,EAAD,CAAMC,MAAO,CAACG,KAAM,IACjBV,EAAK0B,QAAQyB,KAAI,SAACP,GACjB,OACE,kBAAC,IAAD,CACEjB,IAAKiB,EAAOjC,MACZN,QAAS,EAAK0C,gBAAgB/C,EAAM4C,GACpCjC,MAAOiC,EAAOjC,aASxB,kBAACL,EAAA,EAAD,CAAMC,MAAO,CAACuB,MAAO,EAAKA,QACxB,kBAAC,IAAD,CAAMnB,MAAOX,EAAKW,QACjBuC,EACD,kBAAC5C,EAAA,EAAD,CACEC,MAAO,CACLC,cAAe,MACfC,eAAgB,iBAElB,kBAAC,IAAD,CAAQJ,QAAS,EAAK2C,gBAAgB,GAAIrC,MAAM,SAChD,kBAAC,IAAD,CAAQN,QAAS,EAAK2C,eAAe,GAAIrC,MAAM,SAC/C,kBAAC,IAAD,CAAQN,QAAS,EAAK2C,eAAe,GAAIrC,MAAM,a,EAMvDyC,IAAM,SAACC,GAAD,OAA0B,YAE9BD,EADwB,EAAKE,MAAtBC,UACHF,K,uDAIJ,OACE,kBAAC,IAAD,CAAQG,YAAaC,KAAKL,IAAI,cAAezC,MAAM,iBACjD,kBAACI,EAAA,EAAD,CACEC,KAAMyC,KAAKzC,KACX0C,YAAU,EACVC,uBAAwBF,KAAKtB,2BAC7ByB,eAAa,EACbd,IAAKW,KAAKZ,OACVgB,uBAAqB,EACrB9D,WAAY0D,KAAK1D,WACjB+D,eAAe,EACfC,gCAAgC,EAChCC,8BAA8B,EAC9BC,kBAAmB,CACjBC,4BAA6B,MAGjC,kBAAC,EAAD,W,GAxIgBC,IAAMC,eA8IxBC,EAAoC,CAACd,cAE5Be,sBAAQ,KAAMD,EAAdC,CAAkC7C","file":"static/js/39.697ce6f9.chunk.js","sourcesContent":["import React, {useCallback, useState} from 'react';\nimport {FlatList, View} from 'react-native';\nimport {Card, Dialog, Icon, Text} from '../../../../components';\nimport {\n  Questionnaire,\n  createQuestionnaire,\n  getQuestionnaireArray,\n  removeQuestionnaire,\n  selectQuestionnaire,\n} from '../models';\nimport {useColor} from '../../../../hooks';\nimport {useRootDispatch, useRootSelector} from '../../../../utils';\n\nexport var Questionnaires = () => {\n  const questionnaires = useRootSelector(getQuestionnaireArray);\n  const selected = useRootSelector((state) => state.questionnaires.selected);\n  const [actionSheet, setActionSheet] = useState(false);\n  const dispatch = useRootDispatch();\n  const color = useColor();\n  const handleLongPress = useCallback(\n    (id: string) => () => dispatch(removeQuestionnaire(id)),\n    [dispatch],\n  );\n  const handleItemPress = useCallback(\n    (id: string) => () => dispatch(selectQuestionnaire(id)),\n    [dispatch],\n  );\n  const handleActionSheetClose = useCallback(() => setActionSheet(false), []);\n  const handleCreate = useCallback(\n    () => dispatch(createQuestionnaire(String(Date.now()))),\n    [dispatch],\n  );\n  const handleItemMenu = useCallback(() => {\n    setActionSheet((state) => !state);\n  }, []);\n  const renderItem = useCallback(\n    ({item}) => {\n      const length = item.questions.length;\n      const subtitle = `${length} question${length === 1 ? '' : 's'}`;\n      return (\n        <Card\n          onLongPress={handleLongPress(item.id)}\n          onPress={handleItemPress(item.id)}\n          selected={selected === item.id}>\n          <View\n            style={{\n              flexDirection: 'row',\n              justifyContent: 'space-between',\n            }}>\n            <View style={{flex: 0.9}}>\n              <Text title={item.title} type=\"h3\" />\n              <Text title={subtitle} type=\"caption\" />\n            </View>\n            <Icon name=\"dots-horizontal\" onPress={handleItemMenu} />\n          </View>\n        </Card>\n      );\n    },\n    [handleItemMenu, handleItemPress, handleLongPress, selected],\n  );\n\n  const keyExtractor = useCallback((item: Questionnaire) => item.id, []);\n\n  return (\n    <>\n      <FlatList\n        data={questionnaires}\n        extraData={selected}\n        keyExtractor={keyExtractor}\n        renderItem={renderItem}\n      />\n      <Icon\n        color={color.background}\n        fab\n        name=\"plus\"\n        onPress={handleCreate}\n        style={{\n          margin: 10,\n          position: 'absolute',\n          bottom: 0,\n          right: 0,\n        }}\n      />\n      {actionSheet && (\n        <Dialog onBackgroundPress={handleActionSheetClose} title=\"hello\" />\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport {Dimensions, FlatList, View} from 'react-native';\nimport {connect} from 'react-redux';\nimport {Button, Screen, Text} from '../../../components';\nimport {NavigationScreen, navigate} from '../../../models';\nimport {Questionnaires} from './screens/Questionnaires';\n\ninterface DispatchProps {\n  navigate: typeof navigate;\n}\n\ntype Props = DispatchProps;\n\nclass Container extends React.PureComponent<Props> {\n  readonly data = [\n    {\n      choices: [\n        {\n          key: '1',\n          selected: false,\n          title: 'individual',\n        },\n        {\n          key: '2',\n          selected: false,\n          title: 'couple',\n        },\n        {\n          key: '3',\n          selected: false,\n          title: 'teen',\n        },\n      ],\n      key: '1',\n      next: '2',\n      title: 'What type of counseling are you looking for',\n      type: 'radio',\n    },\n    {key: '2', title: '2'},\n    {key: '3', title: '3'},\n    {key: '4', title: '4'},\n    {key: '5', title: '5'},\n  ];\n  output: any = {};\n  readonly width = Dimensions.get('window').width;\n  tableView: any;\n  currentIndex = 0;\n\n  handleViewableItemsChanged = ({viewableItems}: any) => {\n    this.currentIndex = viewableItems[0].index || 0;\n  };\n\n  onProgress = (direction = 1) => {\n    const index = this.currentIndex + direction;\n    if (index < 0) {\n      return;\n    }\n    if (index >= this.data.length) {\n      this.onFinish();\n      return;\n    }\n    this.tableView.scrollToIndex({\n      animated: true,\n      index,\n    });\n  };\n\n  onSelection = (item: any, choice: any) => {\n    this.output = {\n      ...this.output,\n      [item.key]: {\n        ...this.output[item.key],\n        [choice.key]: true,\n      },\n    };\n\n    // this.onProgress();\n  };\n\n  onFinish = () => undefined;\n\n  setRef = (ref: any) => {\n    this.tableView = ref;\n  };\n\n  updateSelection = (item: any, choice: any) => () =>\n    this.onSelection(item, choice);\n\n  updateProgress = (value: number) => () => this.onProgress(value);\n\n  renderItem = ({item}: {item: any}) => {\n    let items: any = <View style={{flex: 1}} />;\n\n    if (item.choices) {\n      items = (\n        <View style={{flex: 1}}>\n          {item.choices.map((choice: any) => {\n            return (\n              <Button\n                key={choice.title}\n                onPress={this.updateSelection(item, choice)}\n                title={choice.title}\n              />\n            );\n          })}\n        </View>\n      );\n    }\n\n    return (\n      <View style={{width: this.width}}>\n        <Text title={item.title} />\n        {items}\n        <View\n          style={{\n            flexDirection: 'row',\n            justifyContent: 'space-around',\n          }}>\n          <Button onPress={this.updateProgress(-1)} title=\"prev\" />\n          <Button onPress={this.updateProgress(1)} title=\"next\" />\n          <Button onPress={this.updateProgress(2)} title=\"next2\" />\n        </View>\n      </View>\n    );\n  };\n\n  nav = (to: NavigationScreen) => () => {\n    const {navigate: nav} = this.props;\n    nav(to);\n  };\n\n  render() {\n    return (\n      <Screen onLeftPress={this.nav('playground')} title=\"Questionnaire\">\n        <FlatList\n          data={this.data}\n          horizontal\n          onViewableItemsChanged={this.handleViewableItemsChanged}\n          pagingEnabled\n          ref={this.setRef}\n          removeClippedSubviews\n          renderItem={this.renderItem}\n          scrollEnabled={false}\n          showsHorizontalScrollIndicator={false}\n          showsVerticalScrollIndicator={false}\n          viewabilityConfig={{\n            itemVisiblePercentThreshold: 50,\n          }}\n        />\n        <Questionnaires />\n      </Screen>\n    );\n  }\n}\n\nconst mapDispatchToProps: DispatchProps = {navigate};\n\nexport default connect(null, mapDispatchToProps)(Container);\n"],"sourceRoot":""}