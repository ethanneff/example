{"version":3,"sources":["../node_modules/react-native-web/dist/vendor/react-native/TouchHistoryMath/index.js","../node_modules/react-native-web/dist/vendor/react-native/PanResponder/index.js","../node_modules/react-native-web/dist/exports/PanResponder/index.js","apps/Playground/SwipeFeed/placeholder.png","apps/Playground/SwipeFeed/index.tsx"],"names":["TouchHistoryMath","centroidDimension","touchHistory","touchesChangedAfter","isXAxis","ofCurrent","touchBank","total","count","oneTouchData","numberActiveTouches","indexOfSingleActiveTouch","touchActive","currentTimeStamp","currentPageX","currentPageY","previousPageX","previousPageY","i","length","touchTrack","undefined","noCentroid","currentCentroidXOfTouchesChangedAfter","currentCentroidYOfTouchesChangedAfter","previousCentroidXOfTouchesChangedAfter","previousCentroidYOfTouchesChangedAfter","currentCentroidX","currentCentroidY","PanResponder","_initializeGestureState","gestureState","moveX","moveY","x0","y0","dx","dy","vx","vy","_accountsForMovesUpTo","_updateGestureStateOnMove","movedAfter","prevX","x","prevY","y","nextDX","nextDY","dt","mostRecentTimeStamp","create","config","interactionState","handle","stateID","Math","random","panHandlers","onStartShouldSetResponder","event","onStartShouldSetPanResponder","onMoveShouldSetResponder","onMoveShouldSetPanResponder","onStartShouldSetResponderCapture","nativeEvent","touches","onStartShouldSetPanResponderCapture","onMoveShouldSetResponderCapture","onMoveShouldSetPanResponderCapture","onResponderGrant","InteractionManager","createInteractionHandle","onPanResponderGrant","onShouldBlockNativeResponder","onResponderReject","clearInteractionHandle","onPanResponderReject","onResponderRelease","onPanResponderRelease","onResponderStart","onPanResponderStart","onResponderMove","onPanResponderMove","onResponderEnd","onPanResponderEnd","onResponderTerminate","onPanResponderTerminate","onResponderTerminationRequest","onPanResponderTerminationRequest","getInteractionHandle","callback","module","exports","formatRelativeDate","date","now","dayjs","years","diff","weeks","days","hours","minutes","SwipeCard","memo","image","height","icon","title","body","button","onSwipeComplete","onSwipePercentChange","cardWidth","useRef","color","useColor","useDriver","useNativeDriver","width","useRootSelector","getWidth","dropShadow","useDropShadow","imageHeight","swipeThreshold","position","Animated","ValueXY","onLayout","useCallback","current","layout","setCardWidth","panResponder","_","gesture","abs","setValue","spring","toValue","start","View","style","left","backgroundColor","background","borderRadius","Theme","padding","p01","borderColor","brand","onPress","flex","flexDirection","source","alignSelf","p02","alignItems","name","size","bold","paddingHorizontal","type","ellipsizeMode","numberOfLines","paddingTop","primary","toUpperCase","initialItems","id","v4","subtract","require","Badge","percent","p06","badgeSize","right","margin","zIndex","justifyContent","danger","adjustsFontSizeToFit","SwipeCards","items","useState","feed","setFeed","state","filter","map","item","index","key","ImagePlaceholder","noPadding","nav","useNav","onLeftPress","to","p04"],"mappings":"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","file":"static/js/8.061d2ff5.chunk.js","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\nvar TouchHistoryMath = {\n  /**\n   * This code is optimized and not intended to look beautiful. This allows\n   * computing of touch centroids that have moved after `touchesChangedAfter`\n   * timeStamp. You can compute the current centroid involving all touches\n   * moves after `touchesChangedAfter`, or you can compute the previous\n   * centroid of all touches that were moved after `touchesChangedAfter`.\n   *\n   * @param {TouchHistoryMath} touchHistory Standard Responder touch track\n   * data.\n   * @param {number} touchesChangedAfter timeStamp after which moved touches\n   * are considered \"actively moving\" - not just \"active\".\n   * @param {boolean} isXAxis Consider `x` dimension vs. `y` dimension.\n   * @param {boolean} ofCurrent Compute current centroid for actively moving\n   * touches vs. previous centroid of now actively moving touches.\n   * @return {number} value of centroid in specified dimension.\n   */\n  centroidDimension: function centroidDimension(touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {\n    var touchBank = touchHistory.touchBank;\n    var total = 0;\n    var count = 0;\n    var oneTouchData = touchHistory.numberActiveTouches === 1 ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;\n\n    if (oneTouchData !== null) {\n      if (oneTouchData.touchActive && oneTouchData.currentTimeStamp > touchesChangedAfter) {\n        total += ofCurrent && isXAxis ? oneTouchData.currentPageX : ofCurrent && !isXAxis ? oneTouchData.currentPageY : !ofCurrent && isXAxis ? oneTouchData.previousPageX : oneTouchData.previousPageY;\n        count = 1;\n      }\n    } else {\n      for (var i = 0; i < touchBank.length; i++) {\n        var touchTrack = touchBank[i];\n\n        if (touchTrack !== null && touchTrack !== undefined && touchTrack.touchActive && touchTrack.currentTimeStamp >= touchesChangedAfter) {\n          var toAdd = void 0; // Yuck, program temporarily in invalid state.\n\n          if (ofCurrent && isXAxis) {\n            toAdd = touchTrack.currentPageX;\n          } else if (ofCurrent && !isXAxis) {\n            toAdd = touchTrack.currentPageY;\n          } else if (!ofCurrent && isXAxis) {\n            toAdd = touchTrack.previousPageX;\n          } else {\n            toAdd = touchTrack.previousPageY;\n          }\n\n          total += toAdd;\n          count++;\n        }\n      }\n    }\n\n    return count > 0 ? total / count : TouchHistoryMath.noCentroid;\n  },\n  currentCentroidXOfTouchesChangedAfter: function currentCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, // isXAxis\n    true // ofCurrent\n    );\n  },\n  currentCentroidYOfTouchesChangedAfter: function currentCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, // isXAxis\n    true // ofCurrent\n    );\n  },\n  previousCentroidXOfTouchesChangedAfter: function previousCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, // isXAxis\n    false // ofCurrent\n    );\n  },\n  previousCentroidYOfTouchesChangedAfter: function previousCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, // isXAxis\n    false // ofCurrent\n    );\n  },\n  currentCentroidX: function currentCentroidX(touchHistory) {\n    return TouchHistoryMath.centroidDimension(touchHistory, 0, // touchesChangedAfter\n    true, // isXAxis\n    true // ofCurrent\n    );\n  },\n  currentCentroidY: function currentCentroidY(touchHistory) {\n    return TouchHistoryMath.centroidDimension(touchHistory, 0, // touchesChangedAfter\n    false, // isXAxis\n    true // ofCurrent\n    );\n  },\n  noCentroid: -1\n};\nexport default TouchHistoryMath;","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport InteractionManager from '../../../exports/InteractionManager';\nimport TouchHistoryMath from '../TouchHistoryMath';\nvar currentCentroidXOfTouchesChangedAfter = TouchHistoryMath.currentCentroidXOfTouchesChangedAfter;\nvar currentCentroidYOfTouchesChangedAfter = TouchHistoryMath.currentCentroidYOfTouchesChangedAfter;\nvar previousCentroidXOfTouchesChangedAfter = TouchHistoryMath.previousCentroidXOfTouchesChangedAfter;\nvar previousCentroidYOfTouchesChangedAfter = TouchHistoryMath.previousCentroidYOfTouchesChangedAfter;\nvar currentCentroidX = TouchHistoryMath.currentCentroidX;\nvar currentCentroidY = TouchHistoryMath.currentCentroidY;\n/**\n * `PanResponder` reconciles several touches into a single gesture. It makes\n * single-touch gestures resilient to extra touches, and can be used to\n * recognize simple multi-touch gestures.\n *\n * By default, `PanResponder` holds an `InteractionManager` handle to block\n * long-running JS events from interrupting active gestures.\n *\n * It provides a predictable wrapper of the responder handlers provided by the\n * [gesture responder system](docs/gesture-responder-system.html).\n * For each handler, it provides a new `gestureState` object alongside the\n * native event object:\n *\n * ```\n * onPanResponderMove: (event, gestureState) => {}\n * ```\n *\n * A native event is a synthetic touch event with the following form:\n *\n *  - `nativeEvent`\n *      + `changedTouches` - Array of all touch events that have changed since the last event\n *      + `identifier` - The ID of the touch\n *      + `locationX` - The X position of the touch, relative to the element\n *      + `locationY` - The Y position of the touch, relative to the element\n *      + `pageX` - The X position of the touch, relative to the root element\n *      + `pageY` - The Y position of the touch, relative to the root element\n *      + `target` - The node id of the element receiving the touch event\n *      + `timestamp` - A time identifier for the touch, useful for velocity calculation\n *      + `touches` - Array of all current touches on the screen\n *\n * A `gestureState` object has the following:\n *\n *  - `stateID` - ID of the gestureState- persisted as long as there at least\n *     one touch on screen\n *  - `moveX` - the latest screen coordinates of the recently-moved touch\n *  - `moveY` - the latest screen coordinates of the recently-moved touch\n *  - `x0` - the screen coordinates of the responder grant\n *  - `y0` - the screen coordinates of the responder grant\n *  - `dx` - accumulated distance of the gesture since the touch started\n *  - `dy` - accumulated distance of the gesture since the touch started\n *  - `vx` - current velocity of the gesture\n *  - `vy` - current velocity of the gesture\n *  - `numberActiveTouches` - Number of touches currently on screen\n *\n * ### Basic Usage\n *\n * ```\n *   componentWillMount: function() {\n *     this._panResponder = PanResponder.create({\n *       // Ask to be the responder:\n *       onStartShouldSetPanResponder: (evt, gestureState) => true,\n *       onStartShouldSetPanResponderCapture: (evt, gestureState) => true,\n *       onMoveShouldSetPanResponder: (evt, gestureState) => true,\n *       onMoveShouldSetPanResponderCapture: (evt, gestureState) => true,\n *\n *       onPanResponderGrant: (evt, gestureState) => {\n *         // The gesture has started. Show visual feedback so the user knows\n *         // what is happening!\n *\n *         // gestureState.d{x,y} will be set to zero now\n *       },\n *       onPanResponderMove: (evt, gestureState) => {\n *         // The most recent move distance is gestureState.move{X,Y}\n *\n *         // The accumulated gesture distance since becoming responder is\n *         // gestureState.d{x,y}\n *       },\n *       onPanResponderTerminationRequest: (evt, gestureState) => true,\n *       onPanResponderRelease: (evt, gestureState) => {\n *         // The user has released all touches while this view is the\n *         // responder. This typically means a gesture has succeeded\n *       },\n *       onPanResponderTerminate: (evt, gestureState) => {\n *         // Another component has become the responder, so this gesture\n *         // should be cancelled\n *       },\n *       onShouldBlockNativeResponder: (evt, gestureState) => {\n *         // Returns whether this component should block native components from becoming the JS\n *         // responder. Returns true by default. Is currently only supported on android.\n *         return true;\n *       },\n *     });\n *   },\n *\n *   render: function() {\n *     return (\n *       <View {...this._panResponder.panHandlers} />\n *     );\n *   },\n *\n * ```\n *\n * ### Working Example\n *\n * To see it in action, try the\n * [PanResponder example in RNTester](https://github.com/facebook/react-native/blob/master/RNTester/js/PanResponderExample.js)\n */\n\nvar PanResponder = {\n  /**\n   *\n   * A graphical explanation of the touch data flow:\n   *\n   * +----------------------------+             +--------------------------------+\n   * | ResponderTouchHistoryStore |             |TouchHistoryMath                |\n   * +----------------------------+             +----------+---------------------+\n   * |Global store of touchHistory|             |Allocation-less math util       |\n   * |including activeness, start |             |on touch history (centroids     |\n   * |position, prev/cur position.|             |and multitouch movement etc)    |\n   * |                            |             |                                |\n   * +----^-----------------------+             +----^---------------------------+\n   *      |                                          |\n   *      | (records relevant history                |\n   *      |  of touches relevant for                 |\n   *      |  implementing higher level               |\n   *      |  gestures)                               |\n   *      |                                          |\n   * +----+-----------------------+             +----|---------------------------+\n   * | ResponderEventPlugin       |             |    |   Your App/Component      |\n   * +----------------------------+             +----|---------------------------+\n   * |Negotiates which view gets  | Low level   |    |             High level    |\n   * |onResponderMove events.     | events w/   |  +-+-------+     events w/     |\n   * |Also records history into   | touchHistory|  |   Pan   |     multitouch +  |\n   * |ResponderTouchHistoryStore. +---------------->Responder+-----> accumulative|\n   * +----------------------------+ attached to |  |         |     distance and  |\n   *                                 each event |  +---------+     velocity.     |\n   *                                            |                                |\n   *                                            |                                |\n   *                                            +--------------------------------+\n   *\n   *\n   *\n   * Gesture that calculates cumulative movement over time in a way that just\n   * \"does the right thing\" for multiple touches. The \"right thing\" is very\n   * nuanced. When moving two touches in opposite directions, the cumulative\n   * distance is zero in each dimension. When two touches move in parallel five\n   * pixels in the same direction, the cumulative distance is five, not ten. If\n   * two touches start, one moves five in a direction, then stops and the other\n   * touch moves fives in the same direction, the cumulative distance is ten.\n   *\n   * This logic requires a kind of processing of time \"clusters\" of touch events\n   * so that two touch moves that essentially occur in parallel but move every\n   * other frame respectively, are considered part of the same movement.\n   *\n   * Explanation of some of the non-obvious fields:\n   *\n   * - moveX/moveY: If no move event has been observed, then `(moveX, moveY)` is\n   *   invalid. If a move event has been observed, `(moveX, moveY)` is the\n   *   centroid of the most recently moved \"cluster\" of active touches.\n   *   (Currently all move have the same timeStamp, but later we should add some\n   *   threshold for what is considered to be \"moving\"). If a palm is\n   *   accidentally counted as a touch, but a finger is moving greatly, the palm\n   *   will move slightly, but we only want to count the single moving touch.\n   * - x0/y0: Centroid location (non-cumulative) at the time of becoming\n   *   responder.\n   * - dx/dy: Cumulative touch distance - not the same thing as sum of each touch\n   *   distance. Accounts for touch moves that are clustered together in time,\n   *   moving the same direction. Only valid when currently responder (otherwise,\n   *   it only represents the drag distance below the threshold).\n   * - vx/vy: Velocity.\n   */\n  _initializeGestureState: function _initializeGestureState(gestureState) {\n    gestureState.moveX = 0;\n    gestureState.moveY = 0;\n    gestureState.x0 = 0;\n    gestureState.y0 = 0;\n    gestureState.dx = 0;\n    gestureState.dy = 0;\n    gestureState.vx = 0;\n    gestureState.vy = 0;\n    gestureState.numberActiveTouches = 0; // All `gestureState` accounts for timeStamps up until:\n\n    gestureState._accountsForMovesUpTo = 0;\n  },\n\n  /**\n   * This is nuanced and is necessary. It is incorrect to continuously take all\n   * active *and* recently moved touches, find the centroid, and track how that\n   * result changes over time. Instead, we must take all recently moved\n   * touches, and calculate how the centroid has changed just for those\n   * recently moved touches, and append that change to an accumulator. This is\n   * to (at least) handle the case where the user is moving three fingers, and\n   * then one of the fingers stops but the other two continue.\n   *\n   * This is very different than taking all of the recently moved touches and\n   * storing their centroid as `dx/dy`. For correctness, we must *accumulate\n   * changes* in the centroid of recently moved touches.\n   *\n   * There is also some nuance with how we handle multiple moved touches in a\n   * single event. With the way `ReactNativeEventEmitter` dispatches touches as\n   * individual events, multiple touches generate two 'move' events, each of\n   * them triggering `onResponderMove`. But with the way `PanResponder` works,\n   * all of the gesture inference is performed on the first dispatch, since it\n   * looks at all of the touches (even the ones for which there hasn't been a\n   * native dispatch yet). Therefore, `PanResponder` does not call\n   * `onResponderMove` passed the first dispatch. This diverges from the\n   * typical responder callback pattern (without using `PanResponder`), but\n   * avoids more dispatches than necessary.\n   */\n  _updateGestureStateOnMove: function _updateGestureStateOnMove(gestureState, touchHistory) {\n    gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n    gestureState.moveX = currentCentroidXOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);\n    gestureState.moveY = currentCentroidYOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);\n    var movedAfter = gestureState._accountsForMovesUpTo;\n    var prevX = previousCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n    var x = currentCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n    var prevY = previousCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n    var y = currentCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n    var nextDX = gestureState.dx + (x - prevX);\n    var nextDY = gestureState.dy + (y - prevY); // TODO: This must be filtered intelligently.\n\n    var dt = touchHistory.mostRecentTimeStamp - gestureState._accountsForMovesUpTo;\n    gestureState.vx = (nextDX - gestureState.dx) / dt;\n    gestureState.vy = (nextDY - gestureState.dy) / dt;\n    gestureState.dx = nextDX;\n    gestureState.dy = nextDY;\n    gestureState._accountsForMovesUpTo = touchHistory.mostRecentTimeStamp;\n  },\n\n  /**\n   * @param {object} config Enhanced versions of all of the responder callbacks\n   * that provide not only the typical `ResponderSyntheticEvent`, but also the\n   * `PanResponder` gesture state.  Simply replace the word `Responder` with\n   * `PanResponder` in each of the typical `onResponder*` callbacks. For\n   * example, the `config` object would look like:\n   *\n   *  - `onMoveShouldSetPanResponder: (e, gestureState) => {...}`\n   *  - `onMoveShouldSetPanResponderCapture: (e, gestureState) => {...}`\n   *  - `onStartShouldSetPanResponder: (e, gestureState) => {...}`\n   *  - `onStartShouldSetPanResponderCapture: (e, gestureState) => {...}`\n   *  - `onPanResponderReject: (e, gestureState) => {...}`\n   *  - `onPanResponderGrant: (e, gestureState) => {...}`\n   *  - `onPanResponderStart: (e, gestureState) => {...}`\n   *  - `onPanResponderEnd: (e, gestureState) => {...}`\n   *  - `onPanResponderRelease: (e, gestureState) => {...}`\n   *  - `onPanResponderMove: (e, gestureState) => {...}`\n   *  - `onPanResponderTerminate: (e, gestureState) => {...}`\n   *  - `onPanResponderTerminationRequest: (e, gestureState) => {...}`\n   *  - `onShouldBlockNativeResponder: (e, gestureState) => {...}`\n   *\n   *  In general, for events that have capture equivalents, we update the\n   *  gestureState once in the capture phase and can use it in the bubble phase\n   *  as well.\n   *\n   *  Be careful with onStartShould* callbacks. They only reflect updated\n   *  `gestureState` for start/end events that bubble/capture to the Node.\n   *  Once the node is the responder, you can rely on every start/end event\n   *  being processed by the gesture and `gestureState` being updated\n   *  accordingly. (numberActiveTouches) may not be totally accurate unless you\n   *  are the responder.\n   */\n  create: function create(config) {\n    var interactionState = {\n      handle: null\n    };\n    var gestureState = {\n      // Useful for debugging\n      stateID: Math.random(),\n      moveX: 0,\n      moveY: 0,\n      x0: 0,\n      y0: 0,\n      dx: 0,\n      dy: 0,\n      vx: 0,\n      vy: 0,\n      numberActiveTouches: 0,\n      _accountsForMovesUpTo: 0\n    };\n    var panHandlers = {\n      onStartShouldSetResponder: function onStartShouldSetResponder(event) {\n        return config.onStartShouldSetPanResponder == null ? false : config.onStartShouldSetPanResponder(event, gestureState);\n      },\n      onMoveShouldSetResponder: function onMoveShouldSetResponder(event) {\n        return config.onMoveShouldSetPanResponder == null ? false : config.onMoveShouldSetPanResponder(event, gestureState);\n      },\n      onStartShouldSetResponderCapture: function onStartShouldSetResponderCapture(event) {\n        // TODO: Actually, we should reinitialize the state any time\n        // touches.length increases from 0 active to > 0 active.\n        if (event.nativeEvent.touches.length === 1) {\n          PanResponder._initializeGestureState(gestureState);\n        }\n\n        gestureState.numberActiveTouches = event.touchHistory.numberActiveTouches;\n        return config.onStartShouldSetPanResponderCapture != null ? config.onStartShouldSetPanResponderCapture(event, gestureState) : false;\n      },\n      onMoveShouldSetResponderCapture: function onMoveShouldSetResponderCapture(event) {\n        var touchHistory = event.touchHistory; // Responder system incorrectly dispatches should* to current responder\n        // Filter out any touch moves past the first one - we would have\n        // already processed multi-touch geometry during the first event.\n\n        if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {\n          return false;\n        }\n\n        PanResponder._updateGestureStateOnMove(gestureState, touchHistory);\n\n        return config.onMoveShouldSetPanResponderCapture ? config.onMoveShouldSetPanResponderCapture(event, gestureState) : false;\n      },\n      onResponderGrant: function onResponderGrant(event) {\n        if (!interactionState.handle) {\n          interactionState.handle = InteractionManager.createInteractionHandle();\n        }\n\n        gestureState.x0 = currentCentroidX(event.touchHistory);\n        gestureState.y0 = currentCentroidY(event.touchHistory);\n        gestureState.dx = 0;\n        gestureState.dy = 0;\n\n        if (config.onPanResponderGrant) {\n          config.onPanResponderGrant(event, gestureState);\n        } // TODO: t7467124 investigate if this can be removed\n\n\n        return config.onShouldBlockNativeResponder == null ? true : config.onShouldBlockNativeResponder(event, gestureState);\n      },\n      onResponderReject: function onResponderReject(event) {\n        clearInteractionHandle(interactionState, config.onPanResponderReject, event, gestureState);\n      },\n      onResponderRelease: function onResponderRelease(event) {\n        clearInteractionHandle(interactionState, config.onPanResponderRelease, event, gestureState);\n\n        PanResponder._initializeGestureState(gestureState);\n      },\n      onResponderStart: function onResponderStart(event) {\n        var touchHistory = event.touchHistory;\n        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n\n        if (config.onPanResponderStart) {\n          config.onPanResponderStart(event, gestureState);\n        }\n      },\n      onResponderMove: function onResponderMove(event) {\n        var touchHistory = event.touchHistory; // Guard against the dispatch of two touch moves when there are two\n        // simultaneously changed touches.\n\n        if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {\n          return;\n        } // Filter out any touch moves past the first one - we would have\n        // already processed multi-touch geometry during the first event.\n\n\n        PanResponder._updateGestureStateOnMove(gestureState, touchHistory);\n\n        if (config.onPanResponderMove) {\n          config.onPanResponderMove(event, gestureState);\n        }\n      },\n      onResponderEnd: function onResponderEnd(event) {\n        var touchHistory = event.touchHistory;\n        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n        clearInteractionHandle(interactionState, config.onPanResponderEnd, event, gestureState);\n      },\n      onResponderTerminate: function onResponderTerminate(event) {\n        clearInteractionHandle(interactionState, config.onPanResponderTerminate, event, gestureState);\n\n        PanResponder._initializeGestureState(gestureState);\n      },\n      onResponderTerminationRequest: function onResponderTerminationRequest(event) {\n        return config.onPanResponderTerminationRequest == null ? true : config.onPanResponderTerminationRequest(event, gestureState);\n      }\n    };\n    return {\n      panHandlers: panHandlers,\n      getInteractionHandle: function getInteractionHandle() {\n        return interactionState.handle;\n      }\n    };\n  }\n};\n\nfunction clearInteractionHandle(interactionState, callback, event, gestureState) {\n  if (interactionState.handle) {\n    InteractionManager.clearInteractionHandle(interactionState.handle);\n    interactionState.handle = null;\n  }\n\n  if (callback) {\n    callback(event, gestureState);\n  }\n}\n\nexport default PanResponder;","import PanResponder from '../../vendor/react-native/PanResponder';\nexport default PanResponder;","module.exports = __webpack_public_path__ + \"static/media/placeholder.a6e14803.png\";","import React, {memo, useCallback, useRef, useState} from 'react';\nimport {\n  Animated,\n  Image,\n  ImageSourcePropType,\n  PanResponder,\n  View,\n} from 'react-native';\nimport dayjs, {Dayjs} from 'dayjs';\nimport {v4} from 'uuid';\nimport {Card, Icon, Screen, Text, TouchableOpacity} from '../../../components';\nimport {useColor, useDropShadow, useNativeDriver, useNav} from '../../../hooks';\nimport {getWidth} from '../../../models';\nimport {Theme, useRootSelector} from '../../../utils';\nimport 'react-native-get-random-values';\n\ninterface SwipeCard extends SwipeItem {\n  index: number;\n  height: number;\n  onSwipeComplete(): void;\n  onSwipePercentChange(percent: number): void;\n}\n\nexport const formatRelativeDate = (date: Dayjs) => {\n  const now = dayjs();\n  const years = now.diff(date, 'year');\n  const weeks = now.diff(date, 'week');\n  const days = now.diff(date, 'day');\n  const hours = now.diff(date, 'hour');\n  const minutes = now.diff(date, 'minute');\n  return years\n    ? `${years}y`\n    : weeks\n    ? `${weeks}w`\n    : days\n    ? `${days}d`\n    : hours\n    ? `${hours}h`\n    : minutes\n    ? `${minutes}m`\n    : '';\n};\n\nconst SwipeCard = memo(function SwipeCard({\n  image,\n  height,\n  icon,\n  title,\n  date,\n  body,\n  button,\n  onSwipeComplete,\n  onSwipePercentChange,\n}: SwipeCard) {\n  const cardWidth = useRef(0);\n  const color = useColor();\n  const useDriver = useNativeDriver();\n  const width = useRootSelector(getWidth);\n  const dropShadow = useDropShadow(4);\n  const imageHeight = height / 1.5;\n  const swipeThreshold = width / 3;\n  const touchThreshold = 50;\n  const position = new Animated.ValueXY();\n\n  const onLayout = useCallback(\n    (event) => {\n      cardWidth.current = event.nativeEvent.layout.width;\n    },\n    [cardWidth],\n  );\n\n  const setCardWidth = useCallback(\n    (dx: number) => {\n      onSwipePercentChange(1 - dx / cardWidth.current);\n    },\n    [cardWidth, onSwipePercentChange],\n  );\n\n  const panResponder = PanResponder.create({\n    onStartShouldSetPanResponder: () => true,\n    onMoveShouldSetPanResponder: (_, gesture) =>\n      Math.abs(gesture.dx) > touchThreshold ||\n      Math.abs(gesture.dy) > touchThreshold,\n    onPanResponderMove: (_, gesture) => {\n      setCardWidth(gesture.dx);\n      position.setValue({x: gesture.dx, y: gesture.dy});\n    },\n    onPanResponderRelease: (_, gesture) => {\n      const x =\n        gesture.dx > swipeThreshold\n          ? width\n          : gesture.dx < -swipeThreshold\n          ? -width\n          : 0;\n      Animated.spring(position, {\n        toValue: {x, y: 0},\n        useNativeDriver: useDriver,\n      }).start();\n    },\n  });\n\n  return (\n    <Animated.View\n      onLayout={onLayout}\n      {...panResponder.panHandlers}\n      style={{\n        position: 'absolute',\n        width: '100%',\n        left: position.x,\n        height: height,\n        backgroundColor: color.background,\n        borderRadius: Theme.padding.p01,\n        borderColor: color.brand,\n        ...dropShadow,\n      }}>\n      <TouchableOpacity onPress={onSwipeComplete} style={{flex: 1}}>\n        <View style={{flex: 1, flexDirection: 'row'}}>\n          {image && (\n            <Image\n              source={image}\n              style={{\n                height: imageHeight,\n                width: imageHeight,\n                alignSelf: 'center',\n              }}\n            />\n          )}\n          <View style={{flex: 1, padding: Theme.padding.p02}}>\n            <View\n              style={{\n                flexDirection: 'row',\n                alignItems: 'center',\n              }}>\n              <Icon name={icon} size={15} />\n              <Text\n                bold\n                style={{paddingHorizontal: Theme.padding.p01}}\n                title={title}\n                type=\"overline\"\n              />\n              <Text title={formatRelativeDate(date)} />\n            </View>\n            <Text\n              ellipsizeMode=\"tail\"\n              numberOfLines={2}\n              style={{flex: 1, paddingTop: Theme.padding.p02}}\n              title={body}\n            />\n            <Text style={{color: color.primary}} title={button.toUpperCase()} />\n          </View>\n        </View>\n      </TouchableOpacity>\n    </Animated.View>\n  );\n});\n\ninterface SwipeItem {\n  id: string;\n  image: ImageSourcePropType | null;\n  title: string;\n  icon: string;\n  date: Dayjs;\n  body: string;\n  button: string;\n  onPress(): void;\n}\n\nconst initialItems: SwipeItem[] = [\n  {\n    id: v4(),\n    image: null,\n    title: 'Price Movement',\n    icon: 'arrow-bottom-right',\n    date: dayjs().subtract(5, 'minute'),\n    body: 'BABA is down 4.41% to $204.433.',\n    button: 'View BABA',\n    onPress: () => undefined,\n  },\n  {\n    id: v4(),\n    image: null,\n    title: 'Marketwatch',\n    icon: 'file-document-box-outline',\n    date: dayjs().subtract(11, 'hour'),\n    body:\n      'Disney heiress Abigail Disney and other superrich American demand the 1% pay higher taxes than other Americans.',\n    button: 'View Article',\n    onPress: () => undefined,\n  },\n  {\n    id: v4(),\n    image: null,\n    title: 'Reuters',\n    icon: 'book',\n    date: dayjs().subtract(1, 'day'),\n    body:\n      \"Amazon files motion to halt Microsoft's work on Pentagon's JEDI contract\",\n    button: 'View Article',\n    onPress: () => undefined,\n  },\n  {\n    id: v4(),\n    image: require('./placeholder.png'),\n    title: 'Congratulations',\n    icon: 'star-outline',\n    date: dayjs(),\n    body: \"You're invited! Start trading Bitcoin & Ethereum\",\n    button: 'Get Started',\n    onPress: () => undefined,\n  },\n  {\n    id: v4(),\n    image: require('./placeholder.png'),\n    title: 'Enjoying robinhood?',\n    icon: 'star-outline',\n    date: dayjs(),\n    body:\n      \"Invite your friends! When they sign up, you'll both get a free stock\",\n    button: 'Invite friends',\n    onPress: () => undefined,\n  },\n  {\n    id: v4(),\n    image: null,\n    title: 'Introducing cards',\n    icon: 'lightbulb-outline',\n    date: dayjs(),\n    body:\n      'Swipe through cards to see your personalized notifications and news stories.',\n    button: 'Swipe to dismiss',\n    onPress: () => undefined, // complete\n  },\n];\n\ninterface BadgeProps {\n  count: number;\n  percent: number;\n}\n\nconst Badge = memo(function Badge({count, percent}: BadgeProps) {\n  const size = Theme.padding.p06;\n  const badgeSize = size * percent;\n  const color = useColor();\n  return (\n    <View\n      style={{\n        position: 'absolute',\n        right: 0,\n        width: size,\n        height: size,\n        margin: Theme.padding.p01,\n        zIndex: count * 10,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}>\n      <View\n        style={{\n          width: badgeSize,\n          height: badgeSize,\n          borderRadius: size,\n          backgroundColor: color.danger,\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}>\n        <Text\n          adjustsFontSizeToFit\n          style={{color: color.background}}\n          title={`${count}`}\n        />\n      </View>\n    </View>\n  );\n});\n\ninterface SwipeCardsProps {\n  height?: number;\n  items: SwipeItem[];\n}\n\nconst SwipeCards = memo(function SwipeCardList({\n  height = 100,\n  items,\n}: SwipeCardsProps) {\n  const [feed, setFeed] = useState({\n    items,\n    percent: 1,\n  });\n\n  const onSwipeComplete = useCallback(() => {\n    setFeed((state) => ({\n      ...state,\n      percent: 1,\n      items: state.items.filter((_, i) => i !== state.items.length - 1),\n    }));\n  }, []);\n\n  const onSwipePercentChange = useCallback((percent: number) => {\n    setFeed((state) => ({\n      ...state,\n      percent,\n    }));\n  }, []);\n\n  return !feed.items.length ? null : (\n    <View style={{height}}>\n      {feed.items.map((item, index) => (\n        <SwipeCard\n          {...item}\n          height={height}\n          index={index}\n          key={item.id}\n          onSwipeComplete={onSwipeComplete}\n          onSwipePercentChange={onSwipePercentChange}\n        />\n      ))}\n      <Badge count={feed.items.length} percent={feed.percent} />\n    </View>\n  );\n});\n\nconst ImagePlaceholder = memo(function ImagePlaceholder() {\n  return (\n    <Card noPadding>\n      <Image\n        source={require('./placeholder.png')}\n        style={{width: '100%', height: 100, borderRadius: 4}}\n      />\n    </Card>\n  );\n});\n\nexport default memo(function SwipeFeed() {\n  const nav = useNav();\n  return (\n    <Screen onLeftPress={nav.to('playground')} title=\"Swipe Feed\">\n      <View style={{padding: Theme.padding.p04}}>\n        <ImagePlaceholder />\n        <ImagePlaceholder />\n        <SwipeCards items={initialItems} />\n        <ImagePlaceholder />\n        <ImagePlaceholder />\n        <ImagePlaceholder />\n        <ImagePlaceholder />\n        <ImagePlaceholder />\n        <ImagePlaceholder />\n      </View>\n    </Screen>\n  );\n});\n"],"sourceRoot":""}