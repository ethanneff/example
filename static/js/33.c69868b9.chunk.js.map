{"version":3,"sources":["apps/Debug/screens/Reminder/Reminders.tsx","apps/Debug/screens/Reminder/OneTime.tsx","apps/Debug/screens/Reminder/Radio.tsx","apps/Debug/screens/Reminder/CreateReminderModal.tsx","apps/Debug/screens/Reminder/index.tsx"],"names":["memo","props","renderItem","useCallback","item","index","title","format","button","reminders","length","FlatList","inverted","keyExtractor","id","style","flex","data","laterToday","dayjs","add","set","evening","tomorrow","nextWeek","nextMonth","startOf","yesterday","subtract","buttons","description","value","day","onPress","View","map","TouchableOpacity","key","alignSelf","flexDirection","justifyContent","name","size","Theme","padding","p04","paddingLeft","p02","horizontal","primary","onChange","reminderTypes","useState","state","setState","handleReminderTypePress","type","onBackgroundPress","h2","center","onOneTimePress","nav","useNav","modals","customDate","createReminder","form","setForm","handleOneTimeReminder","date","isBefore","prev","String","Date","now","valueOf","handleCustomDateClose","handleCreateReminder","handleCreateReminderClose","onLeftPress","to"],"mappings":"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","file":"static/js/33.c69868b9.chunk.js","sourcesContent":["import { FlatList } from \"react-native\";\nimport { Text } from \"../../../../components\";\nimport React, { memo, useCallback } from \"react\";\nimport { Reminder } from \".\";\n\ninterface Props {\n  reminders: Reminder[];\n}\n\nexport default memo(function Reminders(props: Props) {\n  const renderItem = useCallback(\n    ({ item, index }) => \n      <Text title={item.format} button={index === props.reminders.length - 1} />\n    ,\n    [props]\n  );\n\n  return (\n    <FlatList\n      inverted\n      keyExtractor={item => item.id}\n      style={{ flex: 1 }}\n      data={props.reminders}\n      renderItem={renderItem}\n    />\n  );\n});\n","import dayjs, { Dayjs } from \"dayjs\";\nimport React, { memo } from \"react\";\nimport { View, TouchableOpacity } from \"react-native\";\nimport { Icon, Text } from \"../../../../components\";\nimport { Theme } from \"../../../../utils\";\n\nconst daysOfWeek = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n\nconst laterToday = dayjs()\n  .add(3, \"hour\")\n  .add(30, \"minute\")\n  .set(\"minute\", 0);\n\nconst evening = dayjs()\n  .set(\"hour\", 18)\n  .set(\"minute\", 0);\n\nconst tomorrow = dayjs()\n  .add(1, \"day\")\n  .set(\"hour\", 6)\n  .set(\"minute\", 0);\n\nconst nextWeek = dayjs()\n  .add(1, \"week\")\n  .set(\"hour\", 6)\n  .set(\"minute\", 0)\n  .set(\"day\", 0);\n\nconst nextMonth = dayjs()\n  .startOf(\"month\")\n  .add(2, \"month\")\n  .set(\"hour\", 6)\n  .set(\"minute\", 0);\n\nconst yesterday = dayjs().subtract(1, \"day\");\n\nconst buttons = [\n  {\n    title: \"Later today\",\n    description: laterToday.format(\"hh:mm A\"),\n    value: laterToday\n  },\n  {\n    title: \"This Evening\",\n    description: evening.format(\"hh:mm A\"),\n    value: evening\n  },\n  {\n    title: \"Tomorrow\",\n    description: `${daysOfWeek[tomorrow.day()]} ${tomorrow.format(\"hh:mm A\")}`,\n    value: tomorrow\n  },\n  {\n    title: \"Next Week\",\n    description: `${nextWeek.format(\"MMM DD, hh:mm A\")}`,\n    value: nextWeek\n  },\n  {\n    title: \"Someday\",\n    description: ``,\n    value: nextMonth\n  },\n  {\n    title: \"Custom\",\n    description: ``,\n    value: yesterday\n  }\n];\n\ninterface Props {\n  onPress: (value: Dayjs) => () => void;\n}\n\nexport default memo(function OneTime({ onPress }: Props) {\n  return (\n    <View>\n      {buttons.map(button => \n        <TouchableOpacity\n          key={button.title}\n          style={{\n            alignSelf: \"center\",\n            flexDirection: \"row\",\n            justifyContent: \"space-between\"\n          }}\n          onPress={onPress(button.value)}\n        >\n          <Icon name=\"alarm\" size={Theme.padding.p04} />\n          <Text\n            title={button.title}\n            style={{ paddingLeft: Theme.padding.p02, flex: 1 }}\n          />\n          <Text title={button.description} />\n        </TouchableOpacity>\n      )}\n    </View>\n  );\n});\n","import React, { memo } from \"react\";\nimport { View } from \"react-native\";\nimport { Button } from \"../../../../components\";\n\ninterface Props {\n  buttons: string[];\n  horizontal?: boolean;\n  value?: string;\n  onChange: (id: string) => () => void;\n}\n\nexport default memo(function Radio(props: Props) {\n  return (\n    <View\n      style={{\n        justifyContent: \"center\",\n        flexDirection: props.horizontal ? \"row\" : \"column\"\n      }}\n    >\n      {props.buttons.map(button => \n        <Button\n          key={button}\n          title={button}\n          primary={button === props.value}\n          onPress={props.onChange(button)}\n        />\n      )}\n    </View>\n  );\n});\n","import React, { memo, useState, useCallback } from \"react\";\nimport { View } from \"react-native\";\nimport { Text, Button, Modal } from \"../../../../components\";\nimport OneTime from \"./OneTime\";\nimport Radio from \"./Radio\";\nimport { Dayjs } from \"dayjs\";\n\ntype ReminderType = \"one time\" | \"repeat\" | \"location\";\nconst reminderTypes: ReminderType[] = [\"one time\", \"repeat\", \"location\"];\n\ninterface Props {\n  onBackgroundPress: () => void;\n  onOneTimePress: (date: Dayjs) => () => void;\n}\n\nexport default memo(function CreateReminderModal(props: Props) {\n  const [state, setState] = useState<ReminderType>(\"one time\");\n\n  const handleReminderTypePress = useCallback(type => () => setState(type), []);\n\n  return (\n    <Modal onBackgroundPress={props.onBackgroundPress}>\n      <Text h2 title=\"Create Reminder\" center />\n      <Radio\n        buttons={reminderTypes}\n        horizontal\n        value={state}\n        onChange={handleReminderTypePress}\n      />\n      {state === \"one time\" ? \n        <OneTime onPress={props.onOneTimePress} />\n       : state === \"repeat\" ? \n        <View>\n          <View>\n            <Button title=\"daily\" />\n            <Button title=\"weekly\" />\n            <Button title=\"monthly\" />\n            <Button title=\"yearly\" />\n          </View>\n        </View>\n       : state === \"location\" ? \n        <View></View>\n       : \n        <Text title=\"invalid form type\" />\n      }\n    </Modal>\n  );\n});\n","import React, { memo, useState, useCallback } from \"react\";\nimport { Screen, Text, Button, Modal } from \"../../../../components\";\nimport { useNav } from \"../../../../hooks\";\nimport dayjs, { Dayjs } from \"dayjs\";\nimport Reminders from \"./Reminders\";\nimport CreateReminderModal from \"./CreateReminderModal\";\n\ntype ReminderType = \"one time\" | \"repeat\" | \"location\";\nexport type Reminder = {\n  id: string;\n  date: number;\n  format: string;\n};\ntype State = {\n  type: ReminderType;\n  reminders: Reminder[];\n  modals: {\n    customDate: boolean;\n    createReminder: boolean;\n  };\n};\n\nexport default memo(function DebugReminder() {\n  const nav = useNav();\n  const [form, setForm] = useState<State>({\n    type: \"one time\",\n    reminders: [],\n    modals: {\n      customDate: false,\n      createReminder: false\n    }\n  });\n\n  const handleOneTimeReminder = useCallback(\n    (date: Dayjs) => () => {\n      if (date.isBefore(dayjs())) {\n        setForm(prev => ({\n          ...prev,\n          modals: { ...prev.modals, createReminder: false, customDate: true }\n        }));\n        return;\n      }\n      setForm(prev => ({\n        ...prev,\n        modals: {\n          ...prev.modals,\n          createReminder: false\n        },\n        reminders: [\n          ...prev.reminders,\n          {\n            id: String(Date.now()),\n            date: date.valueOf(),\n            format: date.format(\"MMM DD, YYYY hh:mm A\")\n          }\n        ]\n      }));\n    },\n    []\n  );\n\n  const handleCustomDateClose = useCallback(() => {\n    setForm(prev => ({\n      ...prev,\n      modals: { ...prev.modals, customDate: false }\n    }));\n  }, []);\n\n  const handleCreateReminder = useCallback(() => {\n    setForm(prev => ({\n      ...prev,\n      modals: { ...prev.modals, createReminder: true }\n    }));\n  }, []);\n\n  const handleCreateReminderClose = useCallback(() => {\n    setForm(prev => ({\n      ...prev,\n      modals: { ...prev.modals, createReminder: false }\n    }));\n  }, []);\n\n  return (\n    <>\n      <Screen onLeftPress={nav.to(\"debug\")} title=\"Reminder\">\n        <Button title=\"create reminder\" onPress={handleCreateReminder} />\n        <Text h2 title=\"Reminders\" center />\n        <Reminders reminders={form.reminders} />\n      </Screen>\n      {form.modals.customDate && \n        <Modal onBackgroundPress={handleCustomDateClose}>\n          <Text title=\"hello\" />\n        </Modal>\n      }\n      {form.modals.createReminder && \n        <CreateReminderModal\n          onBackgroundPress={handleCreateReminderClose}\n          onOneTimePress={handleOneTimeReminder}\n        />\n      }\n    </>\n  );\n});\n"],"sourceRoot":""}