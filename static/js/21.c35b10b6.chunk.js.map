{"version":3,"sources":["apps/Checklists/screens/ListUpdate/index.tsx"],"names":["memo","nav","useNav","dispatch","useRootDispatch","checklist","useRootSelector","getCurrentChecklist","useState","showDeleteDialog","setShowDeleteDialog","name","description","form","setForm","isInvalidForm","trim","length","handleDeleteCancel","onLeftPress","to","title","gutter","value","onChangeText","state","onPress","now","Date","updateList","updatedAt","navigate","color","onConfirmButtonPress","removeList","id","onBackgroundPress","onCancelButtonPress"],"mappings":"wLAOeA,0BAAK,WAClB,IAAMC,EAAMC,cACNC,EAAWC,cACXC,EAAYC,YAAgBC,KAHW,EAIGC,oBAAS,GAJZ,mBAItCC,EAJsC,KAIpBC,EAJoB,OAKrBF,mBAAS,CAC/BG,KAAMN,EAAUM,KAChBC,YAAaP,EAAUO,aAAe,KAPK,mBAKtCC,EALsC,KAKhCC,EALgC,KASvCC,EAA4C,IAA5BF,EAAKF,KAAKK,OAAOC,OA8BjCC,EAAqB,kBAAMR,GAAoB,IAErD,OACE,oCACE,kBAAC,IAAD,CACES,YAAalB,EAAImB,GAAG,cACpBC,MAAO,mBACPC,QAAM,GAEN,kBAAC,IAAD,CACED,MAAM,OACNE,MAAOV,EAAKF,KACZa,aAxCiB,SAACb,GAAD,OACvBG,GAAQ,SAAAW,GAAK,sBAAUA,EAAV,CAAiBd,eAyC1B,kBAAC,IAAD,CACEU,MAAM,cACNE,MAAOV,EAAKD,YACZY,aA3CwB,SAACZ,GAAD,OAC9BE,GAAQ,SAAAW,GAAK,sBAAUA,EAAV,CAAiBb,sBA4C1B,kBAAC,IAAD,CAAQS,MAAM,SAASK,QA3CR,WAAO,IAClBf,EAAsBE,EAAtBF,KAAMC,EAAgBC,EAAhBD,YACRe,EAAMC,KAAKD,MACbZ,IAGJZ,EACE0B,YAAW,eACNxB,EADK,CAERM,OACAC,cACAkB,UAAWH,MAGfxB,EAAS4B,YAAS,mBA8Bd,kBAAC,IAAD,CAAQV,MAAM,SAASK,QArBH,kBAAMhB,GAAoB,IAqBKsB,MAAM,YAE1DvB,GACC,kBAAC,IAAD,CACEY,MAAM,gBACNY,qBAhCa,WACnBvB,GAAoB,GACpBP,EAAS+B,YAAW7B,EAAU8B,KAC9BhC,EAAS4B,YAAS,gBA8BZK,kBAAmBlB,EACnBmB,oBAAqBnB","file":"static/js/21.c35b10b6.chunk.js","sourcesContent":["import React, { memo, useState } from 'react';\nimport { Button, Screen, TextInput, Dialog } from '../../../../components';\nimport { getCurrentChecklist, removeList, updateList } from '../../models';\nimport { useNav } from '../../../../hooks';\nimport { useRootSelector, useRootDispatch } from '../../../../utils';\nimport { navigate } from '../../../../models';\n\nexport default memo(function ChecklistUpdate() {\n  const nav = useNav();\n  const dispatch = useRootDispatch();\n  const checklist = useRootSelector(getCurrentChecklist);\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false);\n  const [form, setForm] = useState({\n    name: checklist.name,\n    description: checklist.description || '',\n  });\n  const isInvalidForm = form.name.trim().length === 0;\n\n  const handleNameChange = (name: string) =>\n    setForm(state => ({ ...state, name }));\n  const handleDescriptionChange = (description: string) =>\n    setForm(state => ({ ...state, description }));\n  const handleSubmit = () => {\n    const { name, description } = form;\n    const now = Date.now();\n    if (isInvalidForm) {\n      return;\n    }\n    dispatch(\n      updateList({\n        ...checklist,\n        name,\n        description,\n        updatedAt: now,\n      })\n    );\n    dispatch(navigate('checklists'));\n  };\n\n  const handleDelete = () => {\n    setShowDeleteDialog(false);\n    dispatch(removeList(checklist.id));\n    dispatch(navigate('checklists'));\n  };\n\n  const handleDeletePress = () => setShowDeleteDialog(true);\n  const handleDeleteCancel = () => setShowDeleteDialog(false);\n\n  return (\n    <>\n      <Screen\n        onLeftPress={nav.to('checklists')}\n        title={'Update Checklist'}\n        gutter\n      >\n        <TextInput\n          title=\"name\"\n          value={form.name}\n          onChangeText={handleNameChange}\n        />\n        <TextInput\n          title=\"description\"\n          value={form.description}\n          onChangeText={handleDescriptionChange}\n        />\n        <Button title=\"update\" onPress={handleSubmit} />\n        <Button title=\"delete\" onPress={handleDeletePress} color=\"danger\" />\n      </Screen>\n      {showDeleteDialog && (\n        <Dialog\n          title=\"are you sure?\"\n          onConfirmButtonPress={handleDelete}\n          onBackgroundPress={handleDeleteCancel}\n          onCancelButtonPress={handleDeleteCancel}\n        />\n      )}\n    </>\n  );\n});\n"],"sourceRoot":""}