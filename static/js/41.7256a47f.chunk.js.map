{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toArray.js","apps/Playground/Stopwatch/Timer.tsx","apps/Playground/Stopwatch/ButtonRound.tsx","apps/Playground/Stopwatch/Lap.tsx","apps/Playground/Stopwatch/LapsTable.tsx","apps/Playground/Stopwatch/ButtonsRow.tsx","apps/Playground/Stopwatch/index.tsx"],"names":["_toArray","arr","arrayWithHoles","iterableToArray","unsupportedIterableToArray","nonIterableRest","memo","interval","style","pad","n","toString","minutes","Math","floor","seconds","milliseconds","styles","StyleSheet","create","timerContainer","flexDirection","View","title","substr","color","background","onPress","disabled","button","alignItems","borderRadius","height","justifyContent","width","buttonBorder","borderWidth","buttonTitle","fontSize","handlePress","useCallback","activeOpacity","backgroundColor","num","fastest","slowest","useColor","success","lap","borderColor","secondary","borderTopWidth","paddingVertical","lapText","fontFamily","danger","lapStyle","undefined","laps","timer","finishedLaps","slice","min","Number","MAX_SAFE_INTEGER","max","MIN_SAFE_INTEGER","length","forEach","scrollView","alignSelf","ScrollView","map","index","key","children","buttonsRow","marginBottom","marginTop","nav","useNav","useState","now","start","state","setState","useRef","elapsed","reduce","total","curr","container","text","flex","paddingHorizontal","paddingTop","fontWeight","useEffect","current","clearTimeout","timestamp","Date","getTime","firstLap","other","stop","clearInterval","reset","run","setInterval","prev","resume","onLeftPress","to"],"mappings":"oKAIe,SAASA,EAASC,GAC/B,OAAO,OAAAC,EAAA,GAAeD,IAAQ,OAAAE,EAAA,GAAgBF,IAAQ,OAAAG,EAAA,GAA2BH,IAAQ,OAAAI,EAAA,K,4DCI5EC,kBAAK,YAA+C,IAA/BC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,MACtCC,EAAM,SAACC,GAAD,OACTA,EAAI,GAAK,IAAMA,EAAEC,WAAaD,GAAGC,YAC9BC,EAAUC,KAAKC,MAAMP,EAAW,KAChCQ,EAAUF,KAAKC,MAAOP,EAAW,IAAS,KAC1CS,EAAeH,KAAKC,MAAOP,EAAW,IAAS,KAC/CU,EAASC,IAAWC,OAAO,CAC/BC,eAAgB,CACdC,cAAe,SAGnB,OACE,kBAACC,EAAA,EAAD,CAAMd,MAAOS,EAAOG,gBAClB,kBAAC,IAAD,CAAMZ,MAAOA,EAAOe,MAAK,UAAKd,EAAIG,GAAT,OACzB,kBAAC,IAAD,CAAMJ,MAAOA,EAAOe,MAAK,UAAKd,EAAIM,GAAT,OACzB,kBAAC,IAAD,CAAMP,MAAOA,EAAOe,MAAOd,EAAIO,GAAcQ,OAAO,EAAG,SCZ9ClB,kBAAK,YAME,IALpBiB,EAKmB,EALnBA,MACAE,EAImB,EAJnBA,MACAC,EAGmB,EAHnBA,WACAC,EAEmB,EAFnBA,QAEmB,IADnBC,gBACmB,SACbX,EAASC,IAAWC,OAAO,CAC/BU,OAAQ,CACNC,WAAY,SACZC,aAAc,GACdC,OAAQ,GACRC,eAAgB,SAChBC,MAAO,IAETC,aAAc,CACZL,WAAY,SACZC,aAAc,GACdK,YAAa,EACbJ,OAAQ,GACRC,eAAgB,SAChBC,MAAO,IAETG,YAAa,CACXC,SAAU,MAIRC,EAAcC,uBAAY,kBAAOZ,GAAYD,MAAW,CAC5DA,EACAC,IAGF,OACE,kBAAC,IAAD,CACEa,cAAeb,EAAW,EAAM,GAChCD,QAASY,EACT/B,MAAO,CAACS,EAAOY,OAAQ,CAACa,gBAAiBhB,KACzC,kBAACJ,EAAA,EAAD,CAAMd,MAAOS,EAAOkB,cAClB,kBAAC,IAAD,CAAM3B,MAAO,CAACS,EAAOoB,YAAa,CAACZ,UAASF,MAAOA,S,QCtC5CjB,kBAAK,YAA2D,IAA7CqC,EAA4C,EAA5CA,IAAKpC,EAAuC,EAAvCA,SAAUqC,EAA6B,EAA7BA,QAASC,EAAoB,EAApBA,QAClDpB,EAAQqB,cACR7B,EAASC,IAAWC,OAAO,CAC/ByB,QAAS,CACPnB,MAAOA,EAAMsB,SAEfC,IAAK,CACHC,YAAaxB,EAAMyB,UACnBC,eAAgB,EAChB9B,cAAe,MACfY,eAAgB,gBAChBmB,gBAAiB,IAEnBC,QAAS,CACP5B,MAAOA,EAAMC,WACb4B,WAAY,UACZhB,SAAU,IAEZO,QAAS,CACPpB,MAAOA,EAAM8B,UAGXC,EAAW,CACfvC,EAAOoC,QACPT,EAAU3B,EAAO2B,aAAUa,EAC3BZ,EAAU5B,EAAO4B,aAAUY,GAG7B,OACE,kBAACnC,EAAA,EAAD,CAAMd,MAAOS,EAAO+B,KAClB,kBAAC,IAAD,CAAMxC,MAAOgD,EAAUjC,MAAK,cAASoB,KACrC,kBAAC,EAAD,CAAOpC,SAAUA,EAAUC,MAAOgD,QCnCzBlD,kBAAK,YAAkD,IAA9BoD,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,MACtCC,EAAeF,EAAKG,MAAM,GAC5BC,EAAMC,OAAOC,iBACbC,EAAMF,OAAOG,iBACbN,EAAaO,QAAU,GACzBP,EAAaQ,SAAQ,SAACpB,GAChBA,EAAMc,IACRA,EAAMd,GAEJA,EAAMiB,IACRA,EAAMjB,MAIZ,IAAM/B,EAASC,IAAWC,OAAO,CAC/BkD,WAAY,CACVC,UAAW,aAGf,OACE,kBAACC,EAAA,EAAD,CAAY/D,MAAOS,EAAOoD,YACvBX,EAAKc,KAAI,SAACxB,EAAKyB,GAAN,OACR,kBAAC,EAAD,CACE7B,QAASI,IAAQc,EACjBvD,SAAoB,IAAVkE,EAAcd,EAAQX,EAAMA,EACtC0B,IAAKhB,EAAKS,OAASM,EACnB9B,IAAKe,EAAKS,OAASM,EACnB5B,QAASG,IAAQiB,YC7BZ3D,kBAAK,YAAiD,IAA5BqE,EAA2B,EAA3BA,SACjC1D,EAASC,IAAWC,OAAO,CAC/ByD,WAAY,CACVN,UAAW,UACXjD,cAAe,MACfY,eAAgB,gBAChB4C,aAAc,GACdC,UAAW,MAGf,OAAO,kBAACxD,EAAA,EAAD,CAAMd,MAAOS,EAAO2D,YAAaD,MCF3BrE,0BAAK,WAClB,IAAMyE,EAAMC,cADqC,EAEvBC,mBAAgB,CACxCvB,KAAM,GACNwB,IAAK,EACLC,MAAO,IALwC,mBAE1CC,EAF0C,KAEnCC,EAFmC,KAO3C1B,EAAQ2B,iBAA8B,MACtCC,EAAUH,EAAMF,IAAME,EAAMD,MAC5B5E,EACJ6E,EAAM1B,KAAK8B,QAAO,SAACC,EAAOC,GAAR,OAAiBD,EAAQC,IAAM,GAAKH,EAClD9D,EAAQqB,cAER7B,EAASC,IAAWC,OAAO,CAC/BwE,UAAW,CACT7D,WAAY,SACZY,gBAAiBjB,EAAMmE,KACvBC,KAAM,EACNC,kBAAmB,GACnBC,WAAY,KAEdpC,MAAO,CACLlC,MAAOA,EAAMC,WACb4B,WAAY,UACZhB,SAAU,GACV0D,WAAY,SAIhBC,qBAAU,WACR,OAAO,WACDtC,EAAMuC,SACRC,aAAaxC,EAAMuC,YAGtB,CAACvC,IAEJ,IAAMX,EAAM,WACV,IAAMoD,GAAY,IAAIC,MAAOC,UACtB5C,EAAoB0B,EAApB1B,KAAMwB,EAAcE,EAAdF,IAAKC,EAASC,EAATD,MAFF,IAGazB,GAAtB6C,EAHS,KAGIC,EAHJ,WAIhBnB,EAAS,CACP3B,KAAK,CAAE,EAAG6C,EAAWrB,EAAMC,GAAvB,mBAAiCqB,IACrCtB,IAAKkB,EACLjB,MAAOiB,KAILK,EAAOjE,uBAAY,WACnBmB,EAAMuC,SACRQ,cAAc/C,EAAMuC,SAFO,IAItBxC,EAAoB0B,EAApB1B,KAAMwB,EAAcE,EAAdF,IAAKC,EAASC,EAATD,MAJW,IAKAzB,GAAtB6C,EALsB,KAKTC,EALS,WAM7BnB,EAAS,CAAC3B,KAAK,CAAE6C,EAAWrB,EAAMC,GAApB,mBAA8BqB,IAAQtB,IAAK,EAAGC,MAAO,MAClE,CAACxB,EAAOyB,IAELuB,EAAQnE,uBAAY,WACxB6C,EAAS,CAAC3B,KAAM,GAAIwB,IAAK,EAAGC,MAAO,MAClC,IAEGyB,EAAMpE,uBAAY,WACtBmB,EAAMuC,QAAUW,aAAY,WAC1BxB,GAAS,SAACyB,GAAD,sBAAeA,EAAf,CAAqB5B,KAAK,IAAImB,MAAOC,iBAC7C,OACF,IAEGnB,EAAQ3C,uBAAY,WACxB,IAAM0C,GAAM,IAAImB,MAAOC,UACvBjB,EAAS,CAAC3B,KAAM,CAAC,GAAIwB,MAAKC,MAAOD,IACjC0B,MACC,CAACA,IAEEG,EAASvE,uBAAY,WACzB,IAAM0C,GAAM,IAAImB,MAAOC,UACvBjB,GAAS,SAACyB,GAAD,sBACJA,EADI,CAEP5B,MACAC,MAAOD,OAET0B,MACC,CAACA,IAEJ,OACE,kBAAC,IAAD,CAAQI,YAAajC,EAAIkC,GAAG,cAAezG,MAAOS,EAAO0E,WACvD,kBAAC,EAAD,CAAOpF,SAAUA,EAAUC,MAAOS,EAAO0C,QAClB,IAAtByB,EAAM1B,KAAKS,QACV,kBAAC,EAAD,KACE,kBAAC,EAAD,CACEzC,WAAW,UACXD,MAAM,UACNG,UAAQ,EACRD,QAASqB,EACTzB,MAAM,QAER,kBAAC,EAAD,CACEG,WAAW,UACXD,MAAM,UACNE,QAASwD,EACT5D,MAAM,WAIX6D,EAAMD,MAAQ,GACb,kBAAC,EAAD,KACE,kBAAC,EAAD,CACEzD,WAAW,UACXD,MAAM,UACNE,QAASqB,EACTzB,MAAM,QAER,kBAAC,EAAD,CACEG,WAAW,UACXD,MAAM,UACNE,QAAS8E,EACTlF,MAAM,UAIX6D,EAAM1B,KAAKS,OAAS,GAAqB,IAAhBiB,EAAMD,OAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,CACEzD,WAAW,UACXD,MAAM,UACNE,QAASgF,EACTpF,MAAM,UAER,kBAAC,EAAD,CACEG,WAAW,UACXD,MAAM,UACNE,QAASoF,EACTxF,MAAM,WAIZ,kBAAC,EAAD,CAAWmC,KAAM0B,EAAM1B,KAAMC,MAAO4B","file":"static/js/41.7256a47f.chunk.js","sourcesContent":["import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _toArray(arr) {\n  return arrayWithHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableRest();\n}","import React, {memo} from 'react';\nimport {StyleProp, StyleSheet, TextStyle, View} from 'react-native';\nimport {Text} from '../../../components';\n\ninterface TimerProps {\n  interval: number;\n  style: StyleProp<TextStyle>;\n}\n\nexport default memo(function Timer({interval, style}: TimerProps) {\n  const pad = (n: number): string =>\n    (n < 10 ? '0' + n.toString() : n).toString();\n  const minutes = Math.floor(interval / 60000);\n  const seconds = Math.floor((interval % 60000) / 1000);\n  const milliseconds = Math.floor((interval % 60000) % 1000);\n  const styles = StyleSheet.create({\n    timerContainer: {\n      flexDirection: 'row',\n    },\n  });\n  return (\n    <View style={styles.timerContainer}>\n      <Text style={style} title={`${pad(minutes)}:`} />\n      <Text style={style} title={`${pad(seconds)}.`} />\n      <Text style={style} title={pad(milliseconds).substr(0, 2)} />\n    </View>\n  );\n});\n","import React, {memo, useCallback} from 'react';\nimport {StyleSheet, View} from 'react-native';\nimport {Text, TouchableOpacity} from '../../../components';\n\ninterface RoundButtonProps {\n  title: string;\n  color: string;\n  background: string;\n  disabled?: boolean;\n  onPress(): void;\n}\n\nexport default memo(function ButtonRound({\n  title,\n  color,\n  background,\n  onPress,\n  disabled = false,\n}: RoundButtonProps) {\n  const styles = StyleSheet.create({\n    button: {\n      alignItems: 'center',\n      borderRadius: 40,\n      height: 80,\n      justifyContent: 'center',\n      width: 80,\n    },\n    buttonBorder: {\n      alignItems: 'center',\n      borderRadius: 38,\n      borderWidth: 1,\n      height: 76,\n      justifyContent: 'center',\n      width: 76,\n    },\n    buttonTitle: {\n      fontSize: 18,\n    },\n  });\n\n  const handlePress = useCallback(() => !disabled && onPress(), [\n    onPress,\n    disabled,\n  ]);\n\n  return (\n    <TouchableOpacity\n      activeOpacity={disabled ? 1.0 : 0.7}\n      onPress={handlePress}\n      style={[styles.button, {backgroundColor: background}]}>\n      <View style={styles.buttonBorder}>\n        <Text style={[styles.buttonTitle, {color}]} title={title} />\n      </View>\n    </TouchableOpacity>\n  );\n});\n","import React, {memo} from 'react';\nimport {StyleSheet, View} from 'react-native';\nimport {useColor} from '../../../hooks';\nimport {Text} from '../../../components';\nimport Timer from './Timer';\n\ninterface LapProps {\n  num: number;\n  interval: number;\n  fastest: boolean;\n  slowest: boolean;\n}\n\nexport default memo(function Lap({num, interval, fastest, slowest}: LapProps) {\n  const color = useColor();\n  const styles = StyleSheet.create({\n    fastest: {\n      color: color.success,\n    },\n    lap: {\n      borderColor: color.secondary,\n      borderTopWidth: 1,\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      paddingVertical: 10,\n    },\n    lapText: {\n      color: color.background,\n      fontFamily: 'Courier',\n      fontSize: 18,\n    },\n    slowest: {\n      color: color.danger,\n    },\n  });\n  const lapStyle = [\n    styles.lapText,\n    fastest ? styles.fastest : undefined,\n    slowest ? styles.slowest : undefined,\n  ];\n\n  return (\n    <View style={styles.lap}>\n      <Text style={lapStyle} title={`Lap ${num}`} />\n      <Timer interval={interval} style={lapStyle} />\n    </View>\n  );\n});\n","import React, {memo} from 'react';\nimport {ScrollView, StyleSheet} from 'react-native';\nimport Lap from './Lap';\n\ninterface LapTableProps {\n  laps: number[];\n  timer: number;\n}\n\nexport default memo(function LapsTable({laps, timer}: LapTableProps) {\n  const finishedLaps = laps.slice(1);\n  let min = Number.MAX_SAFE_INTEGER;\n  let max = Number.MIN_SAFE_INTEGER;\n  if (finishedLaps.length >= 2) {\n    finishedLaps.forEach((lap) => {\n      if (lap < min) {\n        min = lap;\n      }\n      if (lap > max) {\n        max = lap;\n      }\n    });\n  }\n  const styles = StyleSheet.create({\n    scrollView: {\n      alignSelf: 'stretch',\n    },\n  });\n  return (\n    <ScrollView style={styles.scrollView}>\n      {laps.map((lap, index) => (\n        <Lap\n          fastest={lap === min}\n          interval={index === 0 ? timer + lap : lap}\n          key={laps.length - index}\n          num={laps.length - index}\n          slowest={lap === max}\n        />\n      ))}\n    </ScrollView>\n  );\n});\n","import React, {ReactNode, memo} from 'react';\nimport {StyleSheet, View} from 'react-native';\n\ninterface ButtonRowProps {\n  children: ReactNode | ReactNode[];\n}\n\nexport default memo(function ButtonsRow({children}: ButtonRowProps) {\n  const styles = StyleSheet.create({\n    buttonsRow: {\n      alignSelf: 'stretch',\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      marginBottom: 30,\n      marginTop: 80,\n    },\n  });\n  return <View style={styles.buttonsRow}>{children}</View>;\n});\n","import React, {memo, useCallback, useEffect, useRef, useState} from 'react';\nimport {StyleSheet} from 'react-native';\nimport {Screen} from '../../../components';\nimport {useColor, useNav} from '../../../hooks';\nimport Timer from './Timer';\nimport RoundButton from './ButtonRound';\nimport LapsTable from './LapsTable';\nimport ButtonsRow from './ButtonsRow';\n\ninterface State {\n  laps: number[];\n  now: number;\n  start: number;\n}\n\nexport default memo(function PlaygroundStopWatch() {\n  const nav = useNav();\n  const [state, setState] = useState<State>({\n    laps: [],\n    now: 0,\n    start: 0,\n  });\n  const timer = useRef<NodeJS.Timeout | null>(null);\n  const elapsed = state.now - state.start;\n  const interval =\n    state.laps.reduce((total, curr) => total + curr, 0) + elapsed;\n  const color = useColor();\n\n  const styles = StyleSheet.create({\n    container: {\n      alignItems: 'center',\n      backgroundColor: color.text,\n      flex: 1,\n      paddingHorizontal: 20,\n      paddingTop: 130,\n    },\n    timer: {\n      color: color.background,\n      fontFamily: 'Courier',\n      fontSize: 54,\n      fontWeight: '200',\n    },\n  });\n\n  useEffect(() => {\n    return () => {\n      if (timer.current) {\n        clearTimeout(timer.current);\n      }\n    };\n  }, [timer]);\n\n  const lap = () => {\n    const timestamp = new Date().getTime();\n    const {laps, now, start} = state;\n    const [firstLap, ...other] = laps;\n    setState({\n      laps: [0, firstLap + now - start, ...other],\n      now: timestamp,\n      start: timestamp,\n    });\n  };\n\n  const stop = useCallback(() => {\n    if (timer.current) {\n      clearInterval(timer.current);\n    }\n    const {laps, now, start} = state;\n    const [firstLap, ...other] = laps;\n    setState({laps: [firstLap + now - start, ...other], now: 0, start: 0});\n  }, [timer, state]);\n\n  const reset = useCallback(() => {\n    setState({laps: [], now: 0, start: 0});\n  }, []);\n\n  const run = useCallback(() => {\n    timer.current = setInterval(() => {\n      setState((prev) => ({...prev, now: new Date().getTime()}));\n    }, 100);\n  }, []);\n\n  const start = useCallback(() => {\n    const now = new Date().getTime();\n    setState({laps: [0], now, start: now});\n    run();\n  }, [run]);\n\n  const resume = useCallback(() => {\n    const now = new Date().getTime();\n    setState((prev) => ({\n      ...prev,\n      now,\n      start: now,\n    }));\n    run();\n  }, [run]);\n\n  return (\n    <Screen onLeftPress={nav.to('playground')} style={styles.container}>\n      <Timer interval={interval} style={styles.timer} />\n      {state.laps.length === 0 && (\n        <ButtonsRow>\n          <RoundButton\n            background=\"#151515\"\n            color=\"#8B8B90\"\n            disabled\n            onPress={lap}\n            title=\"Lap\"\n          />\n          <RoundButton\n            background=\"#1B361F\"\n            color=\"#50D167\"\n            onPress={start}\n            title=\"Start\"\n          />\n        </ButtonsRow>\n      )}\n      {state.start > 0 && (\n        <ButtonsRow>\n          <RoundButton\n            background=\"#3D3D3D\"\n            color=\"#FFFFFF\"\n            onPress={lap}\n            title=\"Lap\"\n          />\n          <RoundButton\n            background=\"#3C1715\"\n            color=\"#E33935\"\n            onPress={stop}\n            title=\"Stop\"\n          />\n        </ButtonsRow>\n      )}\n      {state.laps.length > 0 && state.start === 0 && (\n        <ButtonsRow>\n          <RoundButton\n            background=\"#3D3D3D\"\n            color=\"#FFFFFF\"\n            onPress={reset}\n            title=\"Reset\"\n          />\n          <RoundButton\n            background=\"#1B361F\"\n            color=\"#50D167\"\n            onPress={resume}\n            title=\"Start\"\n          />\n        </ButtonsRow>\n      )}\n      <LapsTable laps={state.laps} timer={elapsed} />\n    </Screen>\n  );\n});\n"],"sourceRoot":""}