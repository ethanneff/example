{"version":3,"sources":["apps/Focus/components/ListSection.tsx","apps/Focus/components/ListItem.tsx","apps/Focus/components/List.tsx","apps/Focus/index.tsx"],"names":["ListSection","memo","item","View","style","alignItems","borderTopColor","borderTopWidth","flexDirection","justifyContent","marginTop","Theme","padding","p02","h3","title","dayOfMonth","overline","month","dayOfWeek","ListItem","showSection","onItemPress","currentItem","color","useColor","future","id","Date","now","iconColor","secondary","success","action","borderColor","primary","background","borderLeftWidth","p01","flex","TouchableOpacity","height","p10","paddingHorizontal","p04","paddingVertical","onPress","disabled","width","p20","name","size","paddingRight","hour","zone","body1","numberOfLines","ellipsizeMode","EllipsizeMode","Tail","itemHeight","initialIndex","dayjs","startOf","add","diff","getItemLayout","_","index","length","offset","getCurrentItem","currentTime","before","setHours","getHours","after","getFirstItemOfDay","items","keyExtractor","String","List","onEndReached","onEndReachedThreshold","useState","loading","setLoading","styles","StyleSheet","create","list","opacity","position","onLoad","useCallback","setTimeout","useEffect","renderItem","FlatList","inverted","initialScrollIndex","data","ActivityIndicator","editItem","visible","Focus","modalItemEdit","setModalItemEdit","modalProfile","modalLogin","setItems","nav","useNav","generateMoreItems","group","i","lastItem","valueOf","next","subtract","push","Math","random","format","handleItemPress","handleLoad","handleModalEditBackgroundPress","state","onLeftPress","to","duration","testID","onBackgroundPress"],"mappings":"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","file":"static/js/34.093ce383.chunk.js","sourcesContent":["import React, { memo } from \"react\";\nimport { View } from \"react-native\";\nimport { Text } from \"../../../components\";\nimport { Theme } from \"../../../utils\";\nimport { Item } from \"./List\";\n\ninterface Props {\n  item: Item;\n}\n\nexport const ListSection = memo(({ item }: Props) => \n  <View\n    style={{\n      alignItems: \"center\",\n      borderTopColor: \"grey\",\n      borderTopWidth: 1,\n      flexDirection: \"row\",\n      justifyContent: \"center\",\n      marginTop: Theme.padding.p02,\n      padding: Theme.padding.p02\n    }}\n  >\n    <Text h3 title={item.dayOfMonth} />\n    <Text overline title={` ${item.month}, ${item.dayOfWeek}`} />\n  </View>\n);\n","import React, { memo } from \"react\";\nimport { TouchableOpacity, View } from \"react-native\";\nimport { EllipsizeMode, Icon, Text } from \"../../../components\";\nimport { Theme } from \"../../../utils\";\nimport { Item } from \"./List\";\nimport { ListSection } from \"./ListSection\";\nimport { useColor } from \"../../../hooks\";\n\ninterface Props {\n  showSection: boolean;\n  item: Item;\n  currentItem: boolean;\n  onItemPress(item: Item): void;\n}\n\nexport const ListItem = memo(\n  ({ showSection, item, onItemPress, currentItem }: Props) => {\n    const color = useColor();\n    const future = item.id > Date.now();\n    const iconColor = future ? color.secondary : color.success;\n    const title = currentItem ? \"current\" : future ? \"future\" : item.action;\n    return (\n      <View\n        style={{\n          borderColor: currentItem ? color.primary : color.background,\n          borderLeftWidth: Theme.padding.p01,\n          flex: 1\n        }}\n      >\n        <TouchableOpacity\n          style={{\n            flex: 1,\n            flexDirection: \"row\",\n            height: Theme.padding.p10,\n            paddingHorizontal: Theme.padding.p04,\n            paddingVertical: Theme.padding.p02\n          }}\n          onPress={() => onItemPress(item)} // TODO: usecallback\n          disabled={future}\n        >\n          <View\n            style={{\n              flexDirection: \"row\",\n              width: Theme.padding.p20\n            }}\n          >\n            <Icon\n              name={future ? \"cancel\" : \"checkbox-blank-circle\"}\n              size={14}\n              color={iconColor}\n              style={{ paddingRight: Theme.padding.p01 }}\n            />\n            <Text title={`${item.hour} ${item.zone}`} />\n          </View>\n          <Text\n            style={{\n              color: color.secondary,\n              flex: 1\n            }}\n            title={title}\n            body1\n            numberOfLines={1}\n            ellipsizeMode={EllipsizeMode.Tail}\n          />\n        </TouchableOpacity>\n        {showSection && <ListSection item={item} />}\n      </View>\n    );\n  }\n);\n","import React, { memo, useState, useEffect, useCallback } from \"react\";\nimport { StyleSheet , FlatList, ActivityIndicator } from \"react-native\";\n\nimport { ListItem } from \"./ListItem\";\nimport { Theme } from \"../../../utils\";\nimport dayjs from \"dayjs\";\n\nexport interface Item {\n  action: string;\n  dayOfMonth: string;\n  dayOfWeek: string;\n  hour: string;\n  id: number;\n  month: string;\n  zone: string;\n}\n\ninterface Props {\n  items: Item[];\n  onEndReached(): void;\n  onEndReachedThreshold: number;\n  onItemPress(item: Item): void;\n}\n\nconst itemHeight = Theme.padding.p10;\n\nconst initialIndex =\n  dayjs()\n    .startOf(\"day\")\n    .add(2, \"day\")\n    .diff(dayjs(), \"hour\") - 4;\n\nconst getItemLayout = (_: any, index: number) => ({\n  length: itemHeight,\n  offset: itemHeight * index,\n  index\n});\n\nconst getCurrentItem = (item: Item): boolean => {\n  const currentTime = new Date();\n  const before = currentTime.setHours(currentTime.getHours() - 1);\n  const after = currentTime.setHours(currentTime.getHours() + 1);\n  if (item.id > before && item.id < after) {\n    return true;\n  }\n  return false;\n};\n\nconst getFirstItemOfDay = (index: number, item: Item, items: Item[]) =>\n  index < 1 ? false : item.dayOfMonth !== items[index - 1].dayOfMonth;\n\nconst keyExtractor = (item: Item) => String(item.id);\n\nexport const List = memo(\n  ({ items, onItemPress, onEndReached, onEndReachedThreshold }: Props) => {\n    const [loading, setLoading] = useState(true);\n    const styles = StyleSheet.create({\n      list: {\n        opacity: loading ? 0 : 1\n      },\n      loading: {\n        position: \"absolute\",\n        height: \"100%\",\n        width: \"100%\"\n      }\n    });\n\n    const onLoad = useCallback(() => {\n      setTimeout(() => {\n        setLoading(false);\n      }, 1000);\n    }, []);\n\n    useEffect(onLoad, []);\n\n    const renderItem = useCallback(\n      ({ item, index }) => \n        <ListItem\n          currentItem={getCurrentItem(item)}\n          item={item}\n          showSection={getFirstItemOfDay(index, item, items)}\n          onItemPress={onItemPress}\n        />\n      ,\n      [items, onItemPress]\n    );\n\n    return (\n      <>\n        <FlatList\n          style={styles.list}\n          inverted\n          initialScrollIndex={initialIndex}\n          getItemLayout={getItemLayout}\n          keyExtractor={keyExtractor}\n          data={items}\n          onEndReached={onEndReached}\n          onEndReachedThreshold={onEndReachedThreshold}\n          renderItem={renderItem}\n        />\n        {loading && <ActivityIndicator size=\"large\" style={styles.loading} />}\n      </>\n    );\n  }\n);\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport { Screen, Dialog } from \"../../components\";\nimport { useNav } from \"../../hooks\";\nimport { List, Item } from \"./components/List\";\nimport dayjs from \"dayjs\";\n\n// TODO: flatlist on web\n// TODO: rename item.action to item.title\n// TODO: fix refresh scroll jitter\n// TODO: re-rendering everything because dialog is same level as list\n\nconst infiniteScrollRegeneration = 100;\nconst editItem: { visible: boolean; item: Item | null } = {\n  visible: false,\n  item: null\n};\nexport default function Focus() {\n  const [modalItemEdit, setModalItemEdit] = useState(editItem);\n  const [modalProfile] = useState(false);\n  const [modalLogin] = useState(false);\n  const [items, setItems] = useState<Item[]>([]);\n  const nav = useNav();\n\n  const generateMoreItems = useCallback(() => {\n    const group = [...items];\n    for (let i = 0; i < infiniteScrollRegeneration; i++) {\n      const lastItem =\n        group.length === 0\n          ? dayjs()\n              .startOf(\"day\")\n              .add(2, \"day\")\n              .valueOf()\n          : group[group.length - 1].id;\n      const next = dayjs(lastItem).subtract(1, \"hour\");\n      const id = next.valueOf();\n      group.push({\n        action: String(Math.random()) + String(Math.random()),\n        dayOfMonth: next.format(\"D\"),\n        dayOfWeek: next.format(\"ddd\"),\n        hour: next.format(\"h\"),\n        id,\n        month: next.format(\"MMM\"),\n        zone: next.format(\"a\")\n      });\n    }\n    setItems(group);\n  }, [items]);\n\n  const handleItemPress = useCallback((item: Item) => {\n    setModalItemEdit({ visible: true, item });\n  }, []);\n\n  const handleLoad = useCallback(() => {\n    if (items.length > 0) {\n      return;\n    }\n    generateMoreItems();\n  }, [generateMoreItems, items.length]);\n\n  const handleModalEditBackgroundPress = useCallback(() => {\n    setModalItemEdit(state => ({ ...state, visible: false }));\n  }, []);\n\n  useEffect(handleLoad, []);\n\n  return (\n    <>\n      <Screen onLeftPress={nav.to(\"portfolioLanding\")} title=\"Focus\">\n        {items.length > 0 && \n          <List\n            items={items}\n            onItemPress={handleItemPress}\n            onEndReached={generateMoreItems}\n            onEndReachedThreshold={0.5}\n          />\n        }\n      </Screen>\n      {modalItemEdit.visible && \n        <Dialog\n          duration={2000}\n          testID=\"editItem\"\n          title={modalItemEdit.item ? modalItemEdit.item.action : \"empty\"}\n          onBackgroundPress={handleModalEditBackgroundPress}\n        />\n      }\n      {modalProfile && \n        <Dialog\n          testID=\"editItem\"\n          title=\"hello\"\n          onBackgroundPress={handleModalEditBackgroundPress}\n        />\n      }\n      {modalLogin && \n        <Dialog\n          testID=\"editItem\"\n          title=\"hello\"\n          onBackgroundPress={handleModalEditBackgroundPress}\n        />\n      }\n    </>\n  );\n}\n"],"sourceRoot":""}